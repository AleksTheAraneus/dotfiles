1442613002300:taxon.id = as.character(taxon.id)
1442613002301:At = A$annotation[[taxon.id]]
1442613002301:background = intersect(unique(unlist(At)), rownames(X))
1442613002301:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442613002301:#r = top.correlated(X, subset=background, k=k)
1442613002302:mclapply(r, function(c1) { # dla każdego transkryptu
1442613002302:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442613002302:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442613002303:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442613002303:oo = NULL
1442613002303:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442613002304:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442613002304:if (ct[1,1] >= min.count) {
1442613002304:fet = fisher.test(ct)
1442613002304:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442613002305:#oo = as.numeric(fet$estimate)
1442613002305:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442613002305:}
1442613002306:}
1442613002306:oo
1442613002306:})
1442613002307:unlist(o)
1442613002307:}, mc.cores=NCPU)
1442613002307:}
1442613002308:### Get Go terms associated with each tx
1442613002308:assign.terms <-function(predictions) {
1442613002309:}
1442613013045:top.correlated = function(X, subset=NULL, k=50) {
1442613013046:k = min(k, nrow(X) - 1)
1442613013046:X = as.matrix(X)
1442613013046:stopifnot(sum(is.na(X)) == 0)
1442613013046:Xs = t(apply(X,1,scale))
1442613013046:o = mclapply(1:nrow(Xs), function(i) {
1442613013047:if ((i > 0) && (i %% 100 == 0)) {
1442613013047:sprintf("Calculating correlations for row: %d", i)
1442613013047:}
1442613013047:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442613013048:oo = names(r)[order(r, decreasing=T)]
1442613013048:if (!is.null(subset)) {
1442613013048:oo = oo[oo %in% subset]
1442613013049:}
1442613013049:oo[1:min(k, length(oo))]
1442613013049:}, mc.cores=NCPU)
1442613013049:names(o) = rownames(Xs)
1442613013050:o
1442613013050:}
1442613013051:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442613013051:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442613013051:#TODO check if tx_input in subset
1442613013051:tx_input_list <- as.character(tx_input_list)
1442613013051:if (!is.null(subset)) {
1442613013052:X = X[rownames(X) %in% subset,]
1442613013052:}
1442613013052:X <- t(X)
1442613013052:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442613013053:out <- mclapply(1:ncol(Xi),
1442613013053:function(i) {
1442613013053:new <- cor(X, Xi[,i])
1442613013053:names <- rownames(new)
1442613013054:oo <- as.vector(new)
1442613013054:names(oo) <- names
1442613013054:oo
1442613013054:},
1442613013055:mc.cores=NCPU )
1442613013055:names(out) <- colnames(Xi)
1442613013055:out
1442613013056:}
1442613013056:get.most.correlated <- function(X, subset=NULL, tx_input_list, how.many=50) {
1442613013057:# X - output of correlation.selected()
1442613013057:out <- correlation.selected(X, subset, tx_input_list)
1442613013057:out <- mclapply(out,
1442613013057:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442613013058:mc.cores=NCPU
1442613013058:)
1442613013058:#out <- matrix(unlist(out), ncol=ncol(X))
1442613013058:#rownames(out) <- NULL
1442613013058:#names(out) <- tx_input_list
1442613013059:out
1442613013059:}
1442613056044:predictions <- predict.annotations.knn(Xp, GO, 9606)
1442613064290:library(parallel)
1442613064428:library(limma)
1442613065067:NCPU = detectCores()
1442613069528:predictions <- predict.annotations.knn(Xp, GO, 9606)
1442613148993:rm(cor_ep, A, At, c1,c2, col.names, h,r)
1442613214382:rm(z,zi)
1442613220165:predictions$`221150`
1442613226144:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442613233086:z <- unique(as.character(GO$table$Term.Name)[GO$table$Term.ID %in% z])
1442613235421:z
1442613318082:rm(z,zi)
1442613325875:library(parallel)
1442613326005:library(limma)
1442613327121:NCPU = detectCores()
1442613329315:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442613336146:GO$table$Term.ID %in% z
1442613343676:GO$table$Term.Name
1442613410426:library(parallel)
1442613410540:library(limma)
1442613411379:NCPU = detectCores()
1442613419147:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442613474883:terms <- A$table$Term.Name[A$table$Taxon.ID == taxon.id]
1442613490225:terms <- GO$table$Term.ID[GO$table$Taxon.ID == taxon.id]
1442613491502:terms <- GO$table$Term.Name[GO$table$Taxon.ID == taxon.id]
1442613520663:terms <- GO$table$Term.ID[GO$table$Taxon.ID == taxon.id]
1442613520903:term.names <- GO$table$Term.Name[GO$table$Taxon.ID == taxon.id]
1442613542996:term.names <- as.character(GO$table$Term.Name[GO$table$Taxon.ID == taxon.id])
1442613575617:term.ids <- as.character(GO$table$Term.ID[GO$table$Taxon.ID == taxon.id])
1442613575858:term.names <- as.character(GO$table$Term.Name[GO$table$Taxon.ID == taxon.id])
1442613581429:z <- unique(as.character(term.names)[GO$table$term.ids %in% z])
1442613584142:z
1442613593833:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442613594908:term.ids <- as.character(GO$table$Term.ID[GO$table$Taxon.ID == taxon.id])
1442613595281:term.names <- as.character(GO$table$Term.Name[GO$table$Taxon.ID == taxon.id])
1442613597144:z <- unique(as.character(term.names)[GO$table$term.ids %in% z])
1442613599542:z
1442613615304:term.ids <- GO$table$Term.ID[GO$table$Taxon.ID == taxon.id]
1442613615576:term.names <- GO$table$Term.Name[GO$table$Taxon.ID == taxon.id]
1442613620992:rm(terms)
1442613664123:term.ids <- GO$table$Term.ID
1442613664523:term.names <- GO$table$Term.Name
1442613668809:z <- unique(as.character(term.names)[GO$table$term.ids %in% z])
1442613670270:z
1442613683718:z <- unique(as.character(term.names[GO$table$term.ids %in% z]))
1442613694645:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442613702643:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442613702882:term.ids <- GO$table$Term.ID
1442613703121:term.names <- GO$table$Term.Name
1442613708206:functions <- term.names[GO$table$term.ids %in% z]
1442613722747:functions <- unique(term.names[GO$table$term.ids %in% z])
1442613742132:term.ids <- as.character(GO$table$Term.ID)
1442613742307:term.names <- as.character(GO$table$Term.Name)
1442613759434:functions <- unique(term.names[term.ids %in% z])
1442613768117:functions
1442613849607:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442613849805:term.ids <- as.character(GO$table$Term.ID)
1442613850001:term.names <- as.character(GO$table$Term.Name)
1442613850676:functions <- unique(term.names[term.ids %in% z])
1442613874861:write.csv(functions, "functions_ska3.csv")
1442614002779:functions <- droplevels(unique(term.names[term.ids %in% z]))
1442614271596:save.image("/mnt/DATAPART1/rnaseq/.RData")
1442614342558:sum(term.ids != GO$table$Term.ID)
1442614373504:term.names[term.ids=="GO:0051315"]
1442614396569:unique(term.names[term.ids=="GO:0051315"])
1442614441618:GO$annotation$9606$`GO:0051315
1442614444442:GO$annotation$9606$`GO:0051315`
1442614454071:GO$annotation$9606
1442614460406:GO$annotation$`9606`$`GO:0051315`
1442614892336:predictions <- predict.annotations.knn(Xp, GO, 9606, min.count = 3)
1442614898195:library(parallel)
1442614898283:library(limma)
1442614899561:NCPU = detectCores()
1442614902167:predictions <- predict.annotations.knn(Xp, GO, 9606, min.count = 3)
1442615107164:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442615108963:term.ids <- as.character(GO$table$Term.ID)
1442615109196:term.names <- as.character(GO$table$Term.Name)
1442615109802:functions <- unique(term.names[term.ids %in% z])
1442615132725:write.csv(functions, "functions_ska3.csv")
1442615152301:functions
1442615164831:predictions <- predict.annotations.knn(Xp, GO, 9606, min.count = 2)
1442615403147:(predictions$`221150`)[predictions$`221150`<0.05]
1442615438450:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442615438451:taxon.id = as.character(taxon.id)
1442615438451:At = A$annotation[[taxon.id]]
1442615438451:background = intersect(unique(unlist(At)), rownames(X))
1442615438451:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442615438452:#r = top.correlated(X, subset=background, k=k)
1442615438452:mclapply(r, function(c1) { # dla każdego transkryptu
1442615438452:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442615438453:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442615438453:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442615438453:oo = NULL
1442615438454:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442615438454:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442615438454:if (ct[1,1] >= min.count) {
1442615438454:fet = fisher.test(ct)
1442615438455:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442615438455:#oo = as.numeric(fet$estimate)
1442615438455:oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1442615438456:}
1442615438456:}
1442615438456:oo
1442615438457:})
1442615438457:unlist(o)
1442615438457:}, mc.cores=NCPU)
1442615438458:}
1442615438459:### Get Go terms associated with each tx
1442615438459:assign.terms <-function(predictions) {
1442615438459:}
1442615446993:predictions <- predict.annotations.knn(Xp, GO, 9606, min.count = 1)
1442615544917:predictions$`221150`
1442615555450:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05 $ predictions$`221150`>0])
1442615564798:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05 & predictions$`221150`>0])
1442615628481:info.path = file.path(CACHE.DIR, "gene_info.rda")
1442615628703:if (!file.exists(info.path)) {
1442615628894:path = file.path(CACHE.DIR, "gene_info.gz")
1442615629054:if (!file.exists(path)) {
1442615629250:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz", path)
1442615629521:}
1442615629831:h = gzfile(path, open="r")
1442615630118:gene_info = read.table(h, skip=1, sep="\t")
1442615630464:}
1442615716098:info.path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.rda")
1442615716280:if (!file.exists(info.path)) {
1442615716450:path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.gz")
1442615716621:if (!file.exists(path)) {
1442615716797:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/Homo_sapiens.gene_info.gz", path)
1442615717098:}
1442615719069:h = gzfile(path, open="r")
1442615719247:gene_info = read.table(h, skip=1, sep="\t")
1442615719419:}
1442615729424:gene_info = read.table(h, skip=1, sep="\t", fill=T)
1442615747242:head(gene_info)
1442615764492:gene_info$V2
1442616012792:info.path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.rda")
1442616012975:if (!file.exists(info.path)) {
1442616013122:path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.gz")
1442616013297:if (!file.exists(path)) {
1442616013443:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/Homo_sapiens.gene_info.gz", path)
1442616013604:}
1442616021168:}
1442616028668:h = gzfile(path, open="r")
1442616029330:gene_info = read.table(h, skip=1, sep="\t")
1442616038073:gene_info = read.table(h, skip=1, sep="\t", fill=T)
1442616058114:gene_info$V2 == ""
1442616067277:which(gene_info$V2 == "221150")
1442616111344:header <- readLines(h, n=1)
1442616115968:header
1442616121142:h = gzfile(path, open="r")
1442616121996:header <- readLines(h, n=1)
1442616126423:header
1442616186917:grep("ska|SKA", gene_info$V5)
1442616215618:gene_info$V5[grepl("ska|SKA", gene_info$V5)]
1442616310701:which(gene_info$V2 == "221150")
1442616320418:sum(gene_info$V2 == "221150")
1442616367520:head(gene_info$V2)
1442616375957:head(gene_info$V1)
1442616527295:sum(gene_info$V2 == "221150")
1442616530020:sum(gene_info$V1 == "221150")
1442616532892:sum(gene_info$V3 == "221150")
1442616536042:sum(gene_info$V4 == "221150")
1442616539227:sum(gene_info$V5 == "221150")
1442616542230:sum(gene_info == "221150")
1442616555872:View(gene_info)
1442616556099:View(gene_info)
1442616738298:X = read.table("expression.gene.v2.tsv")
1442616745932:Xp = preprocess(X)
1442616753002:library(limma)
1442616753954:library(parallel)
1442616756120:NCPU = detectCores()
1442616759393:Xp = preprocess(X)
1442616936849:sum(rownames(Xp)=="221150")
1442617009433:z <- cor(t(Xp), Xp[rownames(Xp)=="221150",])
1442617014502:View(z)
1442617089229:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))# [2051:2100]
1442617108744:Xp.h <- Xp[h,]
1442617132098:dim(Xp)
1442617139017:Xp.h <- Xp[h,]
1442617142492:dim(Hp.h)
1442617146218:dim(Xp.h)
1442617192942:Xp = preprocess(X)
1442617209592:z <- cor(t(Xp), Xp[rownames(Xp)=="221150",])
1442617245012:predictions <- predict.annotations.knn(X, GO, 9606)
1442617313554:functions1 <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442617314019:term.ids <- as.character(GO$table$Term.ID)
1442617314267:term.names <- as.character(GO$table$Term.Name)
1442617314819:functions <- unique(term.names[term.ids %in% z])
1442617341117:predictions <- predict.annotations.knn(Xp, GO, 9606)
1442617627114:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", skip=1)
1442617639548:View(gene_info)
1442617672599:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv")
1442617751547:?read.table
1442617852558:h = gzfile(path, open="r")
1442617864548:gene_info = read.delim(h, skip=1)
1442617875366:View(gene_info)
1442617918451:header
1442617935046:gene_info = read.delim(h, skip=1, header=F)
1442617950996:gene_info = read.delim(h, skip=1)
1442617960958:gene_info = read.delim(h)
1442617966453:h = gzfile(path, open="r")
1442617966724:gene_info = read.delim(h)
1442617983121:h = gzfile(path, open="r")
1442617983397:gene_info = read.delim(h, skip=1, header=F)
1442617997301:View(gene_info)
1442618002977:header
1442618146845:z
1442618190194:z$gene_id<- rownames(z)
1442618207153:z
1442618224142:z <- cor(t(Xp), Xp[rownames(Xp)=="221150",])
1442618227295:class(z)
1442618235200:rownames(z)
1442618245697:zr <- rownames(z)
1442618265267:z$gene_id <- c(NA)
1442618274917:z <- cor(t(Xp), Xp[rownames(Xp)=="221150",])
1442618307225:Vieworder(z)
1442618311492:View(order(z))
1442618348418:View(z[order(z$V1),])
1442618353776:z$V1
1442618355618:z
1442618365142:z <- as.data.frame()
1442618367342:z <- as.data.frame(z)
1442618371399:z$V1
1442618375225:View(z[order(z$V1),])
1442618385917:zr
1442618392770:zr <- rownames(z)
1442618397826:head(zr)
1442618420802:zr <- zr[order(z$V1)]
1442618422592:zr
1442618433977:View(zr[order(z$V1)])
1442618442374:zr <- rownames(z)
1442618452602:zrr <- zr[order(z$V1)]
1442618455017:View(zr[order(z$V1)])
1442618461942:zr <- rownames(z)
1442618462942:z
1442618474942:zrr <- cbind(z, zr)
1442618476867:zrr
1442618482992:View(zrr)
1442618517018:zrrr <- zrr[order(zr$V1, decreasing = T),]
1442618531442:zrrr <- zrr[order(zrr$V1, decreasing = T),]
1442618533342:zrrr
1442618539942:View(zrrr)
1442618562623:View(zrrr[2:51])
1442618565943:View(zrrr[2:51,])
1442618580993:zrrr[2:51,]
1442618632517:write.table(zrrr[2:51,], file="correlations_for_ska3.tsv", sep="\t", row.names = F)
1442618694717:View(sort(zrrr[2:51,]))
1442618700967:zrrr[2:51,]
1442618715267:View(order(zrrr[2:51,]))
1442618738543:View(zrrr[order(zrrr[2:51,], ),])
1442618765520:View(zrrr[order(zrrr[2:51,]$zr, ),])
1442618840042:zr <- zrrr[2:51]
1442618842542:zr <- zrrr[2:51,]
1442618844554:zr
1442618860167:zr[order(zr$zr)]
1442618863817:zr[order(zrrr$zrrr)]
1442618866994:zr[order(zrrr$zr)]
1442618885695:sort(names(zr))
1442618897467:sort(ronames(zr))
1442618899776:sort(rownames(zr))
1442618973892:a <- read.delim("correlated_with_SKA3.tsv")
1442618975324:a
1442618993720:a <- read.table("correlated_with_SKA3.tsv", sep="\t")
1442619008896:a <- read.table("correlated_with_SKA3.tsv")
1442619014092:View(a)
1442619038769:View(zr)
1442619051268:a$V1 %in% zrr$zr
1442619082442:zrr$zr %in% a$V1
1442619103898:class(zrr$zr)
1442619125893:zrr$zr <- as.character(droplevels(zrr$zr))
1442619127601:class(zrr$zr)
1442619130297:zrr$zr %in% a$V1
1442619137269:zrr$zr
1442619143142:zr
1442619155667:class(zr$zr)
1442619163067:zrr$zr <- as.character(droplevels(zr$zr))
1442619173602:zr$zr <- as.character(droplevels(zr$zr))
1442619174967:zr
1442619191248:zrr$zr %in% a$V1
1442619200594:class(a$V1)
1442619207667:a$V1
1442619224142:a$V1 <- as.character(a$V1)
1442619227042:zrr$zr %in% a$V1
1442619231567:zr$zr %in% a$V1
1442619241892:a$V1 %in% zr$zr
1442619323224:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442619323224:taxon.id = as.character(taxon.id)
1442619323224:At = A$annotation[[taxon.id]]
1442619323224:background = intersect(unique(unlist(At)), rownames(X))
1442619323225:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442619323225:#r = top.correlated(X, subset=background, k=k)
1442619323225:#   mclapply(r, function(c1) { # dla każdego transkryptu
1442619323226:#     c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442619323226:#     o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442619323226:#       c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442619323226:#       oo = NULL
1442619323227:#       if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442619323227:#         ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442619323227:#         if (ct[1,1] >= min.count) {
1442619323227:#           fet = fisher.test(ct)
1442619323228:#           #oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442619323228:#           #oo = as.numeric(fet$estimate)
1442619323228:#           oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442619323228:#         }
1442619323229:#       }
1442619323229:#       oo
1442619323229:#     })
1442619323229:#     unlist(o)
1442619323230:#   }, mc.cores=NCPU)
1442619323230:r
1442619323230:}
1442619352967:r=predict.annotations.knn(Xp, GO, 9606)
1442619362892:r
1442619384592:r$`221150` %in% a$V1
1442619417344:r$`221150` %in% zr$zr
1442619445801:zr$zr %in% r$`221150`
1442619488297:z
1442619536895:functions1 <- as.character(zr$zr)
1442619544142:functions1
1442619547967:term.ids <- as.character(GO$table$Term.ID)
1442619548217:term.names <- as.character(GO$table$Term.Name)
1442619548548:functions <- unique(term.names[term.ids %in% z])
1442619552219:functions
1442619577756:functions <- unique(term.names[term.ids %in% functions1])
1442619629770:sum(term.ids ==functions1[1])
1442619632600:sum(term.ids ==functions1[3])
1442619643092:term.ids[1]
1442619876037:View(cbind(term.ids, term.names))
1442619935776:map <- (cbind(term.ids, term.names))
1442619970322:View(merge(as.data.frame(functions1), map))
1442620192069:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv")
1442620237042:a <- read.table("correlated_with_SKA3.tsv")
1442620239797:View(a)
1442620296452:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", skip=1)
1442620301117:View(gene_info)
1442620308794:View(gene_info)
1442620318637:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", skip=1, header=F)
1442620353969:View(gene_info)
1442620427898:geneid2name <- cbind(gene_info$V2, gene_info$V3, gene_info$V9)
1442620430308:View(geneid2name)
1442620479284:geneid2name <- gene_info[,c(2,3,9)]
1442620483318:View(geneid2name)
1442620504296:a[,1]
1442620537054:class(geneid2name$V2)
1442620540530:class(geneid2name$V3)
1442620562303:ar <- merge(a[,1], geneid2name)
1442620607501:View(ar)
1442620642494:names(ar)
1442620644980:names(a)
1442620671700:a <- read.table("correlated_with_SKA3.tsv", header=T)
1442620690805:names(geneid2name)
1442620728274:names(geneid2name) <- c("Gene.ID", "name", "description")
1442620739579:ar <- merge(a[,1], geneid2name, all=F)
1442620754984:View(ar)
1442620764780:names(a)
1442620770323:names(geneid2name)
1442620784995:ar <- merge(a, geneid2name, all=F)
1442620788648:View(ar)
1442620902780:r <- cor(t(Xp), Xp[rownames(Xp)=="221150",])
1442620909470:View(r)
1442620939123:r$Gene.ID <- rownames(r)
1442620956750:r <- cor(t(Xp), Xp[rownames(Xp)=="221150",])
1442620968854:r <- as.data.frame(r)
1442620972797:r$Gene.ID <- rownames(r)
1442620994048:z <- r
1442620997171:View(z)
1442621068822:z <- z[order(z$V1, decreasing = T),]
1442621073572:View(z)
1442621109155:z <- z[2:50,]
1442621113317:View(z)
1442621138842:View(merge(z, geneid2name, all=F))
1442621261442:Xp.b <- Xp[rownames(Xp %in% background),]
1442621323854:Xp.b <- Xp[rownames(Xp) %in% background,]
1442621348342:r <- cor(t(Xp.b), Xp.b[rownames(Xp.b)=="221150",])
1442621394905:r <- as.data.frame(r)
1442621398085:r$Gene.ID <- rownames(r)
1442621398948:z <- r
1442621400592:View(z)
1442621407516:z <- z[order(z$V1, decreasing = T),]
1442621408174:View(z)
1442621424795:z <- z[2:50,]
1442621428371:View(z)
1442621466397:View(merge(z, geneid2name, all=F))
1442621617267:from_cor <- (merge(z, geneid2name, all=F))
1442621656971:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442621656971:taxon.id = as.character(taxon.id)
1442621656972:At = A$annotation[[taxon.id]]
1442621656972:background = intersect(unique(unlist(At)), rownames(X))
1442621656972:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442621656973:#r = top.correlated(X, subset=background, k=k)
1442621656973:#   mclapply(r, function(c1) { # dla każdego transkryptu
1442621656973:#     c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442621656974:#     o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442621656974:#       c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442621656974:#       oo = NULL
1442621656974:#       if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442621656975:#         ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442621656975:#         if (ct[1,1] >= min.count) {
1442621656975:#           fet = fisher.test(ct)
1442621656976:#           #oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442621656976:#           #oo = as.numeric(fet$estimate)
1442621656976:#           oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442621656976:#         }
1442621656977:#       }
1442621656977:#       oo
1442621656977:#     })
1442621656977:#     unlist(o)
1442621656978:#   }, mc.cores=NCPU)
1442621656978:r
1442621656978:}
1442621703954:r <- predict.annotations.knn(Xp, GO, 9606)
1442621710094:library(parallel)
1442621710219:library(limma)
1442621710905:NCPU = detectCores()
1442621715817:r <- predict.annotations.knn(Xp, GO, 9606)
1442621784354:from_cor_background <- from_cor
1442621788392:rm(from_cor)
1442621796519:r <- r[2]
1442621801842:class(r)
1442621807426:class(r[1])
1442621809067:r
1442621814892:r[[1]]
1442621820416:r <-r[[1]]
1442621824717:class(r)
1442621834504:r <- as.data.frame(r)
1442621839709:View(r)
1442621896467:names(r) <- "Gene.ID"
1442621919002:from_r <- merge(r, geneid2name, all=F)
1442621921577:View(from_r)
1442621942022:View(from_cor_background)
1442622005734:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442622005734:taxon.id = as.character(taxon.id)
1442622005734:At = A$annotation[[taxon.id]]
1442622005735:background = intersect(unique(unlist(At)), rownames(X))
1442622005735:#r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442622005735:r = top.correlated(X, subset=background, k=k)
1442622005736:#   mclapply(r, function(c1) { # dla każdego transkryptu
1442622005736:#     c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442622005736:#     o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442622005736:#       c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442622005737:#       oo = NULL
1442622005737:#       if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442622005737:#         ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442622005737:#         if (ct[1,1] >= min.count) {
1442622005738:#           fet = fisher.test(ct)
1442622005738:#           #oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442622005738:#           #oo = as.numeric(fet$estimate)
1442622005739:#           oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442622005739:#         }
1442622005739:#       }
1442622005739:#       oo
1442622005740:#     })
1442622005740:#     unlist(o)
1442622005740:#   }, mc.cores=NCPU)
1442622005740:r
1442622005741:}
1442622021867:r <- predict.annotations.knn(Xp, GO, 9606)
1442622562240:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442622562241:#TODO check if tx_input in subset
1442622562241:tx_input_list <- as.character(tx_input_list)
1442622562241:if (!is.null(subset)) {
1442622562241:X = X[rownames(X) %in% subset,]
1442622562242:}
1442622562242:X <- t(apply(X,1,scale))
1442622562242:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442622562243:out <- mclapply(1:ncol(Xi),
1442622562243:function(i) {
1442622562243:new <- cor(X, Xi[,i])
1442622562243:names <- rownames(new)
1442622562244:oo <- as.vector(new)
1442622562244:names(oo) <- names
1442622562244:oo
1442622562244:},
1442622562245:mc.cores=NCPU )
1442622562245:names(out) <- colnames(Xi)
1442622562245:out
1442622562246:}
1442622576656:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442622576656:taxon.id = as.character(taxon.id)
1442622576657:At = A$annotation[[taxon.id]]
1442622576657:background = intersect(unique(unlist(At)), rownames(X))
1442622576657:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442622576657:#r = top.correlated(X, subset=background, k=k)
1442622576658:#   mclapply(r, function(c1) { # dla każdego transkryptu
1442622576658:#     c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442622576658:#     o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442622576659:#       c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442622576659:#       oo = NULL
1442622576659:#       if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442622576660:#         ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442622576660:#         if (ct[1,1] >= min.count) {
1442622576660:#           fet = fisher.test(ct)
1442622576660:#           #oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442622576661:#           #oo = as.numeric(fet$estimate)
1442622576661:#           oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442622576661:#         }
1442622576661:#       }
1442622576662:#       oo
1442622576662:#     })
1442622576662:#     unlist(o)
1442622576662:#   }, mc.cores=NCPU)
1442622576663:r
1442622576663:}
1442622597206:r <- predict.annotations.knn(Xp, GO, 9606)
1442622604343:library(parallel)
1442622604511:library(limma)
1442622605221:NCPU = detectCores()
1442622607279:r <- predict.annotations.knn(Xp, GO, 9606)
1442622660418:View(predict.annotations.knn)
1442622660713:View(predict.annotations.knn)
1442622666931:r <- predict.annotations.knn(Xp, GO, 9606)
1442622684725:preprocess = function(X) {
1442622684725:# remove genes & samples w/ zero variance
1442622684725:X = X[apply(X,1,var) > 0,]
1442622684725:X = X[,apply(X,2,var) > 0]
1442622684726:stopifnot(nrow(X) > 0)
1442622684726:stopifnot(ncol(X) > 0)
1442622684726:# quantile normalize
1442622684727:normalizeBetweenArrays(as.matrix(X))
1442622684727:}
1442622684727:##############
1442622684728:# Correlations
1442622684728:##############
1442622684728:# the slow version, for matrices containing NaN, could be used as a fallback
1442622684728:#top.correlated = function(X, k=50) {
1442622684729:#    k = min(k,nrow(X)-1)
1442622684729:#    Xt = t(X)
1442622684729:#    o = mclapply(colnames(Xt), function(ix) {
1442622684729:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1442622684730:#        r = r[!is.na(r)]
1442622684730:#        o = NULL
1442622684730:#        if (length(r) >= k) {
1442622684730:#            o = names(r)[order(r, decreasing=T)]
1442622684730:#        }
1442622684731:#        o
1442622684731:#    }, mc.cores=NCPU)
1442622684731:#    names(o) = colnames(Xt)
1442622684731:#    o
1442622684732:#}
1442622684732:top.correlated = function(X, subset=NULL, k=50) {
1442622684732:k = min(k, nrow(X) - 1)
1442622684733:X = as.matrix(X)
1442622684733:stopifnot(sum(is.na(X)) == 0)
1442622684733:Xs = t(apply(X,1,scale))
1442622684734:o = mclapply(1:nrow(Xs), function(i) {
1442622684734:if ((i > 0) && (i %% 100 == 0)) {
1442622684734:sprintf("Calculating correlations for row: %d", i)
1442622684734:}
1442622684735:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442622684735:oo = names(r)[order(r, decreasing=T)]
1442622684735:if (!is.null(subset)) {
1442622684736:oo = oo[oo %in% subset]
1442622684736:}
1442622684736:oo[1:min(k, length(oo))]
1442622684736:}, mc.cores=NCPU)
1442622684737:names(o) = rownames(Xs)
1442622684737:o
1442622684737:}
1442622684738:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442622684738:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442622684738:#TODO check if tx_input in subset
1442622684739:tx_input_list <- as.character(tx_input_list)
1442622684739:if (!is.null(subset)) {
1442622684739:X = X[rownames(X) %in% subset,]
1442622684739:}
1442622684740:X <- t(X)
1442622684740:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442622684740:out <- mclapply(1:ncol(Xi),
1442622684741:function(i) {
1442622684741:new <- cor(X, Xi[,i])
1442622684741:names <- rownames(new)
1442622684741:oo <- as.vector(new)
1442622684742:names(oo) <- names
1442622684742:oo
1442622684742:},
1442622684742:mc.cores=NCPU )
1442622684743:names(out) <- colnames(Xi)
1442622684743:out
1442622684743:}
1442622684744:get.most.correlated <- function(X, subset=NULL, tx_input_list, how.many=50) {
1442622684744:# X - output of correlation.selected()
1442622684745:out <- correlation.selected(X, subset, tx_input_list)
1442622684745:out <- mclapply(out,
1442622684745:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442622684745:mc.cores=NCPU
1442622684746:)
1442622684746:#out <- matrix(unlist(out), ncol=ncol(X))
1442622684746:#rownames(out) <- NULL
1442622684746:#names(out) <- tx_input_list
1442622684747:out
1442622684747:}
1442622705710:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442622705710:taxon.id = as.character(taxon.id)
1442622705710:At = A$annotation[[taxon.id]]
1442622705711:background = intersect(unique(unlist(At)), rownames(X))
1442622705711:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442622705711:#r = top.correlated(X, subset=background, k=k)
1442622705712:#   mclapply(r, function(c1) { # dla każdego transkryptu
1442622705712:#     c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442622705712:#     o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442622705713:#       c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442622705713:#       oo = NULL
1442622705713:#       if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442622705713:#         ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442622705714:#         if (ct[1,1] >= min.count) {
1442622705714:#           fet = fisher.test(ct)
1442622705714:#           #oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442622705714:#           #oo = as.numeric(fet$estimate)
1442622705715:#           oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442622705715:#         }
1442622705715:#       }
1442622705715:#       oo
1442622705716:#     })
1442622705716:#     unlist(o)
1442622705716:#   }, mc.cores=NCPU)
1442622705716:r
1442622705717:}
1442622705717:### Get Go terms associated with each tx
1442622705718:assign.terms <-function(predictions) {
1442622705718:}
1442622710249:r <- predict.annotations.knn(Xp, GO, 9606)
1442622720342:r <- r[2]
1442622724417:r <- r[[1]]
1442622789213:r <- correlation.selected(Xp, subset=background, c("55", "221150"))
1442622794552:r[2]
1442622799322:r <-r[2]
1442622811342:r <- [[1]]
1442622815542:r <- r[[1]]
1442622824068:r <- as.data.frame(r)
1442622827578:View(r)
1442622853183:r$Gene.ID <- rownames(r)
1442622881546:r <- r[order(r$r, decreasing = T),]
1442622912886:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", skip=1, header=F)
1442622918529:geneid2name <- gene_info[,c(2,3,9)]
1442622918530:names(geneid2name) <- c("Gene.ID", "name", "description")
1442622923645:res <- merger(r, geneid2name)
1442622931026:res <- merge(r, geneid2name, all=F)
1442622933217:View(res)
1442622995367:res <- res[order(res$r, decreasing = T), ]
1442623073667:names(res) <- c("Gene ID", "Correlation Pearson", "Gene name", "Gene description")
1442623077547:View(res)
1442623156442:write.table(res, file="correlated_with_SKA3.tsv", row.names = F, sep="\t")
1442623187581:read.table("correlated_with_SKA3.tsv")
1442623194026:View(read.table("correlated_with_SKA3.tsv"))
1442623292243:length(rownames(Xp) %in% background)
1442623309154:sum(rownames(Xp) %in% background)
1442679449770:cor_X <- cor(X)
1442679466136:cor_X <- cor(t(X))
1442680074335:rm(cor_X)
1442680088802:cor_Xp <- cor(t(Xp))
1442680405244:rownames(Xp)
1442680474305:r <- Xp[rownames(Xp == "221150"),]
1442680498943:dim(r)
1442680511602:r <- Xp[rownames(Xp) == "221150",]
1442680513446:r
1442680521207:r <- Xp[rownames(cor_Xp) == "221150",]
1442680522454:r
1442680537696:r <- cor_Xp[rownames(cor_Xp) == "221150",]
1442680538894:r
1442680548447:class(r)
1442680559031:r <- sort(r, decreasing = T)
1442680562951:head(r)
1442680793467:cor_X <_ cor(T(X))
1442680798090:cor_X <- cor(t(X))
1442682401292:plot(sort(colSums(Xp)))
1442682420819:plot(sort(colSums(Xp), decreasing = T))
1442682423891:dim(Xp)
1442682432619:plot(sort(colSums(Xp), decreasing = T), cex=.2)
1442682437443:plot(sort(colSums(Xp), decreasing = F), cex=.2)
1442682442467:plot(sort(colSums(Xp), decreasing = T), cex=.2)
1442682515811:plot(Xp[,1:2])
1442682552311:plot(colSums(Xp), cex=.2)
1442682564291:plot(colSums(X), cex=.2)
1442682581539:plot(sort(colSums(X), decreasing = T), cex=.2)
1442682704959:plot(sort(apply(X,2,var), decreasing = T), cex=.2)
1442682713408:plot(sort(apply(Xp,2,var), decreasing = T), cex=.2)
1442682862239:boxplot(Xp)
1442683224150:boxplot(Xp[,1])
1442696396606:install.packages("AUC")
1442696417695:library(AUC)
1442696949464:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1442696949467:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442696949467:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442696949467:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442696949467:dimnames(o) <- list(unique(txs), unique(terms))
1442696949468:if(output=="y") {
1442696949468:o <- mclapply(rownames(o), function(tx) {
1442696949468:hits <- unique(terms[txs == tx])
1442696949469:oo <- as.numeric(colnames(o) %in% hits)
1442696949469:}, mc.cores=NCPU)
1442696949469:} else if(output=="y_hat") { # if predictons !null
1442696949470:o <- mclapply(rownames(o), function(tx) {
1442696949470:hits <- names(predictions)[names(predictions)==tx]
1442696949470:oo <- as.numeric(colnames(o) %in% hits)
1442696949471:}, mc.cores=NCPU)
1442696949471:} else {
1442696949471:print('"output should be either "y" or "y_hat"')
1442696949472:}
1442696949472:o
1442696949472:}
1442696964066:y <- ylabels(y, GO, 9606)
1442696967665:y <- y.labels(y, GO, 9606)
1442697019238:y <- y.labels(y, NULL, GO, 9606)
1442697035384:y <- y.labels("y", NULL, GO, 9606)
1442697040534:library(parallel)
1442697040775:library(limma)
1442697079887:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1442697079887:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1442697079887:y <- as.character(y)
1442697079888:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442697079888:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442697079888:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442697079888:dimnames(o) <- list(unique(txs), unique(terms))
1442697079889:if(output=="y") {
1442697079889:o <- mclapply(rownames(o), function(tx) {
1442697079890:hits <- unique(terms[txs == tx])
1442697079890:oo <- as.numeric(colnames(o) %in% hits)
1442697079890:}, mc.cores=NCPU)
1442697079890:} else if(output=="y_hat") { # if predictons !null
1442697079891:o <- mclapply(rownames(o), function(tx) {
1442697079891:hits <- names(predictions)[names(predictions)==tx]
1442697079891:oo <- as.numeric(colnames(o) %in% hits)
1442697079892:}, mc.cores=NCPU)
1442697079892:} else {
1442697079892:print('"output should be either "y" or "y_hat"')
1442697079893:}
1442697079893:o
1442697079893:}
1442697089338:y <- y.labels(y, NULL, GO, 9606)
1442697111263:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1442697111264:output <- as.character(output)
1442697111264:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442697111264:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442697111264:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442697111265:dimnames(o) <- list(unique(txs), unique(terms))
1442697111265:if(output=="y") {
1442697111266:o <- mclapply(rownames(o), function(tx) {
1442697111266:hits <- unique(terms[txs == tx])
1442697111266:oo <- as.numeric(colnames(o) %in% hits)
1442697111266:}, mc.cores=NCPU)
1442697111267:} else if(output=="y_hat") { # if predictons !null
1442697111267:o <- mclapply(rownames(o), function(tx) {
1442697111267:hits <- names(predictions)[names(predictions)==tx]
1442697111268:oo <- as.numeric(colnames(o) %in% hits)
1442697111268:}, mc.cores=NCPU)
1442697111268:} else {
1442697111269:print('"output should be either "y" or "y_hat"')
1442697111269:}
1442697111269:o
1442697111270:}
1442697117139:y <- y.labels(y, NULL, GO, 9606)
1442697158564:y <- y.labels("y", NULL, GO, 9606)
1442697566957:library(parallel)
1442697567075:library(limma)
1442697567452:library(AUC)
1442697579931:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1442697579932:output <- as.character(output)
1442697579932:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442697579932:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442697579932:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442697579933:dimnames(o) <- list(unique(txs), unique(terms))
1442697579933:if(output=="y") {
1442697579934:o <- mclapply(rownames(o), function(tx) {
1442697579934:hits <- unique(terms[txs == tx])
1442697579934:oo <- as.numeric(colnames(o) %in% hits)
1442697579934:}, mc.cores=NCPU)
1442697579935:} else if(output=="y_hat") { # if predictons !null
1442697579935:o <- mclapply(rownames(o), function(tx) {
1442697579935:hits <- names(predictions)[names(predictions)==tx]
1442697579936:oo <- as.numeric(colnames(o) %in% hits)
1442697579936:}, mc.cores=NCPU)
1442697579936:} else {
1442697579937:print('"output should be either "y" or "y_hat"')
1442697579937:}
1442697579937:o
1442697579938:}
1442697637667:y_hat <- y.labels("y_hat", predictions)
1442697645169:y_hat
1442697664166:class(y_hat)
1442697892875:taxon.id = 9606
1442697901168:A=GO
1442697915670:names(predictions)
1442698402559:y[1]
1442698411563:y_hat[1]
1442698420420:y_hat[1][1]
1442698529078:z <- list(names(predictions))
1442698530184:z
1442698559871:mclapply(z, print, mc.cores=NCPU)
1442698593915:mclapply(z, function(zi) { zi }, mc.cores=NCPU)
1442698605843:mclapply(z, function(zi) { paste(zi, bla"" }, mc.cores=NCPU)
1442698611784:mclapply(z, function(zi) { paste(zi, "bla" }, mc.cores=NCPU)
1442698615843:mclapply(z, function(zi) { paste(zi, "bla") }, mc.cores=NCPU)
1442698834303:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1442698834303:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442698834303:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442698834304:if(!is.null(predictions)) {
1442698834304:subset <- unique(txs)
1442698834304:} else {
1442698834305:subset <- names(predictions)
1442698834305:}
1442698834305:#o <- matrix(c(0), nrow=length(subset), ncol=length(unique(terms)))
1442698834305:#dimnames(o) <- list(unique(txs), unique(terms))
1442698834306:if(output=="y") {
1442698834306:o <- mclapply(list(subset), function(tx) {
1442698834306:hits <- unique(terms[txs == tx])
1442698834307:oo <- as.numeric(unique(terms) %in% hits)
1442698834307:names(oo) <- as.character(unique(terms))
1442698834307:}, mc.cores=NCPU)
1442698834308:} else if(output=="y_hat") { # if predictons !null
1442698834308:o <- mclapply(rownames(o), function(tx) {
1442698834308:hits <- names(predictions)[names(predictions)==tx]
1442698834309:oo <- as.numeric(colnames(o) %in% hits)
1442698834309:}, mc.cores=NCPU)
1442698834309:} else {
1442698834310:print('"output should be either "y" or "y_hat"')
1442698834310:}
1442698834310:o
1442698834311:}
1442698843203:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442698843514:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442698844640:if(!is.null(predictions)) {
1442698844887:subset <- unique(txs)
1442698845132:} else {
1442698845167:subset <- names(predictions)
1442698845658:}
1442698864916:if(is.null(predictions)) {
1442698865160:subset <- unique(txs)
1442698865401:} else {
1442698865653:subset <- names(predictions)
1442698866564:}
1442698875350:o <- mclapply(list(subset), function(tx) {
1442698876361:hits <- unique(terms[txs == tx])
1442698876602:oo <- as.numeric(unique(terms) %in% hits)
1442698876903:names(oo) <- as.character(unique(terms))
1442698877518:}, mc.cores=NCPU)
1442698885633:summmary(o)
1442698888158:summary(o)
1442698894534:o[1]
1442698958060:o <- mclapply(subset, function(tx) {
1442698958266:hits <- unique(terms[txs == tx])
1442698958451:oo <- as.numeric(unique(terms) %in% hits)
1442698958629:names(oo) <- as.character(unique(terms))
1442698960385:}, mc.cores=NCPU)
1442698966021:o[1]
1442698978766:o <- mclapply(subset, function(tx) {
1442698978766:hits <- unique(terms[txs == tx])
1442698978766:oo <- as.numeric(unique(terms) %in% hits)
1442698978766:names(oo) <- as.character(unique(terms))
1442698978767:oo
1442698978767:}, mc.cores=NCPU)
1442698986587:head(o[1])
1442698997186:names(o0)
1442698998690:names(o)
1442699004783:names(o[1])
1442699029010:o <- mclapply(list(subset), function(tx) {
1442699029364:hits <- unique(terms[txs == tx])
1442699029364:oo <- as.numeric(unique(terms) %in% hits)
1442699029975:names(oo) <- as.character(unique(terms))
1442699029975:oo
1442699030503:}, mc.cores=NCPU)
1442699046517:o <- mclapply(subset, function(tx) {
1442699046755:hits <- unique(terms[txs == tx])
1442699047007:oo <- as.numeric(unique(terms) %in% hits)
1442699047007:names(oo) <- as.character(unique(terms))
1442699047506:oo
1442699048123:}, mc.cores=NCPU)
1442699077060:length(unique(terms))
1442699142490:tx <- subset[1]
1442699145846:tx <- subset[2]
1442699154843:hits <- unique(terms[txs == tx])
1442699164884:head(hits)
1442699181377:hits <- as.character(unique(terms[txs == tx]))
1442699185384:oo <- as.numeric(terms %in% hits)
1442699215293:oo <- as.numeric(unique(terms) %in% hits)
1442699222844:oo <- as.numeric(terms %in% hits)
1442699230984:oo <- as.numeric(unique(terms) %in% hits)
1442699238158:sum(oo)
1442699241515:head(oo)
1442699245838:names(oo) <- as.character(unique(terms))
1442699249359:head(oo)
1442699267921:o <- mclapply(subset, function(tx) {
1442699267921:hits <- as.character(unique(terms[txs == tx]))
1442699267921:oo <- as.numeric(unique(terms) %in% hits)
1442699267922:names(oo) <- as.character(unique(terms))
1442699267922:oo
1442699267922:}, mc.cores=NCPU)
1442699287566:sum(o[[2]])
1442699289619:sum(o[[1]])
1442699300419:o[[1]]
1442699308175:head(o[[1]])
1442699314058:head(o[[1]], 20)
1442699427313:subset <- names(predictions)
1442699434699:hits <- subset[subset==tx]
1442699445539:hits <- as.character(unique(terms[txs == tx]))
1442699477920:predictions[1]
1442699593283:names(tx)
1442699596808:tx
1442699617624:names(predictions$tx)
1442699622609:names(predictions$`tx`)
1442699654751:names(predictions[names(predictions)==tx])
1442699666084:names(predictions[[names(predictions)==tx]])
1442699865123:a1 <- o[[1]]
1442699869058:head(a1)
1442699881983:a2 <- predictions[[1]]
1442699883738:a2
1442699904533:sum(names(a2) %in% names(a1))
1442699973694:a <- merge(a1, a2)
1442700011917:View(a)
1442700023058:a1 <- a1[1]
1442700034009:a1 <- o[[1]]
1442850662851:install.packages(TCGA2STAT)
1442850668075:install.packages("TCGA2STAT")
1442850786895:install.packages("TCGA2STAT")
1442851091829:rm(get.most.correlated())
1442851094747:rm(get.most.correlated)
1442851270244:install.packages("/home/perza/Downloads/TCGA2STAT_1.0.tar.gz", repos=NULL, type="source")
1442851312045:install.packages("CNTools")
1442851336446:source("https://bioconductor.org/biocLite.R")
1442851357445:biocLite("TCGA2STAT")
1442851466720:biocLite("CNTools")
1442851576715:install.packages("XML")
1442851594552:install.packages("/home/perza/Downloads/TCGA2STAT_1.0.tar.gz", repos=NULL, type="source")
1442851606004:library(TCGA2STAT)
1442851612126:?"TCGA2STAT-package"
1442857164647:?getTCGA
1442858280736:library(SRAdb)
1442858283301:sql.file <- 'SRAmetadb.sqlite'
1442858283498:if(!file.exists('SRAmetadb.sqlite')) {
1442858283683:start.time <- proc.time()
1442858283844:sqlfile <<- getSRAdbFile()
1442858284008:proc.time()-start.time
1442858284283:}
1442858541284:library(SRAdb)
1442858543600:start.path <- getwd()
1442858544136:setwd("/mnt/DATAPART1/rnaseq")
1442858548374:setwd("/mnt/DATAPART1")
1442858556960:sql.file <- 'SRAmetadb.sqlite'
1442858563510:sra.con <- dbConnect(SQLite(), sql.file)
1442858571934:setwd(start.path)
1442858588996:?"SRAdb-package"
1442858641601:?getSRA
1442858691731:?"SRAdb-package"
1442858803109:dbListFields(sra.con)
1442858819995:dbListTables(sra.con)
1442858967470:?getSRA
1442858988895:selection <- ("SELECT sra.run_accession
1442858988896:FROM sra
1442858988896:WHERE
1442858988896:library_strategy="RNA-Seq"
1442858988896:AND library_source="TRANSCRIPTOMIC"
1442858988896:AND library_selection="RANDOM"
1442858988897:AND library_layout LIKE "PAIRED%"
1442858988897:AND taxon_id=9606;")
1442859022420:selection <- ("SELECT sra.run_accession FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606;")
1442859029495:selection <- "SELECT sra.run_accession FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606;"
1442859035852:selection <- 'SELECT sra.run_accession FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606;'
1442859039821:selection <- 'SELECT sra.run_accession FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442859098995:used <- getSRA(sra_con <- sra.con, selection)
1442859162620:used <- getSRA(selection, out_types=c("sra") sra_con=sra.con)
1442859170107:used <- getSRA(selection, out_types=c("sra"), sra_con=sra.con)
1442859320162:selection <- 'SELECT sra.run_accession(*) FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442859320582:used <- getSRA(selection, out_types=c("sra"), sra_con=sra.con)
1442859462011:used <- getSRA("SELECT sra.run.accession FROM sra WHERE library_strategy='RANDOM'", out_types=c("sra"), sra_con=sra.con)
1442859470051:used <- getSRA("SELECT sra.run.accession FROM sra WHERE, library_strategy='RANDOM'", out_types=c("sra"), sra_con=sra.con)
1442859476470:used <- getSRA("SELECT sra.run.accession FROM sra, WHERE library_strategy='RANDOM'", out_types=c("sra"), sra_con=sra.con)
1442859501683:used <- getSRA("SELECT sra.run.accession FROM sra WHERE library_strategy='RNA-Seq'", out_types=c("sra"), sra_con=sra.con)
1442859530848:used <- getSRA('SELECT sra.run.accession FROM sra WHERE library_strategy="RNA-Seq"', out_types=c("sra"), sra_con=sra.con)
1442859567970:used <- getSRA('SELECT sra.run.accession FROM sra WHERE library_strategy="RNA-Seq"', sra_con=sra.con)
1442860178638:selection <- 'SELECT * FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442860179074:used <- getSRA(selection, out_types=c("sra"), sra_con=sra.con)
1442860213496:names(used)
1442860282432:selection <- 'SELECT sra.run FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442860282882:used <- getSRA(selection, out_types=c("sra"), sra_con=sra.con)
1442860294963:selection <- 'SELECT*n FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442860298875:selection <- 'SELECT * FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442860299370:used <- getSRA(selection, out_types=c("sra"), sra_con=sra.con)
1442860313700:used$run
1442860331976:length(unique(used$run))
1442860823807:selection <- 'SELECT run FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442860824123:used <- getSRA(selection, out_types=c("sra"), sra_con=sra.con)
1442861136995:?"dbGetQuery"
1442861235243:selection <- 'SELECT sra.run_accession FROM sra WHERE library_strategy="RNA-Seq" AND library_source="TRANSCRIPTOMIC" AND library_selection="RANDOM" AND library_layout LIKE "PAIRED%" AND taxon_id=9606'
1442861235933:used <- getSRA(sra.con, selection)
1442861250186:used <- dbGetQuery(sra.con, selection)
1442861283628:View(used)
1442861301052:?getSRA
1442861552645:?TCGA
1442861561550:?TCGA-package
1442861573709:?TCGA2STAT
1442861577147:library(TCGA2STAT)
1442861581927:?"TCGA2STAT-package"
1442861888329:example.diseases <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN", "KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD", "TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442861948495:?getTCGA
1442862074723:getTCGA("GBM")
1442862132545:sa <-getTCGA("GBM", clinical=F)
1442862159345:View(sa)
1442862244561:View(X)
1442862291621:sa <-getTCGA("BLCA", clinical=F)
1442862353271:?rand
1442862358278:?rand.int
1442862360220:?randint
1442862363621:??randint
1442862368695:??rint
1442862440699:?runif
1442862499124:row(sa)
1442862522661:example.diseases <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN", "KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD", "TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442862530576:tcga <- getTCGA(dis, clinical=F)[runif(20, 0, nrow(tcga))]
1442862662776:example.diseases <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN", "KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD", "TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442862663219:all <- NULL
1442862663545:for(dis in example.diseases) {
1442862663773:tcga <- getTCGA(dis, clinical=F)[,runif(20, 0, nrow(tcga))]
1442862664014:all <- merge(all, tcga, by="row.names", all=T)
1442862664647:}
1442862754407:all <- NULL
1442862754649:for(dis in example.diseases) {
1442862754891:tcga <- getTCGA(dis, clinical=F)
1442862755131:all <- merge(all, tcga[,runif(20, 0, nrow(tcga))], by="row.names", all=T)
1442862755427:}
1442862823120:runif(20, 0, nrow(sa))
1442862916625:runif 20
1442862921823:runif(20)
1442862938927:?sample
1442863046078:ss <- runif(20, 1, ncol(tcga))
1442863156478:all <- NULL
1442863156773:for(dis in example.diseases) {
1442863157063:tcga <- getTCGA(dis, clinical=F)
1442863157309:all <- merge(all, tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20))], by="row.names", all=T)
1442863157547:}
1442863970494:tcga <- getTCGA(DLBC, clinical=F)
1442863976678:tcga <- getTCGA("DLBC", clinical=F)
1442864010774:tcga <- getTCGA("CHOL", clinical=F)
1442864062445:cbind(NULL, matrix(c(1), 2,2))
1442864106549:sum(row.names(sa) != row.names(tcga))
1442864173031:all <- NULL
1442864174574:for(dis in example.diseases) {
1442864174791:tcga <- getTCGA(dis, clinical=F)
1442864176607:set.seed(9)
1442864177022:all <- NULL
1442864177240:for(dis in example.diseases) {
1442864177459:tcga <- getTCGA(dis, clinical=F)
1442864177706:if(ncol(tcga)!=0 & !is.null(ncol(tcga))) {
1442864178098:all <- rbind(all, tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)])
1442864178400:}
1442864178833:}
1442864186830:)
1442864204007:all <- NULL
1442864204214:for(dis in example.diseases) {
1442864204434:tcga <- getTCGA(dis, clinical=F)
1442864204651:if(ncol(tcga)!=0 & !is.null(ncol(tcga))) {
1442864204879:all <- rbind(all, tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)])
1442864204880:}
1442864205251:}
1442864436199:all <- lapply(example.diseases, function(dis) {
1442864436414:tcga <- getTCGA(dis, clinical=F)
1442864436637:if(ncol(tcga)!=0 & !is.null(ncol(tcga))) {
1442864436843:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)])
1442864437196:} else {
1442864437197:o<-NULL
1442864437822:}
1442864437823:})
1442864448649:all <- lapply(example.diseases, function(dis) {
1442864448907:tcga <- getTCGA(dis, clinical=F)
1442864449231:if(ncol(tcga)!=0 & !is.null(ncol(tcga))) {
1442864449899:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)])
1442864450270:} else {
1442864457577:all <- lapply(example.diseases, function(dis) {
1442864457783:tcga <- getTCGA(dis, clinical=F)
1442864457997:if(ncol(tcga)!=0 & !is.null(ncol(tcga))) {
1442864458206:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)]
1442864458241:} else {
1442864458645:o<-NULL
1442864458986:}
1442864459251:})
1442864772101:all <- lapply(example.diseases, function(dis) {
1442864772318:tcga <- getTCGA(dis, clinical=F)
1442864772548:if(length(tcga)!=0 | !is.null(ncol(tcga))) {
1442864772763:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)]
1442864772985:} else {
1442864773202:o<-NULL
1442864773420:}
1442864773641:})
1442864997017:names(all) <- example.diseases
1442865050948:sample(1:12)
1442865092599:View(all)
1442865190700:example.diseases <- example.diseases[1:5]
1442865194700:all <- lapply(example.diseases, function(dis) {
1442865194910:tcga <- getTCGA(dis, clinical=F)
1442865195123:if(length(tcga)!=0 | !is.null(ncol(tcga))) {
1442865195341:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)]
1442865195342:} else {
1442865195707:o<-NULL
1442865195708:}
1442865196104:})
1442865370810:names(all) <- example.diseases
1442865380794:all[[1]]
1442865387595:names(all[[1]])
1442865502204:M <- as.matrix(all)
1442865509045:dim(M)
1442865513895:M
1442865582291:?dapply
1442865589103:library(plyr)
1442865590295:?dapply
1442865599795:?apply
1442865672319:?"plyr-package"
1442865736623:ldply
1442865770123:M <- ldply(all, function(x) {x})
1442865791296:M <- ldply(all, cbind)
1442865842200:M <- NULL
1442865842452:for(elt in all) {
1442865842800:M <_ cbind(M, as.matrix(elt))
1442865843096:}
1442865860445:?for
1442865919357:M <- cbind(M, as.matrix(elt))
1442865921603:M <- NULL
1442865921780:for(elt in all) {
1442865921965:M <- cbind(M, as.matrix(elt))
1442865922154:}
1442865944353:M <- NULL
1442865946600:for(elt in all) {
1442865947395:M <- cbind(M, as.matrix(elt))
1442865947578:}
1442865964507:names(all) <- example.diseases
1442865964678:M <- NULL
1442865965031:for(elt in all) {
1442865968350:M <- cbind(M, as.data.frame(elt))
1442865968527:}
1442865988395:M <- NULL
1442865988579:for(elt in all) {
1442865988760:M <- cbind(M, as.matrix(elt))
1442865989045:}
1442865993749:dim(M)
1442866009436:M <- as.data.frame(M)
1442866015145:names(M)
1442866025630:rownames(M)[1:10]
1442866154423:disease_list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442866154604:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442866154785:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442866155042:tcga.expression.matrix(disease.list, set.seed=T)
1442866195051:tcga.expression.matrix <- function(disease.list, set.seed=T) {
1442866195051:if(set.seed) { set.seed(9) }
1442866195052:all <- lapply(disease.list, function(dis) {
1442866195052:tcga <- getTCGA(dis, clinical=F)
1442866195053:if(length(tcga)!=0 | !is.null(ncol(tcga))) {
1442866195053:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), 20), replace=F)]
1442866195053:} else {
1442866195053:o<-NULL
1442866195054:}
1442866195054:})
1442866195054:names(all) <- disease.list
1442866195055:M <- NULL
1442866195055:for(elt in all) {
1442866195055:M <- cbind(M, as.matrix(elt))
1442866195056:}
1442866195056:M <- as.data.frame(M)
1442866195056:}
1442866227070:rm(M, ss, sa, elt, tcga)
1442866455820:M.tgca <- tcga.expression.matrix(disease_list[1:10])
1442866692209:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442866692210:if(set.seed) { set.seed(9) }
1442866692210:all <- lapply(disease.list, function(dis) {
1442866692210:tcga <- getTCGA(dis, clinical=F)
1442866692210:if(length(tcga)!=0 | !is.null(ncol(tcga))) {
1442866692211:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442866692211:} else {
1442866692211:o<-NULL
1442866692211:}
1442866692212:})
1442866692212:names(all) <- disease.list
1442866692212:M <- NULL
1442866692213:for(elt in all) {
1442866692213:M <- cbind(M, as.matrix(elt))
1442866692213:}
1442866692214:M <- as.data.frame(M)
1442866692214:}
1442866853874:M.tgca <- tcga.expression.matrix(disease_list[1:7])
1442867139245:2>=1
1442867172400:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442867172400:if(set.seed) { set.seed(9) }
1442867172400:all <- lapply(disease.list, function(dis) {
1442867172401:tcga <- getTCGA(dis, clinical=F)
1442867172401:if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442867172401:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442867172401:} else {
1442867172402:o<-NULL
1442867172402:}
1442867172402:})
1442867172403:names(all) <- disease.list
1442867172403:M <- NULL
1442867172403:for(elt in all) {
1442867172404:M <- cbind(M, as.matrix(elt))
1442867172404:}
1442867172404:M <- as.data.frame(M)
1442867172405:}
1442867181345:M.tgca <- tcga.expression.matrix(disease_list[1:10])
1442867643970:M.tgca <- tcga.expression.matrix(disease_list[5:7])
1442867745850:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442867745850:if(set.seed) { set.seed(9) }
1442867745850:all <- lapply(disease.list, function(dis) {
1442867745850:tcga <- getTCGA(dis, clinical=F)
1442867745851:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442867745851:tryCatch({
1442867745851:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442867745851:}
1442867745852:, error = function(e) {
1442867745852:o<-NULL
1442867745852:})
1442867745852:})
1442867745853:names(all) <- disease.list
1442867745853:M <- NULL
1442867745854:for(elt in all) {
1442867745854:M <- cbind(M, as.matrix(elt))
1442867745854:}
1442867745854:M <- as.data.frame(M)
1442867745855:}
1442867756595:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442867756595:if(set.seed) { set.seed(9) }
1442867756596:all <- lapply(disease.list, function(dis) {
1442867756596:tcga <- getTCGA(dis, clinical=F)
1442867756596:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442867756597:tryCatch({
1442867756597:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442867756597:}
1442867756597:, error = function(e) {
1442867756598:o<-NULL
1442867756598:})
1442867756598:})
1442867756598:names(all) <- disease.list
1442867756599:M <- NULL
1442867756599:for(elt in all) {
1442867756600:M <- cbind(M, as.matrix(elt))
1442867756600:}
1442867756600:M <- as.data.frame(M)
1442867756600:}
1442867763096:M.tgca <- tcga.expression.matrix(disease_list[1:7])
1442868155470:names(gene_info)
1442868165229:gene_info[0]
1442868169045:gene_info[1]
1442868199701:lapply(gene_info, function(x) {x[[1]]})
1442868226545:?read.delim
1442868250758:info.path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.rda")
1442868250943:if (!file.exists(info.path)) {
1442868251105:path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.gz")
1442868251282:if (!file.exists(path)) {
1442868251409:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/Homo_sapiens.gene_info.gz", path)
1442868251672:}
1442868252296:h = gzfile(path, open="r")
1442868264631:path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.gz")
1442868265799:if (!file.exists(path)) {
1442868266032:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/Homo_sapiens.gene_info.gz", path)
1442868266222:}
1442868267770:h = gzfile(path, open="r")
1442868268994:gene_info = read.delim(h, skip=1, header=F, comment.char="$") # pound sign is comment
1442868315236:gene_info = read.delim(h, skip=1, header=F, comment.char="£") # pound sign is comment
1442868319523:h = gzfile(path, open="r")
1442868319774:gene_info = read.delim(h, skip=1, header=F, comment.char="£") # pound sign is comment
1442868334722:h = gzfile(path, open="r")
1442868335632:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", skip=1, header=F)
1442868341820:header <- srtsplit(" ", readLines(h, n=1))[2:15]
1442868344554:h = gzfile(path, open="r")
1442868348696:header <- strsplit(" ", readLines(h, n=1))[2:15]
1442868372949:header <- strsplit(" ", readLines("cache/Homo_sapiens.gene_info.mod.gz", n=1))[2:15]
1442868380697:header <- strsplit(" ", readLines("cache/Homo_sapiens.gene_info.gz", n=1))[2:15]
1442868383202:header <- strsplit(" ", readLines("cache/Homo_sapiens.gene_info.gz", n=1))[2:15]
1442868390020:header
1442868411431:header <- strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " ")[2:15]
1442868420570:readLines("cache/Homo_sapiens.gene_info.gz", n=1)
1442868427595:strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " ")
1442868448695:?strsplit
1442868488238:header <- strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " ")[2:17]
1442868492820:header
1442868513214:header <- as.vector(strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " "))[2:17]
1442868513404:names(gene_info) <- header
1442868519245:header
1442868522296:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", skip=1, header=F)
1442868528403:as.vector(strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " "))[2:17]
1442868600488:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442868600488:if(set.seed) { set.seed(9) }
1442868600489:all <- lapply(disease.list, function(dis) {
1442868600489:tcga <- getTCGA(dis, clinical=F)
1442868600489:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442868600489:tryCatch({
1442868600490:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442868600490:}, error = function(e) {
1442868600490:o<-NULL
1442868600491:})
1442868600491:})
1442868600491:names(all) <- disease.list
1442868600492:M <- NULL
1442868600492:for(elt in all) {
1442868600492:M <- cbind(M, as.matrix(elt))
1442868600493:}
1442868600493:M <- as.data.frame(M)
1442868600493:}
1442868641526:M.tgca <- tcga.expression.matrix(disease_list[1:5], 50)
1442868857102:close(h)
1442868859198:close(h)
1442868913253:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", comment.char="£", skip=1, header=F)
1442868925795:?read.csv
1442869080977:header <- unlist(strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " "))[2:17]
1442869097720:summary(gene_info)
1442869148546:head(as.data.frame(gene_info))
1442869154719:View(as.data.frame(gene_info))
1442869206709:h = gzfile(path, open="r")
1442869207210:gene_info = read.delim(h, skip=1, header=F, comment.char="£") # pound sign is comment
1442869295967:View(as.data.frame(gene_info)[grepl("£"),])
1442869307120:View(as.data.frame(gene_info)[grepl(gene_info, "£"),])
1442869339720:View(as.data.frame(gene_info)[grepl("£", gene_info),])
1442869585378:gene_info = read.csv("cache/Homo_sapiens.gene_info.mod.csv", quote="", skip=1, header=F)
1442869960892:gene_info = read.delim(h, skip=1, header=F, comment.char="£") # pound sign is comment
1442869964573:h = gzfile(path, open="r")
1442869965075:gene_info = read.delim(h, skip=1, header=F, comment.char="£") # pound sign is comment
1442869976256:gene_info = read.delim(h, skip=1, header=F) # pound sign is comment
1442869999374:View(as.data.frame(gene_info))
1442870032030:length(header)
1442870037744:header[16]
1442870044378:header <- unlist(strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " "))[2:16]
1442870050124:names(gene_info) <- header
1442870175849:gene_info$dbXrefs
1442870268454:M.t <- as.data.frame(M.tgca)
1442870290030:M.tcga <- M.t
1442870296879:rm(M.t, M.tgca)
1442870314200:rownames(M.tcga)
1442870322853:View(M.tcga)
1442870420654:rownames(M.tcga)[rownames(M.tcga) =="SKA3"]
1442870457795:cor(t(M.tcga))
1442870599312:###############
1442870602548:preprocess = function(X) {
1442870602549:# remove genes & samples w/ zero variance
1442870602549:X = X[apply(X,1,var) > 0,]
1442870602549:X = X[,apply(X,2,var) > 0]
1442870602549:stopifnot(nrow(X) > 0)
1442870602550:stopifnot(ncol(X) > 0)
1442870602550:# quantile normalize
1442870602550:normalizeBetweenArrays(as.matrix(X))
1442870602551:}
1442870610672:top.correlated = function(X, subset=NULL, k=50) {
1442870610672:k = min(k, nrow(X) - 1)
1442870610672:X = as.matrix(X)
1442870610673:stopifnot(sum(is.na(X)) == 0)
1442870610673:Xs = t(apply(X,1,scale))
1442870610673:o = mclapply(1:nrow(Xs), function(i) {
1442870610674:if ((i > 0) && (i %% 100 == 0)) {
1442870610674:sprintf("Calculating correlations for row: %d", i)
1442870610674:}
1442870610674:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442870610675:oo = names(r)[order(r, decreasing=T)]
1442870610675:if (!is.null(subset)) {
1442870610675:oo = oo[oo %in% subset]
1442870610676:}
1442870610676:oo[1:min(k, length(oo))]
1442870610676:}, mc.cores=NCPU)
1442870610677:names(o) = rownames(Xs)
1442870610677:o
1442870610677:}
1442870610678:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442870610678:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442870610678:#TODO check if tx_input in subset
1442870610679:tx_input_list <- as.character(tx_input_list)
1442870610679:if (!is.null(subset)) {
1442870610679:X = X[rownames(X) %in% subset,]
1442870610679:}
1442870610680:X <- t(X)
1442870610680:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442870610680:out <- mclapply(1:ncol(Xi),
1442870610681:function(i) {
1442870610681:new <- cor(X, Xi[,i])
1442870610681:names <- rownames(new)
1442870610681:oo <- as.vector(new)
1442870610682:names(oo) <- names
1442870610682:oo
1442870610682:},
1442870610683:mc.cores=NCPU )
1442870610683:names(out) <- colnames(Xi)
1442870610683:out
1442870610684:}
1442870610684:most.correlated <- function(X, subset=NULL, tx_input_list, how.many=50) {
1442870610685:# X - output of correlation.selected()
1442870610685:out <- correlation.selected(X, subset, tx_input_list)
1442870610685:out <- mclapply(out,
1442870610686:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442870610686:mc.cores=NCPU
1442870610686:)
1442870610686:#out <- matrix(unlist(out), ncol=ncol(X))
1442870610687:#rownames(out) <- NULL
1442870610687:#names(out) <- tx_input_list
1442870610687:out
1442870610687:}
1442870629424:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442870629425:taxon.id = as.character(taxon.id)
1442870629425:At = A$annotation[[taxon.id]]
1442870629425:background = intersect(unique(unlist(At)), rownames(X))
1442870629425:r = most.correlated(X, subset=background, tx_input_list, how.many=50)
1442870629426:#r = top.correlated(X, subset=background, k=k)
1442870629426:#   mclapply(r, function(c1) { # dla każdego transkryptu
1442870629426:#     c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442870629427:#     o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442870629427:#       c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442870629427:#       oo = NULL
1442870629427:#       if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442870629428:#         ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442870629428:#         if (ct[1,1] >= min.count) {
1442870629428:#           fet = fisher.test(ct)
1442870629429:#           #oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442870629429:#           #oo = as.numeric(fet$estimate)
1442870629429:#           oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442870629429:#         }
1442870629430:#       }
1442870629430:#       oo
1442870629430:#     })
1442870629431:#     unlist(o)
1442870629431:#   }, mc.cores=NCPU)
1442870629431:r
1442870629431:}
1442870640537:library(parallel)
1442870640762:library(limma)
1442870643250:NCPU = detectCores()
1442870645834:CACHE.DIR = "cache"
1442870646123:if (!dir.exists(CACHE.DIR)) {
1442870646364:dir.create(CACHE.DIR)
1442870647021:}
1442870661795:dim(X)
1442870664294:dim(M)
1442870668395:dim(M.tcga)
1442870684029:Mp <- preprocess(M.tcga)
1442870707494:cor_Mp <- cor(t(Mp))
1442871216558:most.correlated.gene.names <- function(Xp, geneid2name) { #make versatile so that can get any: names, desc, ...
1442871217897:r <- cor(t(Xp), Xp[rownames(Xp)=="221150",])
1442871218137:r <- as.data.frame(r)
1442871218379:r$Gene.ID <- rownames(r)
1442871218380:r <- r[order(r$r, decreasing = T),]
1442871218952:}
1442871260445:cor_Mp[rownames(cor_Mp=="SKA3",)]
1442872132162:most.correlated.gene.names <- function(cor.Xp, subset, from="id", geneid2name) { #make versatile so that can get any: names, desc, ...
1442872132162:# map first column OR use col names
1442872132162:# from: "id", "name"
1442872132163:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442872132163:r <- as.data.frame(r)
1442872132163:if(from=="id") {
1442872132163:r$Gene.ID <- rownames(r)
1442872132163:} else if (from=="name") {
1442872132164:} else {
1442872132164:}
1442872132165:r <- r[order(r$r, decreasing = T),]
1442872132165:z <- z[2:50,]
1442872132165:z <- (merge(z, geneid2name, all=F))
1442872132166:}
1442872298763:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442872298764:if(set.seed) { set.seed(9) }
1442872298764:all <- lapply(disease.list, function(dis) {
1442872298764:tcga <- getTCGA(dis, clinical=F)
1442872298765:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442872298765:tryCatch({
1442872298765:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442872298765:}, error = function(e) {
1442872298766:o<-NULL
1442872298766:})
1442872298766:})
1442872298766:names(all) <- disease.list
1442872298767:M <- NULL
1442872298767:for(elt in all) {
1442872298767:M <- cbind(M, as.matrix(elt))
1442872298768:}
1442872298768:M <- as.data.frame(M)
1442872298768:}
1442872326005:library(TCGA2STAT)
1442872326027:disease_list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442872326027:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442872326027:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442872326028:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442872326028:if(set.seed) { set.seed(9) }
1442872326028:all <- lapply(disease.list, function(dis) {
1442872326029:tcga <- getTCGA(dis, clinical=F)
1442872326029:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442872326029:tryCatch({
1442872326029:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442872326030:}, error = function(e) {
1442872326030:o<-NULL
1442872326030:})
1442872326030:})
1442872326031:names(all) <- disease.list
1442872326031:M <- NULL
1442872326031:for(elt in all) {
1442872326032:M <- cbind(M, as.matrix(elt))
1442872326032:}
1442872326032:M <- as.data.frame(M)
1442872326032:}
1442872328471:M <- tcga.expression.matrix(disease_list[1:5], 50)
1442872533437:rownames(M)
1442872544026:geneid2name$name
1442872583881:names(as.data.frame(rownames(M)))
1442872636650:?merge
1442872715680:x <-merge(rownames(M), geneid2name, by=("rownames(M)", "name"))
1442872728246:x <-merge(rownames(M), geneid2name, by=c("rownames(M)", "name"))
1442872748211:x <-merge(rownames(M), geneid2name, by=c(`rownames(M)`, name))
1442872780193:rownames(M)
1442872807558:x <-merge(rownames(M), geneid2name, by=c(rownames(M)$`rownames(M)`, geneid2name$name))
1442872858546:geneid2name[rownames(M)]
1442872922662:x <- as.data.frame(rownames(M))
1442872923132:names(x) <- "name"
1442872923934:x <-merge(x, geneid2name)
1442872927871:View(x)
1442872980967:x <-merge(x, geneid2name, all.x=T)
1442872992437:x <- as.data.frame(rownames(M))
1442872992681:names(x) <- "name"
1442872992988:x <-merge(x, geneid2name, all.x=T)
1442873043417:sum(x$Gene.ID!=rownames(M))
1442873066863:sum(x$name!=rownames(M))
1442873144489:class(rownames(M))
1442873152530:class(x$name)
1442873170091:sum(as.character(x$name)!=rownames(M))
1442873199446:View(x)
1442873226335:x <- as.data.frame(rownames(M))
1442873226601:names(x) <- "name"
1442873227517:x <-merge(x, geneid2name, all.x=T, all.y=F)
1442873244306:length(unique(x$name))
1442873265392:length(unique(x$Gene.ID))
1442873287606:View(x)
1442873464692:x <- as.data.frame(rownames(M))
1442873464932:names(x) <- "name"
1442873465235:x <-merge(x, geneid2name)
1442873465499:rownames(M) <- x[which(x$name==),1]
1442873489260:length(unique(x$name))
1442873595695:Mp <- preprocess(M)
1442873619645:preprocess = function(X) {
1442873619645:require(limma)
1442873619645:# remove genes & samples w/ zero variance
1442873619645:X = X[apply(X,1,var) > 0,]
1442873619646:X = X[,apply(X,2,var) > 0]
1442873619646:stopifnot(nrow(X) > 0)
1442873619646:stopifnot(ncol(X) > 0)
1442873619646:# quantile normalize
1442873619647:normalizeBetweenArrays(as.matrix(X))
1442873619647:}
1442873623145:Mp <- preprocess(M)
1442873671014:library(parallel)
1442873760453:r<- cor(t(Mp), Mp[rownames(Mp) == "SKA3",])
1442873765870:r
1442873780962:r <- as.data.frame(r)
1442873782779:r <- r[order(r$r, decreasing = T),]
1442873793301:r<- cor(t(Mp), Mp[rownames(Mp) == "SKA3",])
1442873795620:r <- r[order(r$r, decreasing = T),]
1442873809620:r <- as.data.frame(r)
1442873811870:View(r)
1442873820445:r <- r[order(r[1], decreasing = T),]
1442873833195:r <- r[order(r$r, decreasing = T),]
1442873836397:r<- cor(t(Mp), Mp[rownames(Mp) == "SKA3",])
1442873840701:r <- as.data.frame(r)
1442873850177:r <- r[order(r$V1, decreasing = T),]
1442873858595:r<- cor(t(Mp), Mp[rownames(Mp) == "SKA3",])
1442873897744:r <- as.data.frame(r)
1442873962444:r$from <- rownames(r)
1442873970745:r <- r[order(r$V1, decreasing = T),]
1442874001545:z <- (merge(z, geneid2name, all=F, by.x=from))
1442874039949:z <- (merge(r, geneid2name, all=F, by.x=r$from))
1442874058473:z <- (merge(r, geneid2name, all=F, by.x=from, by.y=name))
1442874066674:z <- (merge(r, geneid2name, all=F, by.x="from", by.y="name"))
1442874069470:View(z)
1442874113753:z <- (merge(r, geneid2name, all=F, by.x="from", by.y="name", sort=F))
1442874115520:View(z)
1442874284848:write.table(z[1:100,], "correlated_with_SKA3_from_TCGA.tsv")
1442874291220:write.table(z[1:100,], "correlated_with_SKA3_from_TCGA.tsv", row.names = F)
1442874317272:View(read.table("correlated_with_SKA3_from_TCGA.tsv"))
1442874412623:names(z)[1,2] <- c("Gene.Name", "correlation")
1442874423435:names(z)[1:2] <- c("Gene.Name", "correlation")
1442874438051:z <- z[c(1,3,2,4),]
1442874445246:z <- (merge(r, geneid2name, all=F, by.x="from", by.y="name", sort=F))
1442874445883:names(z)[1:2] <- c("Gene.Name", "correlation")
1442874456227:z <- z[,c(1,3,2,4)]
1442874470256:write.table(z[1:100,], "correlated_with_SKA3_from_TCGA.tsv", row.names = F)
1442874476995:View(read.table("correlated_with_SKA3_from_TCGA.tsv"))
1442875736545:length(unique(geneid2name$name))
1442875749345:length(unique(geneid2name$G))
1442875755820:length(unique(geneid2name$Gene.ID))
1442875858359:h = gzfile(path, open="r")
1442875858553:gene_info = read.delim(h, skip=1, header=F)
1442875862225:names(gene_info) <- unlist(strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " "))[2:16]
1442875900552:taxon.id = 9606
1442875903850:geneid2name <- gene_info[gene_info$tax_id==taxon.id ,c(2,3,9)]
1442875904825:names(geneid2name) <- c("Gene.ID", "name", "description")
1442875907320:View(geneid2name)
1442877227299:View(geneid2name)
1442877301399:names(geneid2name) <- c("Gene.ID", "Gene.name", "description")
1442877498534:id.or.name <- function(names, geneid2name) {
1442877498648:if(sum(names %in% geneid2name$Gene.ID) > sum(names %in% geneid2name$Gene.name)) {
1442877498824:o="id"
1442877499001:} else {
1442877499153:o="name"
1442877499304:}
1442877499603:}
1442877528945:id.or.name(rownames(X))
1442877546545:id.or.name(rownames(X), geneid2name)
1442877559770:id.or.name <- function(names, geneid2name) {
1442877559770:if(sum(names %in% geneid2name$Gene.ID) > sum(names %in% geneid2name$Gene.name)) {
1442877559771:o="id"
1442877559771:} else {
1442877559771:o="name"
1442877559772:}
1442877559772:return(o)
1442877559772:}
1442877561974:id.or.name(rownames(X), geneid2name)
1442877919003:id.or.name(rownames(Mp), geneid2name)
1442878207105:id.or.name <- function(names, geneid2name) {
1442878207105:if(sum(names %in% geneid2name$Gene.ID) > sum(names %in% geneid2name$Gene.name)) {
1442878207105:o="id"
1442878207105:} else {
1442878207105:o="name"
1442878207106:}
1442878207106:o
1442878207106:}
1442878210022:id.or.name(rownames(Mp), geneid2name)
1442879243003:head(geneid2name)
1442879260469:apply(geneid2name, 2, unique)
1442879282501:apply(geneid2name, 2, function(x) {length(unique(x)} )
1442879287701:apply(geneid2name, 2, function(x) { length(unique(x) } )
1442879292296:apply(geneid2name, 2, function(x) { length(unique(x)) } )
1442879851030:?intersect
1442880444640:new_entries <- apply(rownames(X), function(e) { geneid2name$Gene.ID[geneid2name$Gene.name==e,] } )
1442880454848:apply()?apply
1442880459120:?apply
1442880475877:new_entries <- lapply(rownames(X), function(e) { geneid2name$Gene.ID[geneid2name$Gene.name==e,] } )
1442880493776:new_entries <- lapply(rownames(X), function(e) { geneid2name$Gene.ID[geneid2name$Gene.name==e] } )
1442880551408:new_entries <- lapply(rownames(X), function(e) { o <- geneid2name$Gene.ID[geneid2name$Gene.name==e] } )
1442880578145:e<-rownames(X)[2]
1442880581101:new_entries <- lapply(rownames(X), function(e) { o <- geneid2name$Gene.ID[geneid2name$Gene.name==e] } )
1442880593997:rm(e)
1442880604146:new_entries <- apply(rownames(X),1, function(e) { o <- geneid2name$Gene.ID[geneid2name$Gene.name==e] } )
1442880703889:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X)]
1442880728301:name.to.id <- function(X, geneid2name, to="id") {
1442880728301:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X)]
1442880728302:}
1442880740677:name.to.id(M)
1442880746445:name.to.id(M, geneid2name = )
1442880748419:name.to.id(M, geneid2name )
1442880767326:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(M)]
1442880793025:new_entries <- geneid2name[geneid2name$Gene.name %in% rownames(X),]
1442881565358:name.to.id <- function(X, geneid2name, to="id") {
1442881565358:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X),]
1442881565359:o <- lapply(new_entries, function(e) {oo <- X[rownames(X) %in% e,]} )
1442881565359:#o <- as.data.frame(o)
1442881565359:}
1442881579047:M.sra <- name.to.id()
1442881585653:M.sra <- name.to.id(M, geneid2name)
1442881595321:name.to.id <- function(X, geneid2name, to="id") {
1442881595321:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X)]
1442881595321:o <- lapply(new_entries, function(e) {oo <- X[rownames(X) %in% e,]} )
1442881595322:#o <- as.data.frame(o)
1442881595322:}
1442881597220:M.sra <- name.to.id(M, geneid2name)
1442881701068:name.to.id <- function(X, geneid2name, to="id") {
1442881701069:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X)]
1442881701069:o <- sapply(new_entries, function(e) {oo <- X[rownames(X) %in% e,]} )
1442881701069:#o <- as.data.frame(o)
1442881701070:}
1442881731802:name.to.id <- function(X, geneid2name, to="id") {
1442881731803:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X)]
1442881731803:o <- mclapplyapply(new_entries, function(e) {oo <- X[rownames(X) %in% e,]}, n.cores=NCPU)
1442881731803:#o <- as.data.frame(o)
1442881731803:}
1442881734701:M.sra <- name.to.id(M, geneid2name)
1442881741045:M.sra <- name.to.id(M, geneid2name)
1442881748308:name.to.id <- function(X, geneid2name, to="id") {
1442881748308:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X)]
1442881748308:o <- mclapply(new_entries, function(e) {oo <- X[rownames(X) %in% e,]}, n.cores=NCPU)
1442881748308:#o <- as.data.frame(o)
1442881748309:}
1442881750646:M.sra <- name.to.id(M, geneid2name)
1442881826486:name.to.id <- function(X, geneid2name, to="id") {
1442881826487:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(X)]
1442881826487:o <- mclapply(new_entries, function(e) { oo <- X[e %in% rownames(X),] }, n.cores=NCPU)
1442881826487:#o <- as.data.frame(o)
1442881826487:}
1442881829595:M.sra <- name.to.id(M, geneid2name)
1442881867334:new_entries <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(M)]
1442881882832:new_entries <- as.character(geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(M)])
1442881885304:o <- mclapply(new_entries, function(e) { oo <- M[e %in% rownames(M),] }, n.cores=NCPU)
1442881895649:oo <- M[e %in% rownames(M),]
1442881905070:e <- new_entries[1]
1442881907595:oo <- M[e %in% rownames(M),]
1442881922996:View(oo)
1442881931020:e <- new_entries[3]
1442881932621:oo <- M[e %in% rownames(M),]
1442882021249:new_entries <- as.character(geneid2name[geneid2name$Gene.name %in% rownames(M)])
1442882025887:new_entries <- as.character(geneid2name[geneid2name$Gene.name %in% rownames(M),])
1442882044076:new_entries
1442882065901:geneid2name$Gene.name %in% rownames(M)
1442882080781:new_entries <- as.character(geneid2name[geneid2name$Gene.name %in% rownames(M),])
1442882092305:new_entries <- geneid2name[geneid2name$Gene.name %in% rownames(M),]
1442882195832:new_entries <- geneid2name[geneid2name$Gene.name %in% rownames(M),]
1442882198050:o <- mclapply(new_entries$Gene.name, function(e) { oo <- M[e %in% rownames(M),] }, n.cores=NCPU)
1442882217328:o <- mclapply(new_entries$Gene.name, function(e) { oo <- M[e %in% rownames(M),] }, mc.cores=NCPU)
1442882498319:M <- M[1:200]
1442882510864:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442882510864:if(set.seed) { set.seed(9) }
1442882510864:all <- lapply(disease.list, function(dis) {
1442882510864:tcga <- getTCGA(dis, clinical=F)
1442882510865:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442882510865:tryCatch({
1442882510865:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442882510865:}, error = function(e) {
1442882510866:o<-NULL
1442882510866:})
1442882510866:})
1442882510866:names(all) <- disease.list
1442882510867:M <- NULL
1442882510867:for(elt in all) {
1442882510867:M <- cbind(M, as.matrix(elt))
1442882510868:}
1442882510868:M <- as.data.frame(M)
1442882510868:}
1442882523933:library(TCGA2STAT)
1442882524065:disease_list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442882524231:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442882524370:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442882541670:M <- tcga.expression.matrix(disease_list[1:5], 50)
1442882948755:preprocess = function(X) {
1442882948755:require(limma)
1442882948756:# remove genes & samples w/ zero variance
1442882948756:X = X[apply(X,1,var) > 0,]
1442882948756:X = X[,apply(X,2,var) > 0]
1442882948756:stopifnot(nrow(X) > 0)
1442882948756:stopifnot(ncol(X) > 0)
1442882948757:# quantile normalize
1442882948757:normalizeBetweenArrays(as.matrix(X))
1442882948757:}
1442882948758:##############
1442882948758:# Correlations
1442882948758:##############
1442882948759:# the slow version, for matrices containing NaN, could be used as a fallback
1442882948759:#top.correlated = function(X, k=50) {
1442882948759:#    k = min(k,nrow(X)-1)
1442882948759:#    Xt = t(X)
1442882948759:#    o = mclapply(colnames(Xt), function(ix) {
1442882948760:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1442882948760:#        r = r[!is.na(r)]
1442882948760:#        o = NULL
1442882948760:#        if (length(r) >= k) {
1442882948760:#            o = names(r)[order(r, decreasing=T)]
1442882948760:#        }
1442882948761:#        o
1442882948761:#    }, mc.cores=NCPU)
1442882948761:#    names(o) = colnames(Xt)
1442882948761:#    o
1442882948761:#}
1442882948762:top.correlated = function(X, subset=NULL, k=50) {
1442882948762:require(parallel)
1442882948762:k = min(k, nrow(X) - 1)
1442882948762:X = as.matrix(X)
1442882948763:stopifnot(sum(is.na(X)) == 0)
1442882948763:Xs = t(apply(X,1,scale))
1442882948763:o = mclapply(1:nrow(Xs), function(i) {
1442882948763:if ((i > 0) && (i %% 100 == 0)) {
1442882948764:sprintf("Calculating correlations for row: %d", i)
1442882948764:}
1442882948764:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442882948764:oo = names(r)[order(r, decreasing=T)]
1442882948765:if (!is.null(subset)) {
1442882948765:oo = oo[oo %in% subset]
1442882948765:}
1442882948766:oo[1:min(k, length(oo))]
1442882948766:}, mc.cores=NCPU)
1442882948766:names(o) = rownames(Xs)
1442882948766:o
1442882948767:}
1442882948767:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442882948768:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442882948768:require(parallel)
1442882948768:#TODO check if tx_input in subset
1442882948768:tx_input_list <- as.character(tx_input_list)
1442882948768:if (!is.null(subset)) {
1442882948769:X = X[rownames(X) %in% subset,]
1442882948769:}
1442882948769:X <- t(X)
1442882948769:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442882948770:out <- mclapply(1:ncol(Xi),
1442882948770:function(i) {
1442882948770:new <- cor(X, Xi[,i])
1442882948770:names <- rownames(new)
1442882948771:oo <- as.vector(new)
1442882948771:names(oo) <- names
1442882948771:oo
1442882948771:},
1442882948772:mc.cores=NCPU )
1442882948772:names(out) <- colnames(Xi)
1442882948772:out
1442882948772:}
1442882948773:most.correlated <- function(X, subset=NULL, tx_input_list, how.many=50) {
1442882948773:# X - output of correlation.selected()
1442882948774:out <- correlation.selected(X, subset, tx_input_list)
1442882948774:out <- mclapply(out,
1442882948774:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442882948774:mc.cores=NCPU
1442882948775:)
1442882948775:#out <- matrix(unlist(out), ncol=ncol(X))
1442882948775:#rownames(out) <- NULL
1442882948775:#names(out) <- tx_input_list
1442882948776:out
1442882948776:}
1442882959595:h = gzfile(path, open="r")
1442882959803:gene_info = read.delim(h, skip=1, header=F)
1442882963474:names(gene_info) <- unlist(strsplit(readLines("cache/Homo_sapiens.gene_info.gz", n=1), " "))[2:16]
1442882964899:taxon.id = 9606
1442882965068:geneid2name <- gene_info[gene_info$tax_id==taxon.id, c(2,3,9)]
1442882965221:names(geneid2name) <- c("Gene.ID", "Gene.name", "description")
1442882968864:close(h)
1442882975745:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442882975745:taxon.id = as.character(taxon.id)
1442882975745:At = A$annotation[[taxon.id]]
1442882975746:background = intersect(unique(unlist(At)), rownames(X))
1442882975746:r = most.correlated(X, subset=background, tx_input_list, how.many=50)
1442882975746:#r = top.correlated(X, subset=background, k=k)
1442882975747:#   mclapply(r, function(c1) { # dla każdego transkryptu
1442882975747:#     c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442882975747:#     o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442882975748:#       c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442882975748:#       oo = NULL
1442882975748:#       if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442882975748:#         ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442882975749:#         if (ct[1,1] >= min.count) {
1442882975749:#           fet = fisher.test(ct)
1442882975749:#           #oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442882975749:#           #oo = as.numeric(fet$estimate)
1442882975750:#           oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442882975750:#         }
1442882975750:#       }
1442882975750:#       oo
1442882975751:#     })
1442882975751:#     unlist(o)
1442882975751:#   }, mc.cores=NCPU)
1442882975751:r
1442882975752:}
1442882979521:library(parallel)
1442882979681:library(limma)
1442882979912:library(AUC)
1442882980616:NCPU = detectCores()
1442882985649:CACHE.DIR = "cache"
1442882985801:if (!dir.exists(CACHE.DIR)) {
1442882985937:dir.create(CACHE.DIR)
1442882986208:}
1442882995075:save.image("/mnt/DATAPART1/rnaseq/.RData")
1442883023569:M <- M[1:100,]
1442883035735:new_entries <- geneid2name[geneid2name$Gene.name %in% rownames(M),]
1442883041998:e <- new_entries[3]
1442883044429:o <- mclapply(new_entries$Gene.name, function(e) { oo <- M[(e %in% rownames(M)),] }, mc.cores=NCPU)
1442883069970:names(o) <- new_entries
1442883084621:names(o) <- new_entries$Gene.ID
1442883105232:new_entries$Gene.ID
1442883149794:o <- mclapply(new_entries$Gene.name, function(e) { oo <- M[(e %in% rownames(M)),] }, mc.cores=NCPU)
1442883156196:o <- o[[1]]
1442883159948:class(o)
1442883166748:View(o)
1442883173425:rownames(o) <- new_entries$Gene.ID
1442883196173:new_entries <- geneid2name[geneid2name$Gene.name %in% rownames(M),]
1442883196777:o <- mclapply(new_entries$Gene.name, function(e) { oo <- M[(e %in% rownames(M)),] }, mc.cores=NCPU)
1442883198127:o <- o[[1]]
1442883200583:rownames(o) <- new_entries$Gene.ID
1442932508720:?mclapply()
1442932870995:new <- geneid2name$Gene.ID[geneid2name$Gene.name %in% rownames(M),]
1442932927805:new <- geneid2name$Gene.ID[(geneid2name$Gene.name %in% rownames(M)),]
1442932942603:length(geneid2name$Gene.ID)
1442932945020:length(geneid2name$Gene.name)
1442932966184:length(geneid2name$Gene.name %in% rownames(M))
1442932977500:new <- geneid2name$Gene.ID[,(geneid2name$Gene.name %in% rownames(M))]
1442932990945:(geneid2name$Gene.name %in% rownames(M))
1442933008753:new <- geneid2name[(geneid2name$Gene.name %in% rownames(M)),]
1442933013495:o <- mclapply(new$Gene.name, function(e) {
1442933013751:oo <- M[(rownames(M) == e), ]
1442933013975:oo[1]
1442933014271:}, mc.cores = NCPU)
1442933028470:new$Gene.ID
1442933034144:length(new$Gene.ID)\
1442933037251:length(new$Gene.ID)
1442933039546:names(o) <- new$Gene.ID
1442933061781:o <- as.data.frame(o)
1442933085020:new <- geneid2name[(geneid2name$Gene.name %in% rownames(M)),]
1442933085025:#o <- M[rownames(M) %in% new$Gene.name,]
1442933085025:o <- mclapply(new$Gene.name, function(e) {
1442933085025:oo <- M[(rownames(M) == e), ]
1442933085025:oo
1442933085026:}, mc.cores = NCPU)
1442933093320:names(o)
1442933095751:names(o) <- new$Gene.ID
1442933105771:as.data.frame(o)
1442933152757:head(o[1])
1442933166545:head(o[[1]])
1442933177351:o <- o[[1]]
1442933199020:o <- mclapply(new$Gene.name, function(e) {
1442933199021:oo <- M[(rownames(M) == e),]
1442933199021:oo
1442933199021:}, mc.cores = NCPU)
1442933245851:new <- geneid2name[(geneid2name$Gene.name %in% rownames(M)),]
1442933246574:#o <- M[rownames(M) %in% new$Gene.name,]
1442933246801:o <- mclapply(new$Gene.name, function(e) {
1442933247054:oo <- M[(rownames(M) == e),]
1442933248199:oo
1442933248390:}, mc.cores = NCPU)
1442933284124:length(o[1])
1442933288445:length(o[[1]])
1442933299594:dim(M)
1442933306251:length(o[[4]])
1442933310969:names(o)
1442933315049:names(o) <- new$Gene.ID
1442933347758:o <- mclapply(new$Gene.name, function(e) {
1442933347953:oo <- M[(rownames(M) == e),]
1442933348148:unlist(oo)
1442933348350:}, mc.cores = NCPU)
1442933358895:names(o) <- new$Gene.ID
1442933372120:head(as.data.frame(o))
1442933381076:View(as.data.frame(o))
1442933419049:o <- t(as.data.frame(o))
1442933421445:View(o)
1442933443024:rownames(o) <- new$Gene.ID
1442933463721:name.to.id <- function() {
1442933463721:new <- geneid2name[(geneid2name$Gene.name %in% rownames(M)),]
1442933463721:o <- mclapply(new$Gene.name, function(e) {
1442933463721:oo <- M[(rownames(M) == e),]
1442933463722:unlist(oo)
1442933463722:}, mc.cores = NCPU)
1442933463722:o <- t(as.data.frame(o))
1442933463723:rownames(o) <- new$Gene.ID
1442933463723:}
1442933848816:names(geneid2name)[(names(geneid2name)=="Gene.ID")]
1442933857380:names(geneid2name)[which(names(geneid2name)=="Gene.ID")]
1442934055344:name.to.id <- function(X, ref, to="id") {
1442934055345:if(to=="id") {
1442934055345:names(geneid2name)[(names(geneid2name)=="Gene.ID")] <- "to"
1442934055345:names(geneid2name)[(names(geneid2name)=="Gene.name")] <- "from"
1442934055345:} else {
1442934055345:stop("blad")
1442934055346:}
1442934055346:new <- geneid2name[(geneid2name$from %in% rownames(X)),]
1442934055347:o <- mclapply(new$from, function(e) {
1442934055347:oo <- X[(rownames(X) == e),]
1442934055347:unlist(oo)
1442934055347:}, mc.cores = NCPU)
1442934055348:o <- t(as.data.frame(o))
1442934055348:rownames(o) <- new$to
1442934055348:}
1442934078676:name.to.id(M, geneid2name, "id")
1442934091295:# turn into sra ids. Duplicate entries should be left duplicate
1442934091296:name.to.id <- function(X, ref, to="id") {
1442934091296:if(to=="id") {
1442934091296:names(geneid2name)[(names(geneid2name)=="Gene.ID")] <- "to"
1442934091296:names(geneid2name)[(names(geneid2name)=="Gene.name")] <- "from"
1442934091297:} else {
1442934091297:stop("blad")
1442934091297:}
1442934091298:new <- geneid2name[(geneid2name$from %in% rownames(X)),]
1442934091298:o <- mclapply(new$from, function(e) {
1442934091299:oo <- X[(rownames(X) == e),]
1442934091299:unlist(oo)
1442934091299:}, mc.cores = NCPU)
1442934091299:o <- t(as.data.frame(o))
1442934091300:rownames(o) <- new$to
1442934091300:o
1442934091300:}
1442934095570:name.to.id(M, geneid2name, "id")
1442934103770:View(name.to.id(M, geneid2name, "id"))
1442934178008:name.to.id <- function(X, ref, to="id") {
1442934178008:if(to=="id") {
1442934178009:names(geneid2name)[(names(geneid2name)=="Gene.ID")] <- "to"
1442934178009:names(geneid2name)[(names(geneid2name)=="Gene.name")] <- "from"
1442934178009:} else if (to=="name") {
1442934178009:names(geneid2name)[(names(geneid2name)=="Gene.name")] <- "to"
1442934178010:names(geneid2name)[(names(geneid2name)=="Gene.ID")] <- "from"
1442934178010:} else {
1442934178010:stop("err")
1442934178010:}
1442934178011:new <- geneid2name[(geneid2name$from %in% rownames(X)),]
1442934178012:o <- mclapply(new$from, function(e) {
1442934178012:oo <- X[(rownames(X) == e),]
1442934178012:unlist(oo)
1442934178012:}, mc.cores = NCPU)
1442934178013:o <- t(as.data.frame(o))
1442934178013:rownames(o) <- new$to
1442934178013:o
1442934178014:}
1442934190779:View(name.to.id(M, geneid2name, "name"))
1442934197826:View(name.to.id(M, geneid2name, "x"))
1442934206295:View(name.to.id(M, geneid2name, "id"))
1442934276081:View(name.to.id(Xp, geneid2name, "name"))
1442934427379:Xp.names <- name.to.id(Xp, geneid2name, "name")
1442934686945:legth(unique(Xp.names))
1442934690995:length(unique(Xp.names))
1442934709199:length(unique(rownames(Xp.names)))
1442934728020:dim(Xp.names)
1442934922298:dim(Xp)
1442934929895:dim(M)
1442934942175:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442934942175:if(set.seed) { set.seed(9) }
1442934942176:all <- lapply(disease.list, function(dis) {
1442934942176:tcga <- getTCGA(dis, clinical=F)
1442934942176:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442934942177:tryCatch({
1442934942177:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442934942177:}, error = function(e) {
1442934942177:o<-NULL
1442934942178:})
1442934942178:})
1442934942178:names(all) <- disease.list
1442934942179:M <- NULL
1442934942179:for(elt in all) {
1442934942179:M <- cbind(M, as.matrix(elt))
1442934942180:}
1442934942180:M <- as.data.frame(M)
1442934942180:}
1442935063793:length(unique(new))
1442935621236:name.to.id <- function(X, ref, to="id") {
1442935621237:if(to=="id") {
1442935621237:names(geneid2name)[(names(geneid2name)=="Gene.ID")] <- "to"
1442935621237:names(geneid2name)[(names(geneid2name)=="Gene.name")] <- "from"
1442935621238:} else if (to=="name") {
1442935621238:names(geneid2name)[(names(geneid2name)=="Gene.name")] <- "to"
1442935621238:names(geneid2name)[(names(geneid2name)=="Gene.ID")] <- "from"
1442935621238:} else {
1442935621239:stop("wrong to arg")
1442935621239:}
1442935621240:new <- geneid2name[(geneid2name$from %in% rownames(X)),]
1442935621240:o <- mclapply(new$from, function(e) {
1442935621240:oo <- X[(rownames(X) == e),]
1442935621240:unlist(oo)
1442935621241:}, mc.cores = NCPU)
1442935621241:o <- t(as.data.frame(o))
1442935621242:rownames(o) <- new$to
1442935621242:#if(length(unique(rownames(o)) != length(rownames(o)))) {
1442935621242:o
1442935621243:}
1442935658495:M <- tcga.expression.matrix(disease_list[1:5], 50)
1442935912665:View(most.correlated)
1442935912685:View(most.correlated)
1442935912701:View(most.correlated)
1442935999597:M <- name.to.id(M, geneid2name)
1442936198445:dim(M)
1442936232678:Mp <- preprocess(M)
1442936246381:View(Mp)
1442936309344:shared <- intersect(rownames(Xp), rownames(Mp))
1442936361078:Mp.s <- Mp[rownames(Mp)==s]
1442936361629:Xp.s <- Xp[rownames(Xp)==s]
1442936379905:Mp.s <- Mp[rownames(Mp) %in% shared]
1442936381007:Xp.s <- Xp[rownames(Xp) %in% shared]
1442936386695:dim(Mp.s)
1442936403585:Mp.s <- Mp[(rownames(Mp) %in% shared),]
1442936404269:Xp.s <- Xp[(rownames(Xp) %in% shared),]
1442936406819:dim(Mp.s)
1442936410595:dim(Xp.s)
1442936564894:sum(rownames(Xp.s) != rownames(Mp.s))
1442936593072:plot(rowSums(Xp.s), rowSums(Mp.s))
1442937095132:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442937095133:taxon.id = as.character(taxon.id)
1442937095133:At = A$annotation[[taxon.id]]
1442937095133:background = intersect(unique(unlist(At)), rownames(X))
1442937095133:r = most.correlated(X, subset=background, tx_input_list, how.many=50)
1442937095134:#r = top.correlated(X, subset=background, k=k)
1442937095134:mclapply(r, function(c1) { # dla każdego transkryptu
1442937095134:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442937095135:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442937095135:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442937095135:oo = NULL
1442937095136:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442937095136:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442937095136:if (ct[1,1] >= min.count) {
1442937095137:fet = fisher.test(ct)
1442937095137:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442937095137:#oo = as.numeric(fet$estimate)
1442937095138:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442937095138:}
1442937095138:}
1442937095139:oo
1442937095139:})
1442937095139:unlist(o)
1442937095140:}, mc.cores=NCPU)
1442937095140:r
1442937095141:}
1442937137072:most.correlated.gene.names <- function(Xp, subset="221150", from="id", geneid2name) { #make versatile so that can get any: names, desc, ...
1442937137072:# map first column OR use col names
1442937137072:# from: "id", "name"
1442937137073:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442937137073:r <- as.data.frame(r)
1442937137073:r$from <- rownames(r)
1442937137074:r <- r[order(r$r, decreasing = T),]
1442937137074:#r <- r[2:50,]
1442937137074:z <- (merge(r, geneid2name, all=F, by.x="from", by.y="Gene.name", sort=F))
1442937137075:names(z)[1:2] <- c("Gene.Name", "correlation")
1442937137075:z <- z[,c(1,3,2,4)]
1442937137075:}
1442937137076:id.or.name <- function(names, geneid2name) {
1442937137076:if(sum(names %in% geneid2name$Gene.ID) > sum(names %in% geneid2name$Gene.name)) {
1442937137076:o="id"
1442937137077:} else {
1442937137077:o="name"
1442937137077:}
1442937137077:o
1442937137078:}
1442937237892:most.correlated.gene.names <- function(Xp, subset="221150", from="id", ref=geneid2name) { #make versatile so that can get any: names, desc, ...
1442937237892:# map first column OR use col names
1442937237892:# from: "id", "name"
1442937237893:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442937237893:r <- as.data.frame(r)
1442937237893:r$from <- rownames(r)
1442937237893:r <- r[order(r$r, decreasing = T),]
1442937237894:#r <- r[2:50,]
1442937237894:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.name", sort=F))
1442937237895:names(z)[1:2] <- c("Gene.Name", "correlation")
1442937237895:z <- z[,c(1,3,2,4)]
1442937237895:}
1442937237896:id.or.name <- function(names, ref=geneid2name) {
1442937237896:if(sum(names %in% ref$Gene.ID) > sum(names %in% ref$Gene.name)) {
1442937237896:o="id"
1442937237896:} else {
1442937237897:o="name"
1442937237897:}
1442937237897:o
1442937237897:}
1442943599350:most.correlated.gene.names(Xp.s)
1442943664345:most.correlated.gene.names(Xp.s)
1442943730531:most.correlated.gene.names <- function(Xp, subset="221150", from="id", ref=geneid2name) { #make versatile so that can get any: names, desc, ...
1442943730531:# map first column OR use col names
1442943730531:# from: "id", "name"
1442943730531:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442943730532:r <- as.data.frame(r)
1442943730532:r$from <- rownames(r)
1442943730532:#r <- r[order(r$r, decreasing = T),]
1442943730533:#r <- r[2:50,]
1442943730533:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.name", sort=F))
1442943730533:names(z)[1:2] <- c("Gene.Name", "correlation")
1442943730534:z <- z[,c(1,3,2,4)]
1442943730534:}
1442943734720:most.correlated.gene.names(Xp.s)
1442943755947:Xp.s.y <- most.correlated.gene.names(Xp.s)
1442943774170:class(Xp)
1442943776545:class(Xp.s)
1442943794745:dim(Xp), dim)Xp.s
1442943799146:dim(Xp), dim(Xp.s)
1442943802845:dim(Xp); dim(Xp.s)
1442943844560:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442943853195:subset="221150"
1442943856219:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442943857594:r <- as.data.frame(r)
1442943858421:r$from <- rownames(r)
1442943872789:r <- r[order(r$r, decreasing = T),]
1442943880230:r <- r[order(r$V1, decreasing = T),]
1442943885863:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.name", sort=F))
1442943886475:names(z)[1:2] <- c("Gene.Name", "correlation")
1442943887018:z <- z[,c(1,3,2,4)]
1442943898053:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.name", sort=F))
1442943907073:ref <- geneid2name
1442943908420:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.name", sort=F))
1442943939003:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.ID", sort=F))
1442943994585:z <- intersect(r$V1, ref$Gene.ID)
1442944030136:r <- r[order(r$V1, decreasing = T),]
1442944065198:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.ID", sort=F))
1442944145482:names(z)
1442944178920:head(z$Gene.name)
1442944189345:head(z$V1)
1442944219160:most.correlated.gene.names <- function(Xp, subset="221150", from="id", ref=geneid2name) { #make versatile so that can get any: names, desc, ...
1442944219160:# map first column OR use col names
1442944219161:# from: "id", "name"
1442944219161:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442944219161:r <- as.data.frame(r)
1442944219161:r$from <- rownames(r)
1442944219162:r <- r[order(r$V1, decreasing = T),]
1442944219162:#r <- r[2:50,]
1442944219162:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.ID", sort=F))
1442944219163:#names(z)[1:2] <- c("Gene.Name", "correlation")
1442944219163:#z <- z[,c(1,3,2,4)]
1442944219163:}
1442944277581:Xp.s.y <- most.correlated.gene.names(Xp.s)
1442944300245:length(Xp.s.y)
1442944304520:length(Xp.s.y$V1)
1442944431615:z <- Xp.s.y$Gene.name
1442944451770:z <- as.data.frame(Xp.s.y)
1442944454270:head(Z)
1442944456777:head(z)
1442944472745:View(z)
1442944562148:colnames(z) <- c("gene ID", "correlation", "gene name", "description")
1442944572250:z <- [,c(11,3,2,4)]
1442944577420:z <- z[,c(11,3,2,4)]
1442944582049:z <- z[,c(1,3,2,4)]
1442944583970:View(z)
1442944683039:write.csv(z, "SKA3_sra_only_genes.tsv", row.names = F)
1442944690520:write.table(z, "SKA3_sra_only_genes.tsv", row.names = F)
1442944757945:x <- read.table("SKA3_TCGA.tsv")
1442944761370:View(x)
1442944768795:x <- read.table("SKA3_TCGA.tsv", header=T)
1442944806480:colnames(z) <- c("gene name", "gene ID", "correlation", "description")
1442944819547:z <- [,c(2,1,3,4)]
1442944823261:z <- z[,c(2,1,3,4)]
1442944833500:x <- x[,c(2,1,3,4)]
1442944857870:colnames(x) <- c("gene ID", "gene name", "correlation", "description")
1442944883847:write.table(x, "SKA3_TCGA.tsv",row.names = F)
1442944972308:View(z)
1442944973002:View(z)
1442945011357:colnames(z) <- c("gene name", "gene ID", "correlation", "description")
1442945015770:View(z)
1442945069320:z$`gene ID` %in% x$`gene ID`
1442945092028:sum(z$`gene ID`[1:100] %in% x$`gene ID`)
1442945138295:z$`gene ID`[1:100]
1442945143948:x$`gene ID`
1442945171307:x$`gene ID` <- as.character(x$`gene ID`)
1442945174745:x$`gene ID`
1442945177821:sum(z$`gene ID`[1:100] %in% x$`gene ID`)
1442945317580:a <- read.csv("SKA3_Pearsons_2-color.csv")
1442945320346:View(a)
1442945354170:sum(x$`gene ID` %in% z$`gene ID`[1:100])
1442945375020:sum(x$`gene ID` %in% a$Gene2.ID[1:100])
1442945392020:sum(z$`gene ID`[1:100] %in% a$Gene2.ID[1:100])
1442948414270:plot(z$`gene ID`[1:100], a$Gene2.ID[1:100])
1442948598828:human.genes <- GO$table$Gene.ID[GO$table$Taxon.ID==9606]
1442948611755:human.genes <- unique(human.genes)
1442948655997:x.h <- x[x$`gene ID` %in% human.genes,]
1442948671245:z.h <- x[x$`gene ID` %in% human.genes,]
1442948713545:z.h <- x[x$`gene ID` %in% as.character(human.genes),]
1442948725869:human.genes
1442948738070:z.h <- z[x$`gene ID` %in% as.character(human.genes),]
1442948751970:View(x.h)
1442948759049:View(x.h)
1442948793334:sum(x.h$`gene ID`[1:100] %in% a$Gene2.ID[1:100])
1442948808171:z.h <- z[z$`gene ID` %in% as.character(human.genes),]
1442948818220:a.h <- a[a$`gene ID` %in% as.character(human.genes),]
1442948829920:a.h <- a[a$Gene2.ID %in% as.character(human.genes),]
1442948847046:sum(x.h$`gene ID`[1:100] %in% a$Gene2.ID[1:100])
1442948925221:sum(x.h$`gene ID`[1:100] %in% a.h$Gene2.ID[1:100])
1442949085670:sum(z.h$`gene ID`[1:100] %in% a.h$Gene2.ID[1:100])
1442949171926:z.a <- z[z$`gene ID` %in% intersect(z$`gene ID`, a$Gene2.ID)]
1442949174270:z.a <- z[z$`gene ID` %in% intersect(z$`gene ID`, a$Gene2.ID),]
1442949200120:a.z <- a[a$Gene2.ID %in% intersect(z$`gene ID`, a$Gene2.ID),]
1442949274961:sum(z.a$`gene ID` %in% a.z$Gene2.ID )
1442949289547:sum(z.a$`gene ID`[1:100] %in% a.z$Gene2.ID[1:100] )
1442949342575:sum(z.a$`gene ID`[1:1300] %in% a.z$Gene2.ID[1:1300] )
1442949764203:sum(z.a$`gene ID`[1:1400] %in% a.z$Gene2.ID[1:1400] )
1442949803520:length(a.h)
1442949810220:length(a.h$Gene2Name)
1442949833171:length(z.h$`gene name`)
1442949933524:m<-x
1442949940730:View(m)
1442950102816:m <- most.correlated.gene.names(Mp.s)
1442950104901:m
1442950121322:View(Mp)
1442950125546:View(m)
1442950146946:m.h <- m[m$from %in% human.genes]
1442950152894:m.h <- m[m$from %in% human.genes,]
1442950156551:View(m.h)
1442950187603:wpolne <- intersect(m.h$from, z.h$`gene ID`, a.h$Gene2.ID)
1442950202370:wpolne <- intersect(m.h$from, intersect(z.h$`gene ID`, a.h$Gene2.ID))
1442950247133:wpolne <- intersect(human.genes, (intersect(m.h$from, intersect(z.h$`gene ID`, a.h$Gene2.ID)))
1442950250370:)
1442950289764:wpolne <- intersect(human.genes, (intersect(m$from, intersect(z$`gene ID`, a$Gene2.ID)))
1442950292730:)
1442950295402:wpolne <- intersect(human.genes, (intersect(m$from, intersect(z$`gene ID`, a$Gene2.ID))))
1442950336170:m.h <- m[m$from %in% wspolne]
1442950346119:rm(wpolne)
1442950350057:wspolne <- intersect(human.genes, (intersect(m$from, intersect(z$`gene ID`, a$Gene2.ID))))
1442950353771:m.h <- m[m$from %in% wspolne]
1442950355771:m.h <- m[m$from %in% wspolne,]
1442950362520:a.h <-a[a$from %in% wspolne,]
1442950372845:z.h <-z[z$from %in% wspolne,]
1442950385245:rm(x, x.h,)
1442950387219:rm(x, x.h)
1442950408995:a.h <-a[a$Gene2.ID %in% wspolne,]
1442950416153:z.h <-z[z$`gene ID` %in% wspolne,]
1442950494446:sum(z.h$`gene ID`[100] %in% a.h$Gene2.ID[100] )
1442950501945:sum(z.h$`gene ID`[100] %in% a.h$Gene2.ID[100]
1442950507949:a.h$Gene2.ID[100]
1442950515570:sum(z.h$`gene ID`[1:100] %in% a.h$Gene2.ID[1:100]
1442950517298:)
1442950530827:sum(m.h$from[1:100] %in% a.h$Gene2.ID[1:100])
1442950700920:sum(z.h$`gene ID`[1:100] %in% m.h$from[1:100]
1442950707353:sum(z.h$`gene ID`[1:100] %in% m.h$from[1:100])
1442950709695:sum(z.h$`gene ID`[1:100] %in% m.h$from[1:100])
1442950751369:sum(z.h$`gene ID`[1:640] %in% m.h$from[1:640])
1442951162070:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442951162070:taxon.id = as.character(taxon.id)
1442951162070:At = A$annotation[[taxon.id]]
1442951162071:background = intersect(unique(unlist(At)), rownames(X))
1442951162071:r = most.correlated(X, subset=background, tx_input_list, how.many=50)
1442951162071:#r = top.correlated(X, subset=background, k=k)
1442951162072:mclapply(r, function(c1) { # dla każdego transkryptu
1442951162072:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442951162072:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442951162073:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442951162073:oo = NULL
1442951162073:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442951162074:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442951162074:if (ct[1,1] >= min.count) {
1442951162074:fet = fisher.test(ct)
1442951162075:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442951162075:#oo = as.numeric(fet$estimate)
1442951162075:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442951162076:}
1442951162076:}
1442951162076:oo
1442951162077:})
1442951162077:unlist(o)
1442951162078:}, mc.cores=NCPU)
1442951162078:r
1442951162078:}
1442951206287:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))
1442951207039:Xp.q = Xp[q,]
1442951221351:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))
1442951221663:Xp.q = Xp[q,]
1442951244256:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442951430870:predictions$`221150`
1442951490261:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442951490261:taxon.id = as.character(taxon.id)
1442951490261:At = A$annotation[[taxon.id]]
1442951490262:background = intersect(unique(unlist(At)), rownames(X))
1442951490262:r = most.correlated(X, subset=background, tx_input_list, how.many=50)
1442951490262:#r = top.correlated(X, subset=background, k=k)
1442951490263:mclapply(r, function(c1) { # dla każdego transkryptu
1442951490263:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442951490263:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442951490264:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442951490264:oo = NULL
1442951490264:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442951490264:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442951490265:if (ct[1,1] >= min.count) {
1442951490265:fet = fisher.test(ct)
1442951490265:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442951490266:#oo = as.numeric(fet$estimate)
1442951490266:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442951490266:}
1442951490267:}
1442951490267:oo
1442951490268:})
1442951490268:#      unlist(o)
1442951490268:}, mc.cores=NCPU)
1442951490269:}
1442951497626:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442951592470:predictions$`221150`
1442951607875:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442951607875:taxon.id = as.character(taxon.id)
1442951607875:At = A$annotation[[taxon.id]]
1442951607876:background = intersect(unique(unlist(At)), rownames(X))
1442951607876:r = most.correlated(X, subset=background, tx_input_list, how.many=50)
1442951607876:#r = top.correlated(X, subset=background, k=k)
1442951607877:mclapply(r, function(c1) { # dla każdego transkryptu
1442951607877:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442951607877:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442951607878:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442951607878:oo = NULL
1442951607878:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442951607879:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442951607879:if (ct[1,1] >= min.count) {
1442951607879:fet = fisher.test(ct)
1442951607880:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442951607880:#oo = as.numeric(fet$estimate)
1442951607880:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442951607881:}
1442951607881:}
1442951607881:unlist(oo)
1442951607882:})
1442951607882:#      unlist(o)
1442951607882:}, mc.cores=NCPU)
1442951607883:}
1442951616020:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442951871505:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442951871506:taxon.id = as.character(taxon.id)
1442951871506:At = A$annotation[[taxon.id]]
1442951871506:background = intersect(unique(unlist(At)), rownames(X))
1442951871506:r = most.correlated(X, subset=background, tx_input_list, how.many=50)
1442951871507:#r = top.correlated(X, subset=background, k=k)
1442951871507:mclapply(r, function(c1) { # dla każdego transkryptu
1442951871507:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442951871508:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442951871508:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442951871508:oo = NULL
1442951871509:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442951871509:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442951871509:if (ct[1,1] >= min.count) {
1442951871510:fet = fisher.test(ct)
1442951871510:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442951871510:#oo = as.numeric(fet$estimate)
1442951871511:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442951871511:}
1442951871511:}
1442951871512:unlist(o)
1442951871512:})
1442951871512:#      unlist(o)
1442951871513:}, mc.cores=NCPU)
1442951871513:}
1442951875371:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442953505186:disease_list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442953505187:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442953505187:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442953505188:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442953505188:if(set.seed) { set.seed(9) }
1442953505189:all <- lapply(disease.list, function(dis) {
1442953505189:tcga <- getTCGA(dis, clinical=F)
1442953505189:#    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442953505189:tryCatch({
1442953505190:o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442953505190:}, error = function(e) {
1442953505190:o<-NULL
1442953505190:})
1442953505191:})
1442953505191:names(all) <- disease.list
1442953505191:M <- NULL
1442953505192:for(elt in all) {
1442953505192:M <- cbind(M, as.matrix(elt))
1442953505192:}
1442953505192:M <- as.data.frame(M)
1442953505193:}
1442953511605:library(TCGA2STAT)
1442953581084:T <- tcga.expression.matrix(disease_list[1:5], 50)
1442953901697:Mp <- preprocess(M)
1442954060741:### COMPARISON
1442954060741:most.correlated.gene.names <- function(Xp, subset="221150", from="id", ref=geneid2name) { #make versatile so that can get any: names, desc, ...
1442954060741:# map first column OR use col names
1442954060742:# from: "id", "name"
1442954060742:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442954060742:r <- as.data.frame(r)
1442954060742:r$from <- rownames(r)
1442954060743:r <- r[order(r$V1, decreasing = T),]
1442954060743:#r <- r[2:50,]
1442954060743:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.ID", sort=F))
1442954060744:#names(z)[1:2] <- c("Gene.Name", "correlation")
1442954060744:#z <- z[,c(1,3,2,4)]
1442954060744:}
1442954060745:id.or.name <- function(names, ref=geneid2name) {
1442954060745:if(sum(names %in% ref$Gene.ID) > sum(names %in% ref$Gene.name)) {
1442954060745:o="id"
1442954060745:} else {
1442954060746:o="name"
1442954060746:}
1442954060746:o
1442954060746:}
1442954073220:m <- most.correlated.gene.names(Mp)
1442954165063:m <- most.correlated.gene.names(Mp, subset=c("55", 221150"))
1442954167289:)
1442954184713:m <- most.correlated.gene.names(Mp, subset=c("55", 221150"))
1442954191949:m <- most.correlated.gene.names(Mp, subset=c("55", "221150"))
1442954236966:Mp[rownames(Mp) %in% "221150",]
1442954252150:dim(Mp)
1442954285415:m <- most.correlated.gene.names(Mp, subset=c("KSA3))
1442954292278:m <- most.correlated.gene.names(Mp, subset=c("SKA3"))
1442954317389:name.to.id <- function(X, ref=geneid2name, to="id") {
1442954317389:if(to=="id") {
1442954317389:names(ref)[(names(ref)=="Gene.ID")] <- "to"
1442954317389:names(ref)[(names(ref)=="Gene.name")] <- "from"
1442954317390:} else if (to=="name") {
1442954317390:names(ref)[(names(ref)=="Gene.name")] <- "to"
1442954317390:names(ref)[(names(ref)=="Gene.ID")] <- "from"
1442954317390:} else {
1442954317391:stop("wrong 'to' arg")
1442954317391:}
1442954317391:new <- ref[(ref$from %in% rownames(X)),]
1442954317392:o <- mclapply(new$from, function(e) {
1442954317392:oo <- X[(rownames(X) == e),]
1442954317392:unlist(oo)
1442954317392:}, mc.cores = NCPU)
1442954317393:o <- t(as.data.frame(o))
1442954317393:rownames(o) <- new$to
1442954317394:#if(length(unique(rownames(o)) != length(rownames(o)))) {
1442954317394:o
1442954317394:}
1442954332308:Mp <- name.to.id(Mp)
1442954345295:# turn into sra ids. Duplicate entries should be left duplicate
1442954345295:name.to.id <- function(X, ref=geneid2name, to="id") {
1442954345295:require(parallel)
1442954345296:if(to=="id") {
1442954345296:names(ref)[(names(ref)=="Gene.ID")] <- "to"
1442954345296:names(ref)[(names(ref)=="Gene.name")] <- "from"
1442954345296:} else if (to=="name") {
1442954345297:names(ref)[(names(ref)=="Gene.name")] <- "to"
1442954345297:names(ref)[(names(ref)=="Gene.ID")] <- "from"
1442954345297:} else {
1442954345297:stop("wrong 'to' arg")
1442954345298:}
1442954345298:new <- ref[(ref$from %in% rownames(X)),]
1442954345298:o <- mclapply(new$from, function(e) {
1442954345298:oo <- X[(rownames(X) == e),]
1442954345299:unlist(oo)
1442954345299:}, mc.cores = NCPU)
1442954345299:o <- t(as.data.frame(o))
1442954345300:rownames(o) <- new$to
1442954345300:#if(length(unique(rownames(o)) != length(rownames(o)))) {
1442954345300:o
1442954345301:}
1442954347509:Mp <- name.to.id(Mp)
1442954432206:library(parallel)
1442954432383:library(limma)
1442954432529:library(AUC)
1442954444933:dim(Mp)
1442954463572:m <- most.correlated.gene.names(Mp)
1442954483099:most.correlated.gene.names <- function(Xp, subset="221150", from="id", ref=geneid2name) { #make versatile so that can get any: names, desc, ...
1442954483100:# map first column OR use col names
1442954483100:# from: "id", "name"
1442954483100:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1442954483101:r <- as.data.frame(r)
1442954483101:r$from <- rownames(r)
1442954483101:r <- r[order(r[1], decreasing = T),]
1442954483102:#r <- r[2:50,]
1442954483102:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.ID", sort=F))
1442954483102:#names(z)[1:2] <- c("Gene.Name", "correlation")
1442954483103:#z <- z[,c(1,3,2,4)]
1442954483103:}
1442954483104:id.or.name <- function(names, ref=geneid2name) {
1442954483104:if(sum(names %in% ref$Gene.ID) > sum(names %in% ref$Gene.name)) {
1442954483104:o="id"
1442954483105:} else {
1442954483105:o="name"
1442954483105:}
1442954483105:o
1442954483106:}
1442954486998:m <- most.correlated.gene.names(Mp)
1442957617400:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442957617400:if (disease.list == "all") {
1442957617400:disease.list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442957617400:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442957617401:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442957617401:all <- mclapply(disease.list, function(dis) {
1442957617401:oo <- getTCGA(dis, clinical=F)
1442957617401:}, mc.cores = NCPU)
1442957617402:all
1442957617402:}
1442957617403:#   if(set.seed) { set.seed(9) }
1442957617403:#   all <- mclapply(disease.list, function(dis) {
1442957617403:#     tcga <- getTCGA(dis, clinical=F)
1442957617403:# #    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442957617404:#     tryCatch({
1442957617404:#       o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442957617404:#     }, error = function(e) {
1442957617404:#       o<-NULL
1442957617405:#     })
1442957617405:#   })
1442957617405:names(all) <- disease.list
1442957617406:M <- NULL
1442957617406:for(elt in all) {
1442957617406:M <- cbind(M, as.matrix(elt))
1442957617407:}
1442957617407:M <- as.data.frame(M)
1442957617407:}
1442957628414:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442957628414:if (disease.list == "all") {
1442957628414:disease.list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442957628415:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442957628415:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442957628415:all <- mclapply(disease.list, function(dis) {
1442957628415:oo <- getTCGA(dis, clinical=F)
1442957628416:}, mc.cores = NCPU)
1442957628416:all
1442957628416:}
1442957628417:#   if(set.seed) { set.seed(9) }
1442957628417:#   all <- mclapply(disease.list, function(dis) {
1442957628417:#     tcga <- getTCGA(dis, clinical=F)
1442957628418:# #    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442957628418:#     tryCatch({
1442957628418:#       o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442957628418:#     }, error = function(e) {
1442957628419:#       o<-NULL
1442957628419:#     })
1442957628419:#   })
1442957628419:#names(all) <- disease.list
1442957628420:M <- NULL
1442957628420:for(elt in all) {
1442957628421:M <- cbind(M, as.matrix(elt))
1442957628421:}
1442957628421:M <- as.data.frame(M)
1442957628421:}
1442957650671:M <- tcga.expression.matrix(disease.list = all
1442957656294:M <- tcga.expression.matrix(disease.list = "all")
1442957922595:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442957922595:if (disease.list == "all") {
1442957922595:disease.list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442957922595:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442957922596:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442957922596:all <- mclapply(disease.list, function(dis) {
1442957922596:oo <- getTCGA(dis, clinical=F)
1442957922596:}, mc.cores = NCPU)
1442957922597:all
1442957922597:}
1442957922598:#   if(set.seed) { set.seed(9) }
1442957922598:#   all <- mclapply(disease.list, function(dis) {
1442957922598:#     tcga <- getTCGA(dis, clinical=F)
1442957922598:# #    if(length(tcga)<=1 | !is.null(ncol(tcga))) {
1442957922599:#     tryCatch({
1442957922599:#       o <- tcga[,sample(1:ncol(tcga), min(ncol(tcga), how.many.per.disease), replace=F)]
1442957922599:#     }, error = function(e) {
1442957922599:#       o<-NULL
1442957922600:#     })
1442957922600:#   })
1442957922600:#names(all) <- disease.list
1442957922600:#
1442957922601:#   M <- NULL
1442957922601:#   for(elt in all) {
1442957922601:#     M <- cbind(M, as.matrix(elt))
1442957922602:#   }
1442957922602:#   M <- as.data.frame(M)
1442957922602:}
1442960598135:names(M)
1442960606390:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442960606390:if (disease.list == "all") {
1442960606390:disease.list <- c("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442960606390:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442960606391:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442960606391:all <- mclapply(disease.list, function(dis) {
1442960606391:oo <- getTCGA(dis, clinical=F)
1442960606391:}, mc.cores = NCPU)
1442960606392:all
1442960606392:}
1442960620968:}
1442960635816:M <- tcga.expression.matrix(disease.list = "all")
1442961056350:M <- tcga.expression.matrix(disease_list[3])
1442961421710:for(dis in disease_list) {}
1442961435734:for(dis in disease_list) { print(dis)}
1442961460582:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442961460582:if (disease.list == "all") {
1442961460582:disease.list <- list("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442961460583:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442961460583:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442961460583:all <- mclapply(disease.list[1:10], function(dis) {
1442961460583:oo <- getTCGA(dis, clinical=F)
1442961460584:}, mc.cores = NCPU)
1442961460584:all
1442961460584:}
1442961462231:}
1442961490215:T <- tcga.expression.matrix(disease.list = "all")
1442961618281:T[1]
1442961632897:View(T[[1]]
1442961633953:)
1442961673194:names(T)
1442961724001:tcga.expression.matrix <- function(disease.list, how.many.per.disease= 30, set.seed=T) {
1442961724001:if (disease.list == "all") {
1442961724002:disease.list <- list("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442961724002:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442961724002:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442961724002:all <- mclapply(disease.list, function(dis) {
1442961724002:oo <- getTCGA(dis, clinical=F)
1442961724003:}, mc.cores = NCPU)
1442961724003:all
1442961724003:names(all) <- disease.list
1442961724004:}
1442961726745:}
1442961731322:T <- tcga.expression.matrix(disease.list = "all")
1442962099375:tcga.expression.matrix <- function(disease.list) {
1442962099375:if (disease.list == "all") {
1442962099375:disease.list <- list("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442962099375:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442962099376:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442962099376:}
1442962099376:all <- mclapply(disease.list, function(dis) {
1442962099376:oo <- getTCGA(dis, clinical=F)
1442962099377:}, mc.cores = NCPU)
1442962099377:all
1442962099377:names(all) <- disease.list
1442962099377:}
1442962460053:tcga.expression.matrix <- function(disease.list) {
1442962460053:if (disease.list == "all") {
1442962460053:disease.list <- list("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442962460054:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442962460054:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442962460054:}
1442962460054:all <- mclapply(disease.list, function(dis) {
1442962460055:tryCatch(getTCGA(dis, clinical=F), function(e) { NULL } )
1442962460055:}, mc.cores = NCPU)
1442962460055:all
1442962460056:names(all) <- disease.list
1442962460056:}
1442962467295:T <- tcga.expression.matrix(disease.list = "all")
1442962549428:tcga.expression.matrix <- function(disease.list) {
1442962549428:if (disease.list == "all") {
1442962549429:disease.list <- list("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442962549429:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442962549429:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442962549429:}
1442962549430:all <- mclapply(disease.list, function(dis) {
1442962549430:tryCatch(getTCGA(dis, clinical=F), error = function(e) { NULL } )
1442962549430:}, mc.cores = NCPU)
1442962549431:all
1442962549431:names(all) <- disease.list
1442962549431:}
1442962553245:T <- tcga.expression.matrix(disease.list = "all")
1442962921019:paste("oo") <- sum(c(2,2))
1442962995979:tcga.expression.matrix <- function(disease.list) {
1442962995980:if (disease.list == "all") {
1442962995980:disease.list <- list("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442962995980:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442962995980:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442962995981:}
1442962995981:#     all <- mclapply(disease.list, function(dis) {
1442962995981:#       tryCatch(getTCGA(dis, clinical=F), error = function(e) { NULL } )
1442962995982:#     }, mc.cores = NCPU)
1442962995982:#     all
1442962995982:#     names(all) <- disease.list
1442962995983:for(d in disease.list) {
1442962995983:o <- getTCGA(d, clinical=F)
1442962995983:write.csv(o, paste0(d, "_TCGA.csv", row.names=NULL))
1442962995983:}
1442962995984:}
1442963007652:tcga.expression.matrix()
1442963020295:tcga.expression.matrix <- function(disease.list="all") {
1442963020295:if (disease.list == "all") {
1442963020296:disease.list <- list("ACC", "BLCA", "BRCA", "CESC", "CHOL", "COAD", "COADREAD", "DLBC", "ESCA", "FPPP", "GBM", "GBMLGG", "HNSC", "KICH", "KIPAN",
1442963020296:"KIRC", "KIRP", "LAML", "LGG", "LIHC", "LUAD", "LUSC", "MESO", "OV", "PAAD", "PCPG", "PRAD", "READ", "SARC", "SKCM", "STAD",
1442963020296:"TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")
1442963020296:}
1442963020297:#     all <- mclapply(disease.list, function(dis) {
1442963020297:#       tryCatch(getTCGA(dis, clinical=F), error = function(e) { NULL } )
1442963020297:#     }, mc.cores = NCPU)
1442963020297:#     all
1442963020298:#     names(all) <- disease.list
1442963020298:for(d in disease.list) {
1442963020298:o <- getTCGA(d, clinical=F)
1442963020298:write.csv(o, paste0(d, "_TCGA.csv", row.names=NULL))
1442963020299:}
1442963020299:}
1442963024445:tcga.expression.matrix()
1442964587995:tcga.expression.matrix(disease.list = list("SARC", "SKCM", "STAD", "TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM")))
1442964592276:tcga.expression.matrix(disease.list = list("SARC", "SKCM", "STAD", "TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM"))
1442964606131:tcga.expression.matrix(disease.list = list("SKCM", "STAD", "TGCT", "THCA", "THYM", "UCEC", "UCS", "UVM"))
1442965276932:file_list <- list.files("TCGA")
1442965418301:write.csv(getTCGA("SARC", clinical=F), "SARC_TCGA.csv", row.names = F))
1442965421554:write.csv(getTCGA("SARC", clinical=F), "SARC_TCGA.csv", row.names = F)
1442965440620:o <- getTCGA("SARC", clinical=F
1442965442570:)
1442965456370:o <- getTCGA("SAR", clinical=F)
1442965697729:file_list <- list.files("TCGA")
1442965698300:o <- NULL
1442965698914:for(file in file_list) {
1442965699164:o <- cbind(o, read.csv(file))
1442965699581:}
1442965700172:o
1442965838814:dir.create("TCGA")
1442965862699:file_list <- list.files("TCGA")
1442965864979:o <- NULL
1442965865172:for(file in file_list) {
1442965865370:o <- cbind(o, read.csv(file))
1442965865655:}
1442965899149:file_list <- list.files("TCGA")
1442965947658:file_list <- list.files("TCGA")
1442965948336:o <- NULL
1442965948824:for(file in file_list) {
1442965949328:o <- cbind(o, read.csv(file))
1442965950007:}
1442965973427:o <- NULL
1442965973650:for(file in file_list) {
1442965973870:o <- cbind(o, read.csv(paste0("TCGA/", file))
1442965974067:}
1442965974542:o
1442965980234:o <- NULL
1442965980573:for(file in file_list) {
1442965980894:o <- cbind(o, read.csv(paste0("TCGA/", file)))
1442965981218:}
1442966063937:o <- NULL
1442966064305:for(file in file_list) {
1442966064623:oo <-read.csv(paste0("TCGA/", file))
1442966064813:if(nrow(oo)>0) {
1442966065063:o <- cbind(o, read.csv(paste0("TCGA/", file)))
1442966065358:}
1442966066222:}
1442966176586:o <- mclapply(file_list, function(file) {
1442966176587:oo <- read.csv(paste0("TCGA/", file))
1442966176587:}, mc.cores=NCPU)
1443025014518:X = read.table("expression.gene.v2.tsv")
1443025088487:sum(is.na(X))
1443025201115:file_list
1443025221884:file_list <- list(list.files("TCGA"))
1443025222387:o <- mclapply(file_list, function(file) {
1443025222668:oo <- read.csv(paste0("TCGA/", file))
1443025223316:}, mc.cores=NCPU)
1443025234394:library(parallel)
1443025236048:library(TCGA2STAT)
1443025236199:library(SRAdb)
1443025256403:file_list <- list(list.files("TCGA"))
1443025257733:o <- mclapply(file_list, function(file) {
1443025257940:oo <- read.csv(paste0("TCGA/", file))
1443025258132:}, mc.cores=NCPU)
1443025324434:file_list <- as.list(list.files("TCGA"))
1443025326462:o <- mclapply(file_list, function(file) {
1443025326635:oo <- read.csv(paste0("TCGA/", file))
1443025326803:}, mc.cores=NCPU)
1443025510044:is.data.frame()
1443025513145:?is.data.frame()
1443025522220:is.data.frame(x)
1443025525522:is.data.frame(o)
1443025552805:file_list <- as.list(list.files("TCGA"))
1443025553322:o <- NULL
1443025554857:for (file in file_list) {
1443025555777:oo <- read.csv(paste0("TCGA/", file))
1443025556551:if(is.data.frame(oo)) {
1443025556821:o <- cbind(o, oo)
1443025557007:}
1443025557288:}
1443025583415:o <- NULL
1443025583592:for (file in file_list) {
1443025583738:oo <- read.csv(paste0("TCGA/", file))
1443025583857:if(is.data.frame(oo)) {
1443025584013:if(nrow(oo) >0) {
1443025584147:o <- cbind(o, oo)
1443025584300:}
1443025584488:}
1443025584715:}
1443025607532:o <- NULL
1443025607681:for (file in file_list) {
1443025607835:oo <- as.matrix(read.csv(paste0("TCGA/", file)))
1443025608457:if(is.data.frame(oo)) {
1443025609608:o <- cbind(o, oo)
1443025610596:}
1443025610789:}
1443025961647:o <- NULL
1443025961832:for (file in file_list) {
1443025961987:tryCatch (
1443025962158:oo <- as.matrix(read.csv(paste0("TCGA/", file))),
1443025962313:error=function(e) return(NA)
1443025962485:)
1443025962630:if(is.data.frame(oo)) {
1443025962811:if(nrow(oo) >0) {
1443025963003:o <- cbind(o, oo)
1443025963178:}
1443025963326:}
1443025963533:}
1443026707105:names(oo0)
1443026708728:names(oo)
1443026715055:class(oo)
1443026718995:summary(oo)
1443026725774:dim(oo)
1443026729701:dim(o)
1443026889444:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[1])))
1443026894378:o <- cbind(o, oo)
1443026913767:o <- cbind(o, oo)
1443026924118:o <- NULL
1443026924985:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[1])))
1443026930330:o <- cbind(o, oo)
1443026935105:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[2])))
1443026957611:o <- cbind(o, oo)
1443026962723:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[3])))
1443027036044:o <- cbind(o, oo)
1443027043012:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[4])))
1443027074006:o <- cbind(o, oo)
1443027084245:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[5])))
1443027087546:o <- cbind(o, oo)
1443027092105:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[6])))
1443027127100:o <- cbind(o, oo)
1443027137060:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[7])))
1443027182974:o <- cbind(o, oo)
1443027195882:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[8])))
1443027224024:o <- cbind(o, oo)
1443027230687:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[9])))
1443027240456:o <- cbind(o, oo)
1443027242411:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[10])))
1443027296736:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[11])))
1443027344849:o <- cbind(o, oo)
1443027358602:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[12])))
1443027365150:?file.size
1443027368820:o <- cbind(o, oo)
1443027383568:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[13])))
1443027419919:o <- cbind(o, oo)
1443027429728:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[14])))
1443027513070:o <- cbind(o, oo)
1443027529949:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[15])))
1443027574736:o <- o_recznie
1443027574737:o_recznie <- cbind(o_recznie, oo)
1443027589973:o_recznie <- o
1443027596980:o_recznie <- cbind(o_recznie, oo)
1443027617607:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[16])))
1443027644780:o_recznie <- cbind(o_recznie, oo)
1443027669734:oo <- as.matrix(read.csv(paste0("TCGA/", file_list[17])))
1443027682631:o_recznie <- cbind(o_recznie, oo)
1443027772255:mclapply(file_list, function(X) { oo <- NA })
1443027782795:o <- mclapply(file_list, function(x) {
1443027782998:if(file.size(file)>99) {
1443027783204:oo <- as.matrix(read.csv(paste0("TCGA/", file)))
1443027783434:} else {
1443027783659:oo <- NA
1443027783920:}
1443027784377:}, mc.cores = NCPU)
1443027801644:o <- mclapply(file_list, function(file) {
1443027802388:if(file.size(file)>99) {
1443027802583:oo <- as.matrix(read.csv(paste0("TCGA/", file)))
1443027802728:} else {
1443027802887:oo <- NA
1443027803110:}
1443027803476:}, mc.cores = NCPU)
1443027823526:file.size(file)
1443027862626:o <- mclapply(file_list, function(file) {
1443027862785:file <- paste0("TCGA/", file)
1443027862954:if(file.size(file)>99) {
1443027863114:oo <- as.matrix(read.csv(file))
1443027863271:} else {
1443027863432:oo <- NA
1443027863583:}
1443027863926:}, mc.cores = NCPU)
1443028207247:names(o)
1443028214106:is.na(o)
1443028269372:file.info("TCGA/ACC_TCGA.csv")
1443028277845:file.info("TCGA/ACC_TCGA.csv")[2]
1443030109420:od <- as.data.frame(o)
1443030827634:View(od)
1443030892673:length(unique(colnames(od)))
1443030987970:write.csv(od, "/mnt/DATAPART1/TCGA_expression_matrix.csv", row.names = F)
1443031503920:readLines("/mnt/DATAPART1/TCGA_expression_matrix.csv")[1:100]
1443031678663:View(X)
1443032262457:?getTCGA
1443033120785:rm)o)
1443033135208:rm)o)rm(o)
1443033149563:rm(o)
1443033159348:rm(o_recznie)
1443033197527:od1 <- od[,-1]
1443033228199:od[1:10, 1:10]
1443033274165:colnames(od1)<-od[,1]
1443033298327:rownames(od1)<-od[,1]
1443033333440:od1[1:10, 1:10]
1443033364872:write.csv(od1, "/mnt/DATAPART1/TCGA_expression_matrix.csv", row.names = F)
1443033847576:rm(od)
1443033890441:rm(od1)
1443033922668:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv)
1443034337988:rm(oo)
1443034338271:rm(T, dis, disease_list, file)
1443034338292:rm(r)
1443034390790:od <- read.table("/mnt/DATAPART1/TCGA_expression_matrix.csv")
1443034439425:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv")
1443034801183:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv", nrows = 3)
1443034825610:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv", nrows = 3, colClasses = numeric())
1443034836968:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv", nrows = 3, colClasses = numeric
1443034839429:)
1443034877908:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv", nrows = 3, colClasses = "numeric")
1443034907020:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv", nrows = 3)
1443035043494:View(od)
1443035142647:library(TCGA2STAT)
1443035143595:library(parallel)
1443035157725:rows <- getTCGA(,clinical=F)
1443035188802:rownames(rows)
1443035215970:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv", colClasses = "numeric")
1443035238995:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.csv")
1443035716153:rownames(od)
1443035726249:rownames(od) <- rownames(rows)
1443035728902:rownames(od)
1443035755620:od{1:10, 1:10}
1443035763095:od[1:10, 1:10]
1443035795520:?write.table
1443035827170:write.table("/mnt/DATAPART1/TCGA_expression_matrix.tsv", sep="\t")
1443035841479:write.table(od, "/mnt/DATAPART1/TCGA_expression_matrix.tsv", sep="\t")
1443036955222:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.tsv", nrows = 3)
1443036968732:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.tsv", nrows = 3)
1443036984720:od <- read.csv("/mnt/DATAPART1/TCGA_expression_matrix.tsv", nrows = 3)
1443040560853:rm(od)
1443043794220:rm(e, ep, zi, Mp, res, rows)
1443043830520:rm(M, k, q,z,term.names, term.id, o)
1443043848563:save.image("/mnt/DATAPART1/rnaseq/.RData")
1443043910301:library(parallel)
1443043910512:library(limma)
1443043910747:library(AUC)
1443043912005:NCPU = detectCores()
1443043914658:X = read.table("expression.gene.v2.tsv")
1443043922132:Xp = preprocess(X)
1443043948103:save.image("/mnt/DATAPART1/rnaseq/.RData")
1443044393220:y <- y.labels("y", predictions)
1443044404410:### Get y and y_hat; output=(y or y_hat)
1443044404410:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443044404411:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1443044404411:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443044404411:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443044404412:if(is.null(predictions)) {
1443044404412:subset <- unique(txs)
1443044404412:} else {
1443044404413:subset <- names(predictions)
1443044404413:}
1443044404413:#o <- matrix(c(0), nrow=length(subset), ncol=length(unique(terms)))
1443044404413:#dimnames(o) <- list(unique(txs), unique(terms))
1443044404414:if(output=="y") {
1443044404414:o <- mclapply(subset, function(tx) {
1443044404414:hits <- as.character(unique(terms[txs == tx]))
1443044404415:oo <- as.numeric(unique(terms) %in% hits)
1443044404415:names(oo) <- as.character(unique(terms))
1443044404415:oo
1443044404415:}, mc.cores=NCPU)
1443044404416:} else if(output=="y_hat") { # if predictons !null
1443044404416:o <- mclapply(subset, function(tx) {
1443044404416:hits <- subset[names(tx)==tx] #TODO!!!!
1443044404417:oo <- as.numeric(colnames(o) %in% hits)
1443044404417:}, mc.cores=NCPU)
1443044404417:} else {
1443044404418:print('"output should be either "y" or "y_hat"')
1443044404418:}
1443044404418:o
1443044404419:}
1443044411077:y <- y.labels("y", predictions)
1443044431597:predictions[[1]]
1443044457373:y[[1]]
1443044477170:sum(names(y) == names(predictions[[1]]))
1443044483920:names(y) == names(predictions[[1]])
1443044489470:names(y)
1443044496421:sum(names(y[[1]]) == names(predictions[[1]]))
1443044505021:names(y[[1]])
1443044515194:names(predictions[[1]])
1443044527221:sum(names(y[[1]]) %in% names(predictions[[1]]))
1443044540750:sum(!(names(y[[1]]) %in% names(predictions[[1]])))
1443044803619:length(names(predictions[[1]]))
1443044811420:length(names(y[[1]])
1443044812820:)
1443045036473:predictions <- predict.annotations.knn(Xp, GO, tx_input_list = rownames(Xp))
1443045045803:predictions <- predict.annotations.knn(Xp, GO, 9606, tx_input_list = rownames(Xp))
1443106913382:pred_table <- as.data.frame(predictions)
1443108119003:names(pred_table)
1443108133345:View(predict.annotations.knn)
1443108133520:View(predict.annotations.knn)
1443108144023:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1443108144024:taxon.id = as.character(taxon.id)
1443108144024:At = A$annotation[[taxon.id]]
1443108144024:background = intersect(unique(unlist(At)), rownames(X))
1443108144025:r = most.correlated(X, subset=background, tx_input_list, k)
1443108144025:#r = top.correlated(X, subset=background, k=k)
1443108144026:mclapply(r, function(c1) { # dla każdego transkryptu
1443108144026:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443108144026:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443108144027:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443108144027:oo = NULL
1443108144027:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443108144028:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443108144028:if (ct[1,1] >= min.count) {
1443108144029:fet = fisher.test(ct)
1443108144029:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443108144029:#oo = as.numeric(fet$estimate)
1443108144030:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1443108144030:}
1443108144030:}
1443108144031:unlist(o)
1443108144031:})
1443108144032:# unlist(o)
1443108144032:}, mc.cores=NCPU)
1443108144033:}
1443108164568:X = X[,apply(X,2,var) > 0]
1443108179527:X = read.table("expression.gene.v2.tsv")
1443108189298:preprocess = function(X) {
1443108189299:require(limma)
1443108189299:# remove genes & samples w/ zero variance
1443108189299:X = X[apply(X,1,var) > 0,]
1443108189299:X = X[,apply(X,2,var) > 0]
1443108189299:stopifnot(nrow(X) > 0)
1443108189300:stopifnot(ncol(X) > 0)
1443108189300:# quantile normalize
1443108189300:normalizeBetweenArrays(as.matrix(X))
1443108189301:}
1443108189302:# Turn into sra ids. Duplicate entries should be left duplicate
1443108189302:name.to.id <- function(X, ref=geneid2name, to="id") {
1443108189302:require(parallel)
1443108189303:if(to=="id") {
1443108189303:names(ref)[(names(ref)=="Gene.ID")] <- "to"
1443108189303:names(ref)[(names(ref)=="Gene.name")] <- "from"
1443108189304:} else if (to=="name") {
1443108189304:names(ref)[(names(ref)=="Gene.name")] <- "to"
1443108189304:names(ref)[(names(ref)=="Gene.ID")] <- "from"
1443108189304:} else {
1443108189305:stop("wrong 'to' arg")
1443108189305:}
1443108189305:new <- ref[(ref$from %in% rownames(X)),]
1443108189306:o <- mclapply(new$from, function(e) {
1443108189306:oo <- X[(rownames(X) == e),]
1443108189307:unlist(oo)
1443108189307:}, mc.cores = NCPU)
1443108189307:o <- t(as.data.frame(o))
1443108189308:rownames(o) <- new$to
1443108189308:#if(length(unique(rownames(o)) != length(rownames(o)))) {
1443108189309:o
1443108189309:}
1443108189311:##############
1443108189311:# Correlations
1443108189311:##############
1443108189311:# the slow version, for matrices containing NaN, could be used as a fallback
1443108189312:#top.correlated = function(X, k=50) {
1443108189312:#    k = min(k,nrow(X)-1)
1443108189312:#    Xt = t(X)
1443108189313:#    o = mclapply(colnames(Xt), function(ix) {
1443108189313:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1443108189313:#        r = r[!is.na(r)]
1443108189314:#        o = NULL
1443108189314:#        if (length(r) >= k) {
1443108189314:#            o = names(r)[order(r, decreasing=T)]
1443108189314:#        }
1443108189314:#        o
1443108189315:#    }, mc.cores=NCPU)
1443108189315:#    names(o) = colnames(Xt)
1443108189315:#    o
1443108189316:#}
1443108189316:top.correlated = function(X, subset=NULL, k=50) {
1443108189317:require(parallel)
1443108189317:k = min(k, nrow(X) - 1)
1443108189317:X = as.matrix(X)
1443108189318:stopifnot(sum(is.na(X)) == 0)
1443108189318:Xs = t(apply(X,1,scale))
1443108189318:o = mclapply(1:nrow(Xs), function(i) {
1443108189319:if ((i > 0) && (i %% 100 == 0)) {
1443108189319:sprintf("Calculating correlations for row: %d", i)
1443108189320:}
1443108189320:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1443108189320:oo = names(r)[order(r, decreasing=T)]
1443108189320:if (!is.null(subset)) {
1443108189321:oo = oo[oo %in% subset]
1443108189321:}
1443108189321:oo[1:min(k, length(oo))]
1443108189322:}, mc.cores=NCPU)
1443108189322:names(o) = rownames(Xs)
1443108189322:o
1443108189323:}
1443108189324:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1443108189324:require(parallel)
1443108189325:#TODO check if tx_input in subset
1443108189325:tx_input_list <- as.character(tx_input_list)
1443108189325:if (!is.null(subset)) {
1443108189325:X = X[rownames(X) %in% subset,]
1443108189325:}
1443108189326:X <- t(X)
1443108189326:Xi <- X[,(colnames(X) %in% tx_input_list)]
1443108189326:out <- mclapply(1:ncol(Xi),
1443108189327:function(i) {
1443108189327:new <- cor(X, Xi[,i])
1443108189327:names <- rownames(new)
1443108189327:oo <- as.vector(new)
1443108189328:names(oo) <- names
1443108189328:oo
1443108189328:},
1443108189329:mc.cores=NCPU )
1443108189329:names(out) <- colnames(Xi)
1443108189330:out
1443108189330:}
1443108189331:most.correlated <- function(X, subset=NULL, tx_input_list, k) {
1443108189331:# X - output of correlation.selected()
1443108189331:out <- correlation.selected(X, subset, tx_input_list)
1443108189331:out <- mclapply(out,
1443108189332:function(tx) { names(tx)[order(tx, decreasing = T)][2:(k+1)] },
1443108189332:mc.cores=NCPU
1443108189332:)
1443108189332:#out <- matrix(unlist(out), ncol=ncol(X))
1443108189333:#rownames(out) <- NULL
1443108189333:#names(out) <- tx_input_list
1443108189333:out
1443108189333:}
1443108189334:#######################################
1443108189334:# Function prediction by kNN FET method
1443108189334:#######################################
1443108243851:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2100]
1443108244793:Xp.q = Xp[q,]
1443108261270:sum(Xp.q == "221150")
1443108280070:sum(rownames(Xp.q) == "221150")
1443108284398:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2200]
1443108285198:Xp.q = Xp[q,]
1443108291199:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1443108331409:X = read.table("expression.gene.v2.tsv")
1443108337448:Xp = preprocess(X)
1443108358651:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2200]
1443108358720:Xp.q = Xp[q,]
1443108358722:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1443108671630:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443108671631:taxon.id = as.character(taxon.id)
1443108671631:if(!is.null(tx_input_list)) {
1443108671631:tx_input_list <- as.character(tx_input_list)
1443108671632:} else {
1443108671632:tx_input_list <- as.character(rownames(X))
1443108671632:}
1443108671633:At = A$annotation[[taxon.id]]
1443108671633:background = intersect(unique(unlist(At)), rownames(X))
1443108671634:r = most.correlated(X, subset=background, tx_input_list, k)
1443108671634:#r = top.correlated(X, subset=background, k=k)
1443108671635:mclapply(r, function(c1) { # dla każdego transkryptu
1443108671635:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443108671635:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443108671636:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443108671636:oo = NULL
1443108671636:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443108671637:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443108671637:if (ct[1,1] >= min.count) {
1443108671637:fet = fisher.test(ct)
1443108671638:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443108671639:#oo = as.numeric(fet$estimate)
1443108671639:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1443108671639:}
1443108671640:}
1443108671640:unlist(o)
1443108671641:})
1443108671641:# unlist(o)
1443108671641:}, mc.cores=NCPU)
1443108671642:}
1443108682534:top.correlated = function(X, subset=NULL, k=50) {
1443108682535:require(parallel)
1443108682535:k = min(k, nrow(X) - 1)
1443108682535:X = as.matrix(X)
1443108682535:stopifnot(sum(is.na(X)) == 0)
1443108682536:Xs = t(apply(X,1,scale))
1443108682537:o = mclapply(1:nrow(Xs), function(i) {
1443108682537:if ((i > 0) && (i %% 100 == 0)) {
1443108682537:sprintf("Calculating correlations for row: %d", i)
1443108682537:}
1443108682538:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1443108682538:oo = names(r)[order(r, decreasing=T)]
1443108682538:if (!is.null(subset)) {
1443108682539:oo = oo[oo %in% subset]
1443108682539:}
1443108682539:oo[1:min(k, length(oo))]
1443108682540:}, mc.cores=NCPU)
1443108682540:names(o) = rownames(Xs)
1443108682540:o
1443108682541:}
1443108682543:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1443108682543:require(parallel)
1443108682543:#TODO check if tx_input in subset
1443108682543:if (!is.null(subset)) {
1443108682544:X = X[rownames(X) %in% subset,]
1443108682544:}
1443108682544:X <- t(X)
1443108682545:Xi <- X[,(colnames(X) %in% tx_input_list)]
1443108682545:out <- mclapply(1:ncol(Xi),
1443108682545:function(i) {
1443108682546:new <- cor(X, Xi[,i])
1443108682546:names <- rownames(new)
1443108682546:oo <- as.vector(new)
1443108682547:names(oo) <- names
1443108682547:oo
1443108682547:},
1443108682548:mc.cores=NCPU )
1443108682548:names(out) <- colnames(Xi)
1443108682548:out
1443108682549:}
1443108682550:most.correlated <- function(X, subset=NULL, tx_input_list, k) {
1443108682551:# X - output of correlation.selected()
1443108682551:out <- correlation.selected(X, subset, tx_input_list)
1443108682551:out <- mclapply(out,
1443108682552:function(tx) { names(tx)[order(tx, decreasing = T)][2:(k+1)] },
1443108682552:mc.cores=NCPU
1443108682552:)
1443108682553:#out <- matrix(unlist(out), ncol=ncol(X))
1443108682553:#rownames(out) <- NULL
1443108682553:#names(out) <- tx_input_list
1443108682553:out
1443108682554:}
1443109255569:correlation.selected(Xp.q)
1443109270780:correlation.selected <- function(X, subset=NULL, tx_input_list=NULL) {
1443109270780:require(parallel)
1443109270781:#TODO check if tx_input in subset
1443109270781:if (!is.null(subset)) {
1443109270781:X = X[rownames(X) %in% subset,]
1443109270781:}
1443109270782:X <- t(X)
1443109270783:if(!is.null(tx_input_list)) {
1443109270783:tx_input_list <- as.character(tx_input_list)
1443109270783:} else {
1443109270783:tx_input_list <- as.character(rownames(X))
1443109270784:}
1443109270784:Xi <- X[,(colnames(X) %in% tx_input_list)]
1443109270785:out <- mclapply(1:ncol(Xi),
1443109270785:function(i) {
1443109270785:new <- cor(X, Xi[,i])
1443109270786:names <- rownames(new)
1443109270786:oo <- as.vector(new)
1443109270786:names(oo) <- names
1443109270787:oo
1443109270787:},
1443109270787:mc.cores=NCPU )
1443109270788:names(out) <- colnames(Xi)
1443109270788:out
1443109270788:}
1443109270789:most.correlated <- function(X, subset=NULL, tx_input_list=NULL, k=50) {
1443109270789:# X - output of correlation.selected()
1443109270790:out <- correlation.selected(X, subset, tx_input_list)
1443109270790:out <- mclapply(out,
1443109270790:function(tx) { names(tx)[order(tx, decreasing = T)][2:(k+1)] },
1443109270791:mc.cores=NCPU
1443109270791:)
1443109270791:#out <- matrix(unlist(out), ncol=ncol(X))
1443109270792:#rownames(out) <- NULL
1443109270792:#names(out) <- tx_input_list
1443109270792:out
1443109270792:}
1443109319379:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443109319380:taxon.id = as.character(taxon.id)
1443109319380:At = A$annotation[[taxon.id]]
1443109319380:background = intersect(unique(unlist(At)), rownames(X))
1443109319381:r = most.correlated(X, subset=background, tx_input_list, k)
1443109319381:#r = top.correlated(X, subset=background, k=k)
1443109319382:mclapply(r, function(c1) { # dla każdego transkryptu
1443109319382:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443109319382:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443109319382:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443109319383:oo = NULL
1443109319383:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443109319383:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443109319384:if (ct[1,1] >= min.count) {
1443109319384:fet = fisher.test(ct)
1443109319384:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443109319385:#oo = as.numeric(fet$estimate)
1443109319385:oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443109319385:}
1443109319386:}
1443109319386:unlist(o)
1443109319386:})
1443109319387:# unlist(o)
1443109319387:}, mc.cores=NCPU)
1443109319388:}
1443109328649:most.correlated(Xp.q)
1443109372945:correlation.selected(Xp.q, tx_input_list = c("221150"))
1443109397371:rownames(Xp.q)
1443109412556:rownames(Xp.q) == "221150"
1443109439695:correlation.selected(Xp.q
1443109441653:)
1443109467670:View(Xp.q)
1443109493882:Xp.q = Xp[q,]
1443109555333:Xp.q = as.matrix(Xp[q,])
1443109812898:subset=NULL, tx_input_list=NULL
1443109820594:subset=NULL
1443109823845:tx_input_list=NULL
1443109830820:if (!is.null(subset)) {
1443109831005:X = X[rownames(X) %in% subset,]
1443109831178:}
1443109908702:correlation.selected <- function(X, subset=NULL, tx_input_list=NULL) {
1443109908703:require(parallel)
1443109908703:#TODO check if tx_input in subset
1443109908703:if (!is.null(subset)) {
1443109908703:X = X[rownames(X) %in% subset,]
1443109908704:}
1443109908704:if(!is.null(tx_input_list)) {
1443109908704:tx_input_list <- as.character(tx_input_list)
1443109908705:} else {
1443109908705:tx_input_list <- as.character(rownames(X))
1443109908705:}
1443109908705:X <- t(X)
1443109908706:Xi <- X[,(colnames(X) %in% tx_input_list)]
1443109908706:out <- mclapply(1:ncol(Xi),
1443109908706:function(i) {
1443109908707:new <- cor(X, Xi[,i])
1443109908707:names <- rownames(new)
1443109908707:oo <- as.vector(new)
1443109908708:names(oo) <- names
1443109908708:oo
1443109908708:},
1443109908708:mc.cores=NCPU )
1443109908709:names(out) <- colnames(Xi)
1443109908709:out
1443109908709:}
1443109922620:most.correlated(Xp.q)
1443109975324:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443109975324:taxon.id = as.character(taxon.id)
1443109975325:At = A$annotation[[taxon.id]]
1443109975325:background = intersect(unique(unlist(At)), rownames(X))
1443109975325:r = most.correlated(X, subset=background, tx_input_list, k)
1443109975325:#r = top.correlated(X, subset=background, k=k)
1443109975326:mclapply(r, function(c1) { # dla każdego transkryptu
1443109975326:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443109975327:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443109975327:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443109975327:oo = NULL
1443109975327:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443109975328:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443109975328:if (ct[1,1] >= min.count) {
1443109975328:fet = fisher.test(ct)
1443109975329:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443109975329:#oo = as.numeric(fet$estimate)
1443109975330:oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443109975330:}
1443109975331:}
1443109975331:unlist(o)
1443109975331:})
1443109975332:# unlist(o)
1443109975332:}, mc.cores=NCPU)
1443109975333:}
1443110012120:predict.annotations.knn(Xp.q, 9606, tx_input_list = c("55, 221150"))
1443110017050:predict.annotations.knn(Xp.q, 9606, tx_input_list = c("55", "221150"))
1443110023045:predict.annotations.knn(Xp.q, GO, 9606, tx_input_list = c("55", "221150"))
1443110054895:predict.annotations.knn(Xp.q, 9606)
1443110059450:predict.annotations.knn(Xp.q, GO, 9606)
1443110099898:predict.annotations.knn(Xp.q, GO, 9606, tx_input_list = c("221150"))
1443110135058:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443110135058:taxon.id = as.character(taxon.id)
1443110135058:At = A$annotation[[taxon.id]]
1443110135059:background = intersect(unique(unlist(At)), rownames(X))
1443110135059:r = most.correlated(X, subset=background, tx_input_list, k)
1443110135060:#r = top.correlated(X, subset=background, k=k)
1443110135060:mclapply(r, function(c1) { # dla każdego transkryptu
1443110135060:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443110135061:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443110135061:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443110135062:oo = NULL
1443110135062:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443110135062:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443110135062:if (ct[1,1] >= min.count) {
1443110135063:fet = fisher.test(ct)
1443110135063:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443110135063:#oo = as.numeric(fet$estimate)
1443110135064:oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443110135064:}
1443110135065:}
1443110135065:})
1443110135065:unlist(o)
1443110135066:}, mc.cores=NCPU)
1443110135066:}
1443110145330:predict.annotations.knn(Xp.q, GO, 9606, tx_input_list = c("221150"))
1443110162070:predict.annotations.knn(Xp.q, GO, 9606)
1443110232370:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1443110475256:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443110475257:taxon.id = as.character(taxon.id)
1443110475257:At = A$annotation[[taxon.id]]
1443110475257:background = intersect(unique(unlist(At)), rownames(X))
1443110475257:r = most.correlated(X, subset=background, tx_input_list, k)
1443110475258:#r = top.correlated(X, subset=background, k=k)
1443110475258:mclapply(r, function(c1) { # dla każdego transkryptu
1443110475259:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443110475259:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443110475259:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443110475260:oo = NULL
1443110475260:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443110475261:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443110475261:if (ct[1,1] >= min.count) {
1443110475261:fet = fisher.test(ct)
1443110475262:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443110475262:#oo = as.numeric(fet$estimate)
1443110475262:oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443110475263:} else {
1443110475263:oo <- NA
1443110475263:}
1443110475264:} else {
1443110475264:oo <- NA
1443110475265:}
1443110475265:})
1443110475265:unlist(o)
1443110475266:}, mc.cores=NCPU)
1443110475266:}
1443110481578:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1443112042435:subset.top.annotations <- function(predictions, how.many=NULL) {
1443112042436:mclapply(predictions, functions(tx) {
1443112042436:o <- tx[is.na(tx)]
1443112042437:if(!is.null) {
1443112042437:o <- o[1:how.many]
1443112042437:}
1443112042438:o
1443112042439:}, mc.cores=NCPU)
1443112042439:}
1443112121933:subset.top.annotations <- function(predictions, how.many=NULL) {
1443112121933:mclapply(predictions, function(tx) {
1443112121933:o <- tx[is.na(tx)]
1443112121934:if(!is.null) {
1443112121934:o <- o[1:how.many]
1443112121934:}
1443112121934:o
1443112121935:}, mc.cores=NCPU)
1443112121935:}
1443112125753:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1443112226899:top <- subset.top.annotations(predictions, 20)
1443112243995:predictions[[1]]
1443112326470:subset.top.annotations <- function(predictions, how.many=NULL) {
1443112326471:mclapply(predictions, function(tx) {
1443112326471:o <- tx[!is.na(tx)]
1443112326471:if(!is.null(how.many)) {
1443112326471:o <- o[1:min(how.many, length(o))]
1443112326472:}
1443112326472:o
1443112326472:}, mc.cores=NCPU)
1443112326473:}
1443112330720:top <- subset.top.annotations(predictions, 20)
1443112337170:top[1]
1443112360095:sort(top[1])
1443112367495:sort(top[[1]])
1443112462527:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443112462527:mclapply(predictions, function(tx) {
1443112462528:o <- sort(tx[!is.na(tx)])
1443112462528:o <- o[o<p.thr]
1443112462528:if(!is.null(how.many)) {
1443112462528:o <- o[1:min(how.many, length(o))]
1443112462529:}
1443112462529:o
1443112462529:}, mc.cores=NCPU)
1443112462529:}
1443112471970:top <- subset.top.annotations(predictions, 20)
1443112486371:top[[1]]
1443112516330:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443112516549:mclapply(predictions, function(tx) {
1443112516785:o <- sort(tx[!is.na(tx)])
1443112516785:o <- o[o<p.thr & o>0]
1443112517174:if(!is.null(how.many)) {
1443112517175:o <- o[1:min(how.many, length(o))]
1443112517565:}
1443112517566:o
1443112518000:}, mc.cores=NCPU)
1443112518318:}
1443112524945:top <- subset.top.annotations(predictions, 20)
1443112538825:top[[2]]
1443112560322:top_pred <- top
1443112562820:rm(top)
1443112819294:predictions <- predict.annotations.knn(Xp, GO, 9606)
1443114703760:###############
1443114703761:# Preprocessing
1443114703761:###############
1443114703762:# Other possibilities:
1443114703762:# - use a min mean and min variance cutoff to reduce # of genes (faster downstream processing w/o much loss)
1443114703762:# - if there are missing values, impute using knnimpute or similar
1443114703762:preprocess = function(X) {
1443114703763:require(limma)
1443114703763:# remove genes & samples w/ zero variance
1443114703763:X = X[apply(X,1,var) > 0,]
1443114703763:X = X[,apply(X,2,var) > 0]
1443114703763:stopifnot(nrow(X) > 0)
1443114703764:stopifnot(ncol(X) > 0)
1443114703764:# quantile normalize
1443114703764:normalizeBetweenArrays(as.matrix(X))
1443114703765:}
1443114703765:# Turn into sra ids. Duplicate entries should be left duplicate
1443114703765:name.to.id <- function(X, ref=geneid2name, to="id") {
1443114703766:require(parallel)
1443114703766:if(to=="id") {
1443114703766:names(ref)[(names(ref)=="Gene.ID")] <- "to"
1443114703766:names(ref)[(names(ref)=="Gene.name")] <- "from"
1443114703766:} else if (to=="name") {
1443114703767:names(ref)[(names(ref)=="Gene.name")] <- "to"
1443114703767:names(ref)[(names(ref)=="Gene.ID")] <- "from"
1443114703767:} else {
1443114703767:stop("wrong 'to' arg")
1443114703768:}
1443114703768:new <- ref[(ref$from %in% rownames(X)),]
1443114703768:o <- mclapply(new$from, function(e) {
1443114703769:oo <- X[(rownames(X) == e),]
1443114703769:unlist(oo)
1443114703769:}, mc.cores = NCPU)
1443114703769:o <- t(as.data.frame(o))
1443114703770:rownames(o) <- new$to
1443114703770:#if(length(unique(rownames(o)) != length(rownames(o)))) {
1443114703771:o
1443114703771:}
1443114703771:##############
1443114703772:# Correlations
1443114703772:##############
1443114703772:# the slow version, for matrices containing NaN, could be used as a fallback
1443114703772:#top.correlated = function(X, k=50) {
1443114703773:#    k = min(k,nrow(X)-1)
1443114703773:#    Xt = t(X)
1443114703773:#    o = mclapply(colnames(Xt), function(ix) {
1443114703773:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1443114703773:#        r = r[!is.na(r)]
1443114703773:#        o = NULL
1443114703774:#        if (length(r) >= k) {
1443114703774:#            o = names(r)[order(r, decreasing=T)]
1443114703774:#        }
1443114703774:#        o
1443114703774:#    }, mc.cores=NCPU)
1443114703775:#    names(o) = colnames(Xt)
1443114703775:#    o
1443114703775:#}
1443114703775:top.correlated = function(X, subset=NULL, k=50) {
1443114703775:require(parallel)
1443114703776:k = min(k, nrow(X) - 1)
1443114703776:X = as.matrix(X)
1443114703776:stopifnot(sum(is.na(X)) == 0)
1443114703776:Xs = t(apply(X,1,scale))
1443114703777:o = mclapply(1:nrow(Xs), function(i) {
1443114703777:if ((i > 0) && (i %% 100 == 0)) {
1443114703777:sprintf("Calculating correlations for row: %d", i)
1443114703777:}
1443114703777:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1443114703778:oo = names(r)[order(r, decreasing=T)]
1443114703778:if (!is.null(subset)) {
1443114703778:oo = oo[oo %in% subset]
1443114703778:}
1443114703779:oo[1:min(k, length(oo))]
1443114703779:}, mc.cores=NCPU)
1443114703779:names(o) = rownames(Xs)
1443114703780:o
1443114703780:}
1443114703781:correlation.selected <- function(X, subset=NULL, tx_input_list=NULL) {
1443114703781:require(parallel)
1443114703781:#TODO check if tx_input in subset
1443114703781:if (!is.null(subset)) {
1443114703781:X = X[rownames(X) %in% subset,]
1443114703782:}
1443114703782:if(!is.null(tx_input_list)) {
1443114703782:tx_input_list <- as.character(tx_input_list)
1443114703782:} else {
1443114703783:tx_input_list <- as.character(rownames(X))
1443114703783:}
1443114703783:X <- t(X)
1443114703783:Xi <- X[,(colnames(X) %in% tx_input_list)]
1443114703784:out <- mclapply(1:ncol(Xi),
1443114703784:function(i) {
1443114703784:new <- cor(X, Xi[,i])
1443114703784:names <- rownames(new)
1443114703785:oo <- as.vector(new)
1443114703785:names(oo) <- names
1443114703785:oo
1443114703786:},
1443114703786:mc.cores=NCPU )
1443114703786:names(out) <- colnames(Xi)
1443114703787:out
1443114703787:}
1443114703787:most.correlated <- function(X, subset=NULL, tx_input_list=NULL, k=50) {
1443114703788:# X - output of correlation.selected()
1443114703788:out <- correlation.selected(X, subset, tx_input_list)
1443114703788:out <- mclapply(out,
1443114703788:function(tx) { names(tx)[order(tx, decreasing = T)][2:(k+1)] },
1443114703789:mc.cores=NCPU
1443114703789:)
1443114703789:#out <- matrix(unlist(out), ncol=ncol(X))
1443114703789:#rownames(out) <- NULL
1443114703790:#names(out) <- tx_input_list
1443114703790:out
1443114703790:}
1443114703791:#######################################
1443114703791:# Function prediction by kNN FET method
1443114703791:#######################################
1443114703791:# could improve to output p-value, odds ratio ("estimate") + log(OR), and N for each term-gene pair
1443114703792:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443114703792:taxon.id = as.character(taxon.id)
1443114703792:At = A$annotation[[taxon.id]]
1443114703792:background = intersect(unique(unlist(At)), rownames(X))
1443114703792:r = most.correlated(X, subset=background, tx_input_list, k)
1443114703793:#r = top.correlated(X, subset=background, k=k)
1443114703793:mclapply(r, function(c1) { # dla każdego transkryptu
1443114703793:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443114703794:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443114703794:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443114703794:oo = NULL
1443114703794:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443114703795:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443114703795:if (ct[1,1] >= min.count) {
1443114703795:fet = fisher.test(ct)
1443114703796:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443114703796:#oo = as.numeric(fet$estimate)
1443114703796:oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443114703796:} else {
1443114703797:oo <- NA
1443114703797:}
1443114703797:} else {
1443114703798:oo <- NA
1443114703798:}
1443114703798:})
1443114703799:unlist(o)
1443114703799:}, mc.cores=NCPU)
1443114703800:}
1443114703800:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443114703801:mclapply(predictions, function(tx) {
1443114703801:o <- sort(tx[!is.na(tx)])
1443114703801:o <- o[o<p.thr & o>0]
1443114703801:if(!is.null(how.many)) {
1443114703802:o <- o[1:min(how.many, length(o))]
1443114703802:}
1443114703802:o
1443114703802:}, mc.cores=NCPU)
1443114703803:}
1443114703803:### Get y and y_hat; output=(y or y_hat)
1443114703803:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443114703804:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1443114703804:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443114703804:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443114703804:if(is.null(predictions)) {
1443114703805:subset <- unique(txs)
1443114703805:} else {
1443114703805:subset <- names(predictions)
1443114703805:}
1443114703806:#o <- matrix(c(0), nrow=length(subset), ncol=length(unique(terms)))
1443114703806:#dimnames(o) <- list(unique(txs), unique(terms))
1443114703806:if(output=="y") {
1443114703806:o <- mclapply(subset, function(tx) {
1443114703807:hits <- as.character(unique(terms[txs == tx]))
1443114703807:oo <- as.numeric(unique(terms) %in% hits)
1443114703807:names(oo) <- as.character(unique(terms))
1443114703808:oo
1443114703808:}, mc.cores=NCPU)
1443114703808:} else if(output=="y_hat") { # if predictons !null
1443114703808:o <- mclapply(subset, function(tx) {
1443114703809:hits <- subset[names(tx)==tx] #TODO!!!!
1443114703809:oo <- as.numeric(colnames(o) %in% hits)
1443114703809:}, mc.cores=NCPU)
1443114703810:} else {
1443114703810:print('"output should be either "y" or "y_hat"')
1443114703810:}
1443114703811:o
1443114703811:}
1443114703812:### Performance metrics
1443114703812:### COMPARISON
1443114703813:most.correlated.gene.names <- function(Xp, subset="221150", from="id", ref=geneid2name) { #make versatile so that can get any: names, desc, ...
1443114703813:# map first column OR use col names
1443114703813:# from: "id", "name"
1443114703813:r <- cor(t(Xp), Xp[rownames(Xp) %in% subset,])
1443114703813:r <- as.data.frame(r)
1443114703814:r$from <- rownames(r)
1443114703814:r <- r[order(r$V1, decreasing = T),]
1443114703814:#r <- r[2:50,]
1443114703815:z <- (merge(r, ref, all=F, by.x="from", by.y="Gene.ID", sort=F))
1443114703815:#names(z)[1:2] <- c("Gene.Name", "correlation")
1443114703815:#z <- z[,c(1,3,2,4)]
1443114703815:}
1443114703816:# rownames.class()
1443114703816:id.or.name <- function(names, ref=geneid2name) {
1443114703816:if(sum(names %in% ref$Gene.ID) > sum(names %in% ref$Gene.name)) {
1443114703816:o="id"
1443114703817:} else {
1443114703817:o="name"
1443114703817:}
1443114703817:o
1443114703817:}
1443114703818:make.comparable <- function(X, M) { #raw matrices or after preprocessing
1443114703818:#M <- tcga.expression.matrix(disease_list[1:5], 50)
1443114703818:Mp <- name.to.id(M, geneid2name)
1443114703819:Mp <- preprocess(Mp)
1443114703819:Xp <- preprocess(X)
1443114703819:shared <- intersect(rownames(Xp), rownames(Mp))
1443114703819:Mp.s <- Mp[(rownames(Mp) %in% shared),]
1443114703820:Xp.s <- Xp[(rownames(Xp) %in% shared),]
1443114703820:o <- list(Xp.s, Mp.s)
1443114703820:#plot(rowSums(Xp.s), rowSums(Mp.s))
1443114703821:}
1443114703821:############# !FUNCTIONS
1443114703821:library(parallel)
1443114703845:library(limma)
1443114704138:library(AUC)
1443114704160:# Globals
1443114704161:NCPU = detectCores()
1443114704175:CACHE.DIR = "cache"
1443114704175:if (!dir.exists(CACHE.DIR)) {
1443114704175:dir.create(CACHE.DIR)
1443114704175:}
1443114717243:library(parallel)
1443114717407:library(limma)
1443114717576:library(AUC)
1443114718470:NCPU = detectCores()
1443114731807:X = read.table("expression.gene.v2.tsv")
1443114739502:Xp = preprocess(X)
1443114754454:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2200]
1443114755436:Xp.q = Xp[q,]
1443114760232:print(predictions)
1443116448368:?fisher.test
1443116668047:?"AUC-package"
1443116671940:?specificity
1443117175217:x <- matrix(c(100,10,10,100)); fisher.test(x)
1443117181316:x <- matrix(c(100,10,10,100),2,2); fisher.test(x)
1443117208619:x <- matrix(c(10,100,100,10),2,2); fisher.test(x)
1443117419049:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443117419049:taxon.id = as.character(taxon.id)
1443117419049:At = A$annotation[[taxon.id]]
1443117419049:background = intersect(unique(unlist(At)), rownames(X))
1443117419050:r = most.correlated(X, subset=background, tx_input_list, k)
1443117419050:#r = top.correlated(X, subset=background, k=k)
1443117419050:mclapply(r, function(c1) { # dla każdego transkryptu
1443117419051:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443117419051:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443117419051:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443117419051:oo = NULL
1443117419052:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443117419052:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443117419052:if (ct[1,1] >= min.count) {
1443117419053:fet = fisher.test(ct)
1443117419053:oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443117419053:#oo = as.numeric(fet$estimate)
1443117419054:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443117419054:} else {
1443117419054:oo <- NA
1443117419054:}
1443117419055:} else {
1443117419055:oo <- NA
1443117419056:}
1443117419056:})
1443117419056:unlist(o)
1443117419057:}, mc.cores=NCPU)
1443117419057:}
1443117452416:predictions_s <- predict.annotations.knn(Xp.q, GO, 9606)
1443117496518:predictions_s[1][1]\
1443117498653:predictions_s[1][1]
1443117563414:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443117563415:taxon.id = as.character(taxon.id)
1443117563415:At = A$annotation[[taxon.id]]
1443117563415:background = intersect(unique(unlist(At)), rownames(X))
1443117563415:r = most.correlated(X, subset=background, tx_input_list, k)
1443117563416:#r = top.correlated(X, subset=background, k=k)
1443117563416:mclapply(r, function(c1) { # dla każdego transkryptu
1443117563416:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443117563417:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443117563417:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443117563417:oo = NULL
1443117563417:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443117563418:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443117563418:if (ct[1,1] >= min.count) {
1443117563418:fet = fisher.test(ct)
1443117563419:oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443117563419:#oo = as.numeric(fet$estimate)
1443117563419:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443117563420:} else {
1443117563420:oo <- NA
1443117563420:}
1443117563421:} else {
1443117563421:oo <- NA
1443117563421:}
1443117563422:})
1443117563422:#unlist(o)
1443117563422:}, mc.cores=NCPU)
1443117563423:}
1443117581895:predictions_s <- predict.annotations.knn(Xp.q, GO, 9606)
1443117761514:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443117761514:taxon.id = as.character(taxon.id)
1443117761514:At = A$annotation[[taxon.id]]
1443117761515:background = intersect(unique(unlist(At)), rownames(X))
1443117761515:r = most.correlated(X, subset=background, tx_input_list, k)
1443117761515:#r = top.correlated(X, subset=background, k=k)
1443117761516:mclapply(r, function(c1) { # dla każdego transkryptu
1443117761516:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443117761516:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443117761516:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443117761517:oo = NULL
1443117761517:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443117761517:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443117761518:if (ct[1,1] >= min.count) {
1443117761518:fet = fisher.test(ct)
1443117761518:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443117761519:oo = as.numeric(fet$estimate)
1443117761519:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443117761519:} else {
1443117761520:oo <- NA
1443117761520:}
1443117761520:} else {
1443117761521:oo <- NA
1443117761521:}
1443117761521:})
1443117761522:unlist(o)
1443117761522:}, mc.cores=NCPU)
1443117761522:}
1443117770531:predictions_s <- predict.annotations.knn(Xp.q, GO, 9606)
1443117826002:predictions_s[1]
1443117933753:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443117933754:mclapply(predictions, function(tx) {
1443117933754:o <- sort(tx[!is.na(tx)])
1443117933754:#o <- o[o<p.thr & o>0]
1443117933754:if(!is.null(how.many)) {
1443117933754:o <- o[1:min(how.many, length(o))]
1443117933755:}
1443117933755:o
1443117933755:}, mc.cores=NCPU)
1443117933755:}
1443117937870:top_s <- subset.top.annotations(predictions_s)
1443117945449:top_s
1443118032842:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443118033070:mclapply(predictions, function(tx) {
1443118033296:o <- sort(tx[!is.na(tx)])
1443118033323:o <- o[o!= Inf]
1443118033556:#o <- o[o<p.thr & o>0]
1443118033944:if(!is.null(how.many)) {
1443118033945:o <- o[1:min(how.many, length(o))]
1443118034339:}
1443118034674:o
1443118035003:}, mc.cores=NCPU)
1443118035440:}
1443118041520:top_s <- subset.top.annotations(predictions_s)
1443118044870:top_s
1443118218634:get.y.hat <- function(predictions) {
1443118218634:mclapply(predictions, function(tx) {
1443118218635:o <- sort(tx)
1443118218635:o[is.na(o) | is.infinite(o)] <- 0
1443118218635:o
1443118218635:}, mc.cores=NCPU)
1443118218636:}
1443118222271:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443118222271:mclapply(predictions, function(tx) {
1443118222271:o <- sort(tx[!is.na(tx)])
1443118222271:o <- o[o<p.thr & o>0]
1443118222272:if(!is.null(how.many)) {
1443118222272:o <- o[1:min(how.many, length(o))]
1443118222272:}
1443118222272:o
1443118222273:}, mc.cores=NCPU)
1443118222273:}
1443118241270:y_hat <- get.y.hat(predictions )
1443118524758:y_hat <- as.data.frame(y_hat)
1443118554494:y_hat <- get.y.hat(predictions_S )
1443118564520:y_hat <- get.y.hat(predictions_s)
1443118599729:rm(get.y.hat())
1443118602470:rm(get.y.hat
1443118603695:)
1443118668211:y.hat.from.pred <- function(predictions) {
1443118668211:mclapply(predictions, function(tx) {
1443118668212:o[is.na(o) | is.infinite(o)] <- 0
1443118668212:#o <- sort(tx)
1443118668212:o
1443118668212:}, mc.cores=NCPU)
1443118668212:}
1443118674722:y_hat <- get.y.hat(predictions_s)
1443118689929:y_hat <- y.hat.from.pred(predictions_s)
1443118733002:y.hat.from.pred <- function(predictions) {
1443118733002:mclapply(predictions, function(tx) {
1443118733002:tx[is.na(o) | is.infinite(o)] <- 0
1443118733003:#o <- sort(tx)
1443118733003:tx
1443118733003:}, mc.cores=NCPU)
1443118733003:}
1443118735444:y_hat <- y.hat.from.pred(predictions_s)
1443118756495:y.hat.from.pred <- function(predictions) {
1443118756495:mclapply(predictions, function(tx) {
1443118756495:tx[is.na(tx) | is.infinite(tx)] <- 0
1443118756496:#o <- sort(tx)
1443118756496:tx
1443118756496:}, mc.cores=NCPU)
1443118756496:}
1443118758559:y_hat <- y.hat.from.pred(predictions_s)
1443118772556:y_hat <- as.data.frame(t_hat)
1443118780723:y_hat <- as.data.frame(y_hat)
1443118789394:View(y_hat)
1443118841755:View(y_hat)
1443118915564:y_hat <- y.hat.from.pred(predictions_s)
1443118921125:names(y_hat)
1443119004324:y_hat <- as.data.frame(y_hat)
1443119015002:names(y_hat)
1443119052453:names(y_hat) <- lapply(names(y_hat), function(n) {n<- n[-1]})
1443119054580:names(y_hat)
1443119078428:y_hat <- y.hat.from.pred(predictions_s)
1443119098895:str <- "XGTRXD"
1443119101572:str[1]
1443119105923:str[[1]
1443119108354:]
1443119120645:str[1][1]
1443119208877:substring(str, 2)
1443119301475:names(y_hat)
1443119311020:y_hat <- as.data.frame(y_hat)
1443119313995:names(y_hat)
1443119364132:names(y_hat) <- apply(names(y_hat, function(n) { substr(n, 2) } ))
1443119370371:names(y_hat) <- lapply(names(y_hat, function(n) { substr(n, 2) } ))
1443119383620:names(y_hat) <- apply(names(y_hat), function(n) { substr(n, 2) } )
1443119388470:names(y_hat) <- lapply(names(y_hat), function(n) { substr(n, 2) } )
1443119406981:names(y_hat) <- lapply(names(y_hat), function(n) { substring(n, 2) } )
1443119414495:names(y_hat)
1443119458923:y.hat.from.pred <- function(predictions, as.df=T) {
1443119458923:o <- mclapply(predictions, function(tx) {
1443119458924:tx[is.na(tx) | is.infinite(tx)] <- 0
1443119458924:tx
1443119458924:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443119458924:if(as.df) {
1443119458924:o <- as.data.frame(o)
1443119458925:names(o) <- lapply(names(y_hat), funtion(n) {substring(n,2)} )
1443119458925:}
1443119505716:y.hat.from.pred <- function(predictions, as.df=T) {
1443119505716:o <- mclapply(predictions, function(tx) {
1443119505716:tx[is.na(tx) | is.infinite(tx)] <- 0
1443119505717:tx
1443119505717:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443119505717:if(as.df) {
1443119505717:o <- as.data.frame(o)
1443119505718:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443119505718:}
1443119505718:}
1443119757420:y_hat <- t(y_hat)
1443120233633:y.labels <- function(output, predictions=NULL, A=GO, taxon.id = 9606) {
1443120233633:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443120233634:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443120233634:if(is.null(predictions)) {
1443120233634:subset <- unique(txs)
1443120233635:} else {
1443120233635:subset <- rownames(predictions)
1443120233635:}
1443120233636:o <- mclapply(subset, function(tx) {
1443120233636:terms==tx
1443120233636:}, mc.cores=NCPU)
1443120233637:}
1443120268423:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443120268424:y.labels <- function(A, predictions=NULL, taxon.id = 9606) {
1443120268424:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443120268424:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443120268424:if(is.null(predictions)) {
1443120268425:subset <- unique(txs)
1443120268425:} else {
1443120268425:subset <- rownames(predictions)
1443120268425:}
1443120268426:o <- mclapply(subset, function(tx) {
1443120268426:terms==tx
1443120268426:}, mc.cores=NCPU)
1443120268427:}
1443120326970:y_lab <- y.labels(GO, y_hat)
1443120341225:length(y_lab[[1]])
1443120488129:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443120488129:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443120488130:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443120488130:mclapply(rownames(y.hat), function(tx) {
1443120488131:terms==tx
1443120488131:}, mc.cores=NCPU)
1443120488131:}
1443120492450:length(y_lab[[1]])
1443120612374:### Get y and y_hat; output=(y or y_hat)
1443120612374:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443120612374:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443120612374:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443120612375:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443120612375:mclapply(rownames(y.hat), function(tx) {
1443120612375:oo <- as.numeric(terms==tx)
1443120612376:names(oo) <- terms
1443120612376:oo <- oo[names(oo) %in% colnames(y.hat)]
1443120612376:}, mc.cores=NCPU)
1443120612376:}
1443120618770:y_lab <- y.labels(GO, y_hat)
1443120653674:length(y_hat[[1]])
1443120730282:y.hat.from.pred <- function(predictions, as.df=F) {
1443120730282:o <- mclapply(predictions, function(tx) {
1443120730282:tx[is.na(tx) | is.infinite(tx)] <- 0
1443120730283:tx
1443120730283:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443120730283:if(as.df) {
1443120730283:o <- as.data.frame(o)
1443120730284:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443120730284:t(o)
1443120730284:}
1443120730284:}
1443120743299:y.hat.from.pred <- function(predictions, as.df=F) {
1443120743299:o <- mclapply(predictions, function(tx) {
1443120743299:tx[is.na(tx) | is.infinite(tx)] <- 0
1443120743299:tx
1443120743300:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443120743300:if(as.df) {
1443120743300:o <- as.data.frame(o)
1443120743300:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443120743301:t(o)
1443120743301:}
1443120743301:o
1443120743301:}
1443120762995:y_hat <- y.hat.from.pred(predictions_s)
1443120805195:y_lab <- y.labels(GO, y_hat)
1443120851852:### Get y and y_hat; output=(y or y_hat)
1443120851853:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443120851853:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443120851853:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443120851853:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443120851854:mclapply(names(y.hat), function(tx) {
1443120851854:oo <- as.numeric(terms==tx)
1443120851854:names(oo) <- terms
1443120851854:oo <- oo[names(oo) %in% names(y.hat[[1]])]
1443120851855:}, mc.cores=NCPU)
1443120851855:}
1443120892077:### Get y and y_hat; output=(y or y_hat)
1443120892078:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443120892078:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443120892078:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443120892078:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443120892079:mclapply(names(y.hat[[1]]), function(tx) {
1443120892079:oo <- as.numeric(terms==tx)
1443120892079:names(oo) <- terms
1443120892080:oo <- oo[names(oo) %in% names(y.hat)]
1443120892080:}, mc.cores=NCPU)
1443120892080:}
1443120899595:y_lab <- y.labels(GO, y_hat)
1443121008020:names(y_hat)
1443121015851:names(y_hat[[1]])
1443121024845:names(y_hat[[1]])[1]
1443121075765:term <- names(y_hat[[1]])[1]
1443121082303:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443121094931:A <- GO
1443121100870:taxon.id
1443121103055:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443121104940:oo <- as.numeric(terms==term)
1443121113501:names(oo) <- terms
1443121119556:head(oo)
1443121159454:oo <- as.numeric(txs==term)
1443121162073:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443121163658:oo <- as.numeric(txs==term)
1443121166720:sum(oo)
1443121209530:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443121209530:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443121209530:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443121209531:mclapply(names(y.hat[[1]]), function(term) {
1443121209531:oo <- as.numeric(terms==term)
1443121209531:names(oo) <- txs
1443121209531:#        oo <- oo[names(oo) %in% names(y.hat)]
1443121209532:}, mc.cores=NCPU)
1443121209532:}
1443121218358:y_lab <- y.labels(GO, y_hat)
1443121367222:### Get y and y_hat; output=(y or y_hat)
1443121367223:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443121367223:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443121367223:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443121367223:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443121367224:mclapply(names(y.hat[[1]]), function(term) {
1443121367224:oo <- as.numeric(terms==term)
1443121367224:names(oo) <- txs
1443121367225:#        oo <- oo[names(oo) %in% names(y.hat)]
1443121367225:}, mc.cores=NCPU)
1443121367225:o
1443121367225:}
1443121472651:rm(y_lab)
1443121490820:oo
1443121538142:oo <- as.numeric(terms == term)
1443121541120:sum(oo)
1443121579605:terms
1443121602329:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443121602330:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443121602330:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443121602330:mclapply(names(y.hat[[1]]), function(term) {
1443121602330:oo <- as.numeric(terms == term)
1443121602331:names(oo) <- txs
1443121602331:oo
1443121602331:#        oo <- oo[names(oo) %in% names(y.hat)]
1443121602331:}, mc.cores=NCPU)
1443121602332:o
1443121602332:}
1443121609154:y_lab <- y.labels(GO, y_hat)
1443122745714:top.correlated = function(X, subset=NULL, k=50) {
1443122745715:require(parallel)
1443122745715:k = min(k, nrow(X) - 1)
1443122745715:X = as.matrix(X)
1443122745716:stopifnot(sum(is.na(X)) == 0)
1443122745716:Xs = t(apply(X,1,scale))
1443122745716:o = mclapply(1:nrow(Xs), function(i) {
1443122745717:if ((i > 0) && (i %% 100 == 0)) {
1443122745717:sprintf("Calculating correlations for row: %d", i)
1443122745717:}
1443122745717:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1443122745718:oo = names(r)[order(r, decreasing=T)]
1443122745718:if (!is.null(subset)) {
1443122745718:oo = oo[oo %in% subset]
1443122745718:}
1443122745719:oo[1:min(k, length(oo))]
1443122745719:}, mc.cores=NCPU)
1443122745719:names(o) = rownames(Xs)
1443122745719:o
1443122745720:}
1443122745720:correlation.selected <- function(X, subset=NULL, tx_input_list=NULL) {
1443122745721:require(parallel)
1443122745721:#TODO check if tx_input in subset
1443122745721:if (!is.null(subset)) {
1443122745721:X = X[rownames(X) %in% subset,]
1443122745722:}
1443122745722:if(!is.null(tx_input_list)) {
1443122745722:tx_input_list <- as.character(tx_input_list)
1443122745722:} else {
1443122745723:tx_input_list <- as.character(rownames(X))
1443122745723:}
1443122745723:X <- t(X)
1443122745723:Xi <- X[,(colnames(X) %in% tx_input_list)]
1443122745724:out <- mclapply(1:ncol(Xi),
1443122745724:function(i) {
1443122745724:new <- cor(X, Xi[,i])
1443122745725:names <- rownames(new)
1443122745725:oo <- as.vector(new)
1443122745725:names(oo) <- names
1443122745725:oo
1443122745726:},
1443122745726:mc.cores=NCPU )
1443122745726:names(out) <- colnames(Xi)
1443122745727:out
1443122745727:}
1443122745727:most.correlated <- function(X, subset=NULL, tx_input_list=NULL, k=50) {
1443122745728:# X - output of correlation.selected()
1443122745728:out <- correlation.selected(X, subset, tx_input_list)
1443122745728:out <- mclapply(out,
1443122745728:function(tx) { names(tx)[order(tx, decreasing = T)][2:(k+1)] },
1443122745729:mc.cores=NCPU
1443122745729:)
1443122745729:#out <- matrix(unlist(out), ncol=ncol(X))
1443122745729:#rownames(out) <- NULL
1443122745730:#names(out) <- tx_input_list
1443122745730:out
1443122745730:}
1443122759028:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443122759029:taxon.id = as.character(taxon.id)
1443122759029:At = A$annotation[[taxon.id]]
1443122759029:background = intersect(unique(unlist(At)), rownames(X))
1443122759029:r = most.correlated(X, subset=background, tx_input_list, k)
1443122759030:#r = top.correlated(X, subset=background, k=k)
1443122759030:mclapply(r, function(c1) { # dla każdego transkryptu
1443122759030:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443122759031:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443122759031:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443122759031:oo = NULL
1443122759031:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443122759032:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443122759032:if (ct[1,1] >= min.count) {
1443122759032:fet = fisher.test(ct)
1443122759033:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443122759033:oo = as.numeric(fet$estimate)
1443122759033:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443122759033:} else {
1443122759034:oo <- NA
1443122759034:}
1443122759034:} else {
1443122759035:oo <- NA
1443122759035:}
1443122759035:})
1443122759036:unlist(o)
1443122759036:}, mc.cores=NCPU)
1443122759037:}
1443122818866:X = read.table("expression.gene.v2.tsv")
1443122825698:Xp = preprocess(X)
1443122841725:library(parallel)
1443122841902:library(limma)
1443122842048:library(AUC)
1443122842861:NCPU = detectCores()
1443122852414:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2200]
1443122853140:Xp.q = Xp[q,]
1443122856001:pred_s <- predict.annotations.knn(Xp.q, GO, 9606)
1443122909959:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443122909959:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443122909959:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443122909960:mclapply(names(y.hat[[1]]), function(term) {
1443122909960:oo <- as.numeric(terms == term)
1443122909960:names(oo) <- txs
1443122909960:oo
1443122909961:#        oo <- oo[names(oo) %in% names(y.hat)]
1443122909961:}, mc.cores=NCPU)
1443122909961:o
1443122909961:}
1443122927833:### Get y and y_hat; output=(y or y_hat)
1443122927834:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443122927834:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443122927834:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443122927835:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443122927835:mclapply(names(y.hat[[1]])[1:2000], function(term) {
1443122927835:oo <- as.numeric(terms == term)
1443122927835:names(oo) <- txs
1443122927836:oo
1443122927836:#        oo <- oo[names(oo) %in% names(y.hat)]
1443122927836:}, mc.cores=NCPU)
1443122927836:o
1443122927837:}
1443122941645:y_lab <- y.labels
1443122956946:y_lab <- y.labels(A, y_hat)
1443122961370:y_lab <- y.labels(GO, y_hat)
1443122995647:}
1443122995647:y.hat.from.pred <- function(predictions, as.df=F) {
1443122995647:o <- mclapply(predictions, function(tx) {
1443122995648:tx[is.na(tx) | is.infinite(tx)] <- 0
1443122995648:tx
1443122995648:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443122995648:if(as.df) {
1443122995648:o <- as.data.frame(o)
1443122995649:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443122995649:t(o)
1443122995649:}
1443122995649:o
1443123004407:y.hat.from.pred <- function(predictions, as.df=F) {
1443123004408:o <- mclapply(predictions, function(tx) {
1443123004408:tx[is.na(tx) | is.infinite(tx)] <- 0
1443123004408:tx
1443123004408:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443123004409:if(as.df) {
1443123004409:o <- as.data.frame(o)
1443123004409:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443123004409:t(o)
1443123004410:}
1443123004410:o
1443123004410:}
1443123018045:y_hat <- y.hat.from.pred(pred_s)
1443123052345:y_lab <- y.labels(GO, y_hat)
1443123102655:### Get y and y_hat; output=(y or y_hat)
1443123102656:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443123102656:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443123102656:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443123102656:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443123102657:o <- mclapply(names(y.hat[[1]])[1:2000], function(term) {
1443123102657:oo <- as.numeric(terms == term)
1443123102657:names(oo) <- txs
1443123102657:oo
1443123102658:#        oo <- oo[names(oo) %in% names(y.hat)]
1443123102658:}, mc.cores=NCPU)
1443123102658:o
1443123102658:}
1443123104070:y_lab <- y.labels(GO, y_hat)
1443123158294:y_lab
1443123231225:names(y_hat)
1443123248625:names(y_hat[[1]])
1443123561604:length(trms)
1443123563922:length(terms)
1443123572296:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443123572645:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443123579746:A <- GO
1443123582027:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443123585555:length(terms)
1443123594070:length(unique(terms))
1443123624602:length(unique(txs))
1443124233156:txs[terms == term]
1443124235932:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443124239995:txs[terms == term]
1443124244645:term <_ terms[1]
1443124248001:term <- terms[1]
1443124249329:term
1443124253946:txs[terms == term]
1443124261845:names(y_hat) %in% txs[terms == term]
1443124426096:names(y_hat[[1]]) %in% terms[txs == tx]
1443124434495:tx <- txs[1]
1443124435694:names(y_hat[[1]]) %in% terms[txs == tx]
1443124447070:sum(names(y_hat[[1]]) %in% terms[txs == tx])
1443124551389:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443124551389:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443124551390:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443124551390:o <- mclapply(names(y.hat), function(tx) {
1443124551390:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443124551390:names(oo) <- names(y_hat[[1]])
1443124551391:oo
1443124551391:}, mc.cores=NCPU)
1443124551391:o
1443124551391:}
1443124562986:### Get y and y_hat; output=(y or y_hat)
1443124562986:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443124562986:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443124562986:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443124562987:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443124562987:o <- mclapply(names(y.hat)[1:100], function(tx) {
1443124562987:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443124562987:names(oo) <- names(y_hat[[1]])
1443124562988:oo
1443124562988:}, mc.cores=NCPU)
1443124562988:o
1443124562988:}
1443124575470:y_lab <- y.labels(GO, y_hat)
1443124595657:### Get y and y_hat; output=(y or y_hat)
1443124595657:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443124595658:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443124595658:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443124595658:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443124595658:o <- mclapply(names(y.hat), function(tx) {
1443124595659:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443124595659:names(oo) <- names(y_hat[[1]])
1443124595659:oo
1443124595659:}, mc.cores=NCPU)
1443124595660:o
1443124595660:}
1443124598297:y_lab <- y.labels(GO, y_hat)
1443124611674:sum(y_lab[1])
1443124622320:sum(y_lab[[1]])
1443124747533:length(unique(names(y_lab[[1]])))
1443128261095:names(y_lab)
1443128273276:names(y_lab) <- names(y_hat)
1443128286119:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443128286119:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443128286120:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443128286120:o <- mclapply(names(y.hat), function(tx) {
1443128286120:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443128286120:names(oo) <- names(y_hat[[1]])
1443128286121:oo
1443128286121:}, mc.cores=NCPU)
1443128286121:names(o) <- names(y.hat)
1443128286121:o
1443128286122:}
1443128351927:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443128351927:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443128351928:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443128351928:o <- mclapply(names(y.hat), function(tx) {
1443128351928:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443128351929:names(oo) <- names(y_hat[[1]])
1443128351929:oo
1443128351929:}, mc.cores=NCPU)
1443128351930:names(o) <- names(y.hat)
1443128351930:o
1443128351930:}ppppekjl
1443128419923:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443128419924:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443128419924:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443128419925:o <- mclapply(names(y.hat), function(tx) {
1443128419925:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443128419926:names(oo) <- names(y_hat[[1]])
1443128419926:oo
1443128419926:}, mc.cores=NCPU)
1443128419927:names(o) <- names(y.hat)
1443128419927:o
1443128419927:}
1443132188595:specificity(y_hat, y_lab)
1443132200330:specificity(y_hat[[1]], y_lab[[1]])
1443133807647:od <- read.table("/mnt/DATAPART1/TCGA_expression_matrix.tsv", sep="\t")
1443134207870:names(od)
1443134234295:rownames(od)
1443134239645:rm(od0)
1443134244045:dim(od)
1443134246645:rm(od)
1443136871307:getwd()
1443194790834:ls
1443194793364:ls()
1443196716548:library(TCGA2STAT)
1443196716711:library(SRAdb)
1443196718023:library(parallel)
1443196749822:X = read.table("expression.gene.v2.tsv")
1443196756432:Xp = preprocess(X)
1443196764316:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2200]
1443196764382:Xp.q = Xp[q,]
1443196766331:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1443196810144:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1443196950480:dim(Xp.a)
1443196952641:dim(Xp.q)
1443196975099:rownames(X)
1443196986509:rownames(Xp.q)
1443197009337:rownames(Xp.q) %in% background
1443197202980:# the slow version, for matrices containing NaN, could be used as a fallback
1443197202980:#top.correlated = function(X, k=50) {
1443197202980:#    k = min(k,nrow(X)-1)
1443197202980:#    Xt = t(X)
1443197202981:#    o = mclapply(colnames(Xt), function(ix) {
1443197202981:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1443197202981:#        r = r[!is.na(r)]
1443197202981:#        o = NULL
1443197202981:#        if (length(r) >= k) {
1443197202982:#            o = names(r)[order(r, decreasing=T)]
1443197202982:#        }
1443197202982:#        o
1443197202982:#    }, mc.cores=NCPU)
1443197202982:#    names(o) = colnames(Xt)
1443197202983:#    o
1443197202983:#}
1443197202983:top.correlated = function(X, subset=NULL, k=50) {
1443197202983:require(parallel)
1443197202984:k = min(k, nrow(X) - 1)
1443197202984:X = as.matrix(X)
1443197202984:stopifnot(sum(is.na(X)) == 0)
1443197202984:Xs = t(apply(X,1,scale))
1443197202985:o = mclapply(1:nrow(Xs), function(i) {
1443197202985:if ((i > 0) && (i %% 100 == 0)) {
1443197202985:sprintf("Calculating correlations for row: %d", i)
1443197202985:}
1443197202986:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1443197202986:oo = names(r)[order(r, decreasing=T)]
1443197202986:if (!is.null(subset)) {
1443197202986:oo = oo[oo %in% subset]
1443197202987:}
1443197202987:oo[1:min(k, length(oo))]
1443197202987:}, mc.cores=NCPU)
1443197202988:names(o) = rownames(Xs)
1443197202988:o
1443197202988:}
1443197202989:correlation.selected <- function(X, subset=NULL, tx_input_list=NULL) {
1443197202989:require(parallel)
1443197202989:#TODO check if tx_input in subset
1443197202989:if (!is.null(subset)) {
1443197202990:X = X[rownames(X) %in% subset,]
1443197202990:}
1443197202990:if(!is.null(tx_input_list)) {
1443197202991:X <- X[,(colnames(X) %in% tx_input_list)]
1443197202991:}
1443197202991:X <- t(X)
1443197202992:out <- mclapply(1:ncol(X),
1443197202992:function(i) {
1443197202992:new <- cor(X, X[,i])
1443197202992:names <- rownames(new)
1443197202992:oo <- as.vector(new)
1443197202993:names(oo) <- names
1443197202993:oo
1443197202993:},
1443197202994:mc.cores=NCPU )
1443197202994:names(out) <- colnames(X)
1443197202994:out
1443197202994:}
1443197202995:most.correlated <- function(X, subset=NULL, tx_input_list=NULL, k=50) {
1443197202995:# X - output of correlation.selected()
1443197202995:out <- correlation.selected(X, subset, tx_input_list)
1443197202996:out <- mclapply(out,
1443197202996:function(tx) { names(tx)[order(tx, decreasing = T)][2:(k+1)] },
1443197202996:mc.cores=NCPU
1443197202996:)
1443197202997:#out <- matrix(unlist(out), ncol=ncol(X))
1443197202997:#rownames(out) <- NULL
1443197202997:#names(out) <- tx_input_list
1443197202997:out
1443197202997:}
1443197202998:#######################################
1443197202998:# Function prediction by kNN FET method
1443197202998:#######################################
1443197202999:# could improve to output p-value, odds ratio ("estimate") + log(OR), and N for each term-gene pair
1443197202999:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443197202999:taxon.id = as.character(taxon.id)
1443197202999:At = A$annotation[[taxon.id]]
1443197203000:background = intersect(unique(unlist(At)), rownames(X))
1443197203000:r = most.correlated(X, subset=background, tx_input_list, k)
1443197203000:#r = top.correlated(X, subset=background, k=k)
1443197203001:mclapply(r, function(c1) { # dla każdego transkryptu
1443197203001:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443197203001:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443197203001:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443197203002:oo = NULL
1443197203002:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443197203002:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443197203002:if (ct[1,1] >= min.count) {
1443197203003:fet = fisher.test(ct)
1443197203003:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443197203003:oo = as.numeric(fet$estimate)
1443197203004:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443197203004:} else {
1443197203004:oo <- NA
1443197203005:}
1443197203005:} else {
1443197203005:oo <- NA
1443197203005:}
1443197203006:})
1443197203006:unlist(o)
1443197203007:}, mc.cores=NCPU)
1443197203007:}
1443197203008:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443197203008:mclapply(predictions, function(tx) {
1443197203008:o <- sort(tx[!is.na(tx)])
1443197203009:o <- o[o<p.thr & o>0]
1443197203009:if(!is.null(how.many)) {
1443197203009:o <- o[1:min(how.many, length(o))]
1443197203009:}
1443197203010:o
1443197203010:}, mc.cores=NCPU)
1443197203010:}
1443197203011:y.hat.from.pred <- function(predictions, as.df=F) {
1443197203011:o <- mclapply(predictions, function(tx) {
1443197203011:tx[is.na(tx) | is.infinite(tx)] <- 0
1443197203011:tx
1443197203011:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443197203012:if(as.df) {
1443197203012:o <- as.data.frame(o)
1443197203012:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443197203012:t(o)
1443197203012:}
1443197203013:o
1443197203013:}
1443197203014:### Get y and y_hat; output=(y or y_hat)
1443197203014:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443197203014:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443197203014:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443197203014:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443197203015:o <- mclapply(names(y.hat), function(tx) {
1443197203015:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443197203015:names(oo) <- names(y_hat[[1]])
1443197203015:oo
1443197203016:}, mc.cores=NCPU)
1443197203016:names(o) <- names(y.hat)
1443197203016:o
1443197203016:}
1443197203017:#
1443197203017:# if(is.null(predictions)) {
1443197203017:#     subset <- unique(txs)
1443197203018:# } else {
1443197203018:#     subset <- rownames(predictions)
1443197203018:# }
1443197203018:#o <- matrix(c(0), nrow=length(subset), ncol=length(unique(terms)))
1443197203019:#dimnames(o) <- list(unique(txs), unique(terms))
1443197223058:# could improve to output p-value, odds ratio ("estimate") + log(OR), and N for each term-gene pair
1443197223059:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=NULL) {
1443197223059:taxon.id = as.character(taxon.id)
1443197223059:At = A$annotation[[taxon.id]]
1443197223060:background = intersect(unique(unlist(At)), rownames(X))
1443197223060:r = most.correlated(X, subset=background, tx_input_list, k)
1443197223060:#r = top.correlated(X, subset=background, k=k)
1443197223061:mclapply(r, function(c1) { # dla każdego transkryptu
1443197223061:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443197223062:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443197223062:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443197223062:oo = NULL
1443197223063:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443197223063:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443197223064:if (ct[1,1] >= min.count) {
1443197223064:fet = fisher.test(ct)
1443197223065:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443197223065:oo = as.numeric(fet$estimate)
1443197223066:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443197223066:} else {
1443197223067:oo <- NA
1443197223067:}
1443197223068:} else {
1443197223068:oo <- NA
1443197223069:}
1443197223069:})
1443197223070:unlist(o)
1443197223070:}, mc.cores=NCPU)
1443197223071:}
1443197223073:subset.top.annotations <- function(predictions, how.many=NULL, p.thr=0.05) { # gte only those based on p val!
1443197223073:mclapply(predictions, function(tx) {
1443197223073:o <- sort(tx[!is.na(tx)])
1443197223074:o <- o[o<p.thr & o>0]
1443197223074:if(!is.null(how.many)) {
1443197223074:o <- o[1:min(how.many, length(o))]
1443197223075:}
1443197223075:o
1443197223075:}, mc.cores=NCPU)
1443197223076:}
1443197223076:y.hat.from.pred <- function(predictions, as.df=F) {
1443197223077:o <- mclapply(predictions, function(tx) {
1443197223077:tx[is.na(tx) | is.infinite(tx)] <- 0
1443197223077:tx
1443197223078:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443197223078:if(as.df) {
1443197223078:o <- as.data.frame(o)
1443197223079:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443197223079:t(o)
1443197223079:}
1443197223079:o
1443197223080:}
1443197223080:### Get y and y_hat; output=(y or y_hat)
1443197223081:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443197223081:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443197223081:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443197223081:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443197223082:o <- mclapply(names(y.hat), function(tx) {
1443197223082:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443197223083:names(oo) <- names(y_hat[[1]])
1443197223083:oo
1443197223083:}, mc.cores=NCPU)
1443197223084:names(o) <- names(y.hat)
1443197223084:o
1443197223084:}
1443197230880:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1443197272616:predictions[[1]]
1443197287544:sum(is.na(predictions[[1]]))
1443197291896:sum(!is.na(predictions[[1]]))
1443198210619:data(churn)
1443198216243:library(AUC)
1443198218401:data(churn)
1443198226729:head(churn)
1443198262400:smmary(churn)
1443198266000:summary(churn)
1443198304813:summary(predictions[[1]])
1443198506163:summary(log(predictions[[1]]))
1443198933076:sum(predictions[[1]])
1443198938608:max(predictions[[1]])
1443198953171:y.hat.from.pred <- function(predictions, as.df=F) {
1443198953172:o <- mclapply(predictions, function(tx) {
1443198953172:tx[is.na(tx) | is.infinite(tx)] <- 0
1443198953172:tx
1443198953172:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443198953173:if(as.df) {
1443198953173:o <- as.data.frame(o)
1443198953173:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443198953173:t(o)
1443198953173:}
1443198953174:o
1443198953174:}
1443198953175:### Get y and y_hat; output=(y or y_hat)
1443198953175:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1443198953175:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443198953175:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443198953176:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443198953176:o <- mclapply(names(y.hat), function(tx) {
1443198953176:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443198953176:names(oo) <- names(y_hat[[1]])
1443198953177:oo
1443198953177:}, mc.cores=NCPU)
1443198953177:names(o) <- names(y.hat)
1443198953177:o
1443198953178:}
1443198995810:yhat <- y.hat.from.pred(predictions)
1443199007419:yhat[[1]]
1443199018753:max(yhat[[1]])
1443199208275:yhat <- mclapply( yhat, function(tx) { tx <- tx/ sum(tx) })
1443199212263:yhat[[1]]
1443199218849:summary(yhat[[1]])
1443199221976:summary(yhat)
1443199342684:summary(churn)
1443200305126:y.hat.from.pred <- function(predictions, as.df=F) {
1443200305126:o <- mclapply(predictions, function(tx) {
1443200305126:tx[is.na(tx) | is.infinite(tx)] <- 0
1443200305127:tx <- tx / tx-1 # get odds ratio to probability
1443200305127:tx
1443200305127:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443200305127:if(as.df) {
1443200305128:o <- as.data.frame(o)
1443200305128:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443200305128:t(o)
1443200305128:}
1443200305128:o
1443200305129:}
1443200317301:yhat <- y.hat.from.pred(predictions)
1443200326526:summary(yhat[[1]])
1443200341852:y.hat.from.pred <- function(predictions, as.df=F) {
1443200341852:o <- mclapply(predictions, function(tx) {
1443200341853:tx[is.na(tx) | is.infinite(tx)] <- 0
1443200341853:#        tx <- tx / tx-1 # get odds ratio to probability
1443200341853:tx
1443200341853:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443200341853:if(as.df) {
1443200341854:o <- as.data.frame(o)
1443200341854:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443200341854:t(o)
1443200341854:}
1443200341855:o
1443200341855:}
1443200344876:yhat <- y.hat.from.pred(predictions)
1443200401827:yhat[[1]]/ tx[[1]]-1
1443200406601:yhat[[1]]/ yaht[[1]]-1
1443200411251:yhat[[1]]/ yhat[[1]]-1
1443200475909:yhat[[1]][!is.na(yhat[[1]])]/ yhat[[1]]-1
1443200504884:yhat[[1]][yhat[[1]]>0]/ yhat[[1]]-1
1443200527436:yhat[[1]][yhat[[1]]>0]/ yhat[[1]][yhat[[1]]>0]-1
1443200535426:summary(yhat[[1]][yhat[[1]]>0]/ yhat[[1]][yhat[[1]]>0]-1)
1443200541551:max(yhat[[1]][yhat[[1]]>0]/ yhat[[1]][yhat[[1]]>0]-1)
1443200685390:source('/mnt/DATAPART1/rnaseq/R/fpredict.R', echo=TRUE)
1443200699326:rm(Xp)
1443200702857:y.hat.from.pred <- function(predictions, as.df=F) {
1443200702857:o <- mclapply(predictions, function(tx) {
1443200702857:tx[is.na(tx) | is.infinite(tx)] <- 0
1443200702857:tx[tx>0] <- tx[tx>0] / (tx[tx>0]-1) # get odds ratio to probability
1443200702858:tx
1443200702858:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443200702858:if(as.df) {
1443200702858:o <- as.data.frame(o)
1443200702859:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443200702859:t(o)
1443200702859:}
1443200702859:o
1443200702860:}
1443200715083:yhat <- y.hat.from.pred(predictions)
1443200729251:yhat[[1]]
1443200735226:summary(yhat[[1]])
1443200822105:y.hat.from.pred <- function(predictions, as.df=F) {
1443200822105:o <- mclapply(predictions, function(tx) {
1443200822105:tx[is.na(tx) | is.infinite(tx)] <- 0
1443200822106:#        tx[tx>0] <- tx[tx>0] / (tx[tx>0]-1) # get odds ratio to probability
1443200822106:tx
1443200822106:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443200822106:if(as.df) {
1443200822107:o <- as.data.frame(o)
1443200822107:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443200822107:t(o)
1443200822107:}
1443200822108:o
1443200822108:}
1443200825751:yhat <- y.hat.from.pred(predictions)
1443200834626:y <- yhat[[1]]
1443200836201:y
1443200861836:y[y>0]
1443200877654:y[y>0] / (y[y>0] -1
1443200878901:)
1443200974887:y[y>0] / 9
1443201003584:y.hat.from.pred <- function(predictions, as.df=F) {
1443201003584:o <- mclapply(predictions, function(tx) {
1443201003584:tx[is.na(tx) | is.infinite(tx)] <- 0
1443201003584:tx[tx>0] <- tx[tx>0] / 9 # get odds ratio to probability
1443201003585:tx
1443201003585:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443201003585:if(as.df) {
1443201003585:o <- as.data.frame(o)
1443201003585:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443201003586:t(o)
1443201003586:}
1443201003586:o
1443201003587:}
1443201019801:yhat <- y.hat.from.pred(predictions)
1443201025027:yhat[[1]]
1443201033026:summary(yhat[[1]])
1443201154242:y.hat.from.pred <- function(predictions, as.df=F) {
1443201154242:o <- mclapply(predictions, function(tx) {
1443201154242:tx[is.na(tx) | is.infinite(tx)] <- 0
1443201154242:tx[tx>0] <- tx[tx>0] / tx[tx>0]+1 # get odds ratio to probability
1443201154243:tx
1443201154243:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443201154243:if(as.df) {
1443201154243:o <- as.data.frame(o)
1443201154243:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443201154244:t(o)
1443201154244:}
1443201154244:o
1443201154244:}
1443201159251:yhat[[1]]
1443201161301:yhat <- y.hat.from.pred(predictions)
1443201164651:yhat[[1]]
1443201169601:summary(yhat[[1]])
1443201188238:y.hat.from.pred <- function(predictions, as.df=F) {
1443201188239:o <- mclapply(predictions, function(tx) {
1443201188239:tx[is.na(tx) | is.infinite(tx)] <- 0
1443201188239:#        tx[tx>0] <- tx[tx>0] / tx[tx>0]+1 # get odds ratio to probability
1443201188239:tx
1443201188240:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443201188240:if(as.df) {
1443201188240:o <- as.data.frame(o)
1443201188240:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443201188240:t(o)
1443201188241:}
1443201188241:o
1443201188241:}
1443201203626:summary(yhat[[1]])
1443201209855:yhat <- y.hat.from.pred(predictions)
1443201212601:summary(yhat[[1]])
1443201235841:y.hat.from.pred <- function(predictions, as.df=F) {
1443201235841:o <- mclapply(predictions, function(tx) {
1443201235842:tx[is.na(tx) | is.infinite(tx)] <- 0
1443201235842:tx[tx>0] <- tx[tx>0] / (tx[tx>0]+1) # get odds ratio to probability
1443201235842:tx
1443201235842:}, mc.cores=NCPU) # names prependedX wwith  when as.data.frame'd
1443201235842:if(as.df) {
1443201235843:o <- as.data.frame(o)
1443201235843:names(o) <- lapply(names(y_hat), function(n) { substring(n,2) } )
1443201235843:t(o)
1443201235843:}
1443201235844:o
1443201235844:}
1443201239826:yhat <- y.hat.from.pred(predictions)
1443201243801:summary(yhat[[1]])
1443201334207:ylab <- y.labels(GO, yhat)
1443201600919:### Get y labels for predicted
1443201600919:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443201600919:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443201600919:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443201600920:o <- mclapply(names(y.hat), function(tx) {
1443201600920:oo <- as.numeric(names(y_hat[[1]]) %in% terms[txs == tx])
1443201600920:names(oo) <- names(y.hat[[1]])
1443201600921:oo
1443201600921:}, mc.cores=NCPU)
1443201600921:names(o) <- names(y.hat)
1443201600921:o
1443201600922:}
1443201605626:ylab <- y.labels(GO, yhat)
1443201647068:### Get y labels for predicted
1443201647069:y.labels <- function(A, y.hat=NULL, taxon.id = 9606) {
1443201647069:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1443201647069:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1443201647070:o <- mclapply(names(y.hat), function(tx) {
1443201647070:oo <- as.numeric(names(y.hat[[1]]) %in% terms[txs == tx])
1443201647070:names(oo) <- names(y.hat[[1]])
1443201647070:oo
1443201647071:}, mc.cores=NCPU)
1443201647071:names(o) <- names(y.hat)
1443201647071:o
1443201647071:}
1443201652285:ylab <- y.labels(GO, yhat)
1443201671551:specificity(yhat[[1]], ylab[[1]])
1443201694301:specificity(c(yhat[[1]]), c(ylab[[1]]))
1443201706351:specificity(list(yhat[[1]]), list(ylab[[1]]))
1443201722035:class(yhat[[1]])
1443201728601:class(ylab[[1]])
1443201776102:specificity(yhat[[1]], as.factor(ylab[[1]]))
1443202146326:yhat[names(yhat=="221150")]
1443202266502:yhat[names(yhat)=="221150"]
1443202274933:yhat[names(yhat)=="221150"[1]]
1443202281429:yhat[names(yhat)=="221150"][1]
1443202285201:yhat[names(yhat)=="221150"][[1]]
1443202338237:class(yhat[names(yhat)=="221150"])
1443202350801:unlist(yhat[names(yhat)=="221150"])
1443202360251:head(unlist(yhat[names(yhat)=="221150"]))
1443202417942:head(yhat[names(yhat)=="221150"][[1]])
1443202556139:specificity(yhat[[1]], as.factor(ylab[[1]]))
1443202617004:?sensitivity
1443202794085:spe <- specificity(yhat[[1]], as.factor(ylab[[1]]))
1443202810903:sen <- sensitivity(yhat[[1]], as.factor(ylab[[1]]))
1443202817276:?"AUC-package"
1443202820053:?"AUC"
1443202824776:?AUC
1443202997062:au <- auc(spe)
1443203147709:plot.AUC(spe)
1443203155405:plot(spe)
1443203186908:plot(sen)
1443203229102:au
1443203743126:dim(X)
1443203769951:plot(apply(X, 1, var))
1443203792526:Xp <- preprocess(X)
1443203804603:plot(apply(Xp, 1, var))
1443203829951:length(apply(X, 1, var))
1443203847626:length(apply(X, 1, var)<0.1)
1443203871156:class(apply(X, 1, var))
1443203890626:sum(apply(X, 1, var) <0.1 )
1443203895980:sum(apply(X, 1, var) <0.01 )
1443203910333:summary(apply(X, 1, var) <0.01 )
1443203916277:summary(apply(X, 1, var))
1443203971509:sum(apply(X, 1, var) <0.05 )
1443204007811:preprocess = function(X) {
1443204007812:require(limma)
1443204007812:# remove genes & samples w/ little variance
1443204007812:X = X[apply(X,1,var) > 0.1,]
1443204007812:X = X[,apply(X,2,var) > 0.1]
1443204007813:stopifnot(nrow(X) > 0)
1443204007813:stopifnot(ncol(X) > 0)
1443204007813:# quantile normalize
1443204007813:normalizeBetweenArrays(as.matrix(X))
1443204007814:}
1443204020826:Xp <- preprocess(X)
1443204037258:dim(Xp)
1443204067101:sum(apply(X, 1, var) <0.2 )
1443204086202:preprocess = function(X) {
1443204086434:require(limma)
1443204086435:# remove genes & samples w/ little variance
1443204086487:X = X[apply(X,1,var) > 0.2,]
1443204086487:X = X[,apply(X,2,var) > 0.2]
1443204086488:stopifnot(nrow(X) > 0)
1443204086488:stopifnot(ncol(X) > 0)
1443204086488:# quantile normalize
1443204087790:normalizeBetweenArrays(as.matrix(X))
1443204088351:}
1443204094976:Xp <- preprocess(X)
1443204150880:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X)) #[2001:2200]
1443204151911:Xp.q = Xp[q,]
1443204166840:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(Xp)) #[2001:2200]
1443204167663:Xp.q = Xp[q,]
1443204174231:dim(Xp.q)
1443204222026:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=3, tx_input_list=NULL) {
1443204222026:taxon.id = as.character(taxon.id)
1443204222027:At = A$annotation[[taxon.id]]
1443204222027:background = intersect(unique(unlist(At)), rownames(X))
1443204222027:r = most.correlated(X, subset=background, tx_input_list, k)
1443204222027:#r = top.correlated(X, subset=background, k=k)
1443204222028:mclapply(r, function(c1) { # dla każdego transkryptu
1443204222028:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443204222028:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443204222029:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443204222029:oo = NULL
1443204222029:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443204222029:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443204222030:if (ct[1,1] >= min.count) {
1443204222030:fet = fisher.test(ct)
1443204222030:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443204222031:oo = as.numeric(fet$estimate)
1443204222031:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443204222031:} else {
1443204222032:oo <- NA
1443204222032:}
1443204222032:} else {
1443204222033:oo <- NA
1443204222033:}
1443204222033:})
1443204222034:unlist(o)
1443204222034:}, mc.cores=NCPU)
1443204222035:}
1443204246279:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1443306165700:save(predictions, "predictions_all_9606_varthr0.2.RData")
1443306179201:save(predictions, file ="predictions_all_9606_varthr0.2.RData")
1443307342179:predictions[names(predictions)=="221150"]
1443307355854:p <- predictions[names(predictions)=="221150"]
1443307367276:class(p)
1443307379030:class(p[[1]])
1443307385127:p <- p[[1]]
1443307400102:sum(!is.na(p))
1443307409301:p <- p[!is.na(p)]
1443307410725:p
1443307487700:GO$table$Term.Name[GO$table$Term.ID %in% p]
1443307700543:GO$table$Term.Name[GO$table$Term.ID %in% names(p)]
1443307732064:unique(p <- p[!is.na(p)])
1443307747850:unique(GO$table$Term.Name[GO$table$Term.ID %in% names(p)])
1443307832851:unique(GO$table$Term.Name[GO$table$Term.ID == "221150"])
1443307880918:unique(droplevels(GO$table$Term.Name[GO$table$Gene.ID == "221150"]))
1443467368425:pth <- "/mnt/DATAPART1/Sasi"
1443468532776:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1443468533207:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1443468533382:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1443468535324:measure_lsm_data <- matrix(NA)
1443468535549:for( file in file_list_measure_lsm) {
1443468535733:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1443468535894:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1443468536443:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1443468536635:}
1443468537674:measure_lsm_data <- measure_lsm_data[,-6]
1443468537674:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1443468537675:measure_lsm <- matrix(NA)
1443468537688:for( i in unique(measure_lsm_data$parameter)) {
1443468537914:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1443468538034:new <- new[,-1]
1443468538177:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443468538330:measure_lsm <- merge(measure_lsm, new)
1443468538506:}
1443468538674:measure_lsm <- measure_lsm[,-2]
1443468538849:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1443468539018:coloc_data <- matrix(NA)
1443468539208:for(file in file_list_coloc) {
1443468539387:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1443468539570:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1443468539754:coloc_data <- merge(coloc_data, new, all=T)
1443468539930:}
1443468540122:coloc_data <- coloc_data[,-6]
1443468540333:coloc_data$parameter <- as.character(coloc_data$parameter)
1443468550914:coloc_data <- matrix(NA)
1443468551425:for(file in file_list_coloc) {
1443468551714:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1443468551890:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1443468552042:coloc_data <- merge(coloc_data, new, all=T)
1443468552755:}
1443468629080:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1443468630653:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1443468630860:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1443468631073:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1443468634667:coloc_data <- matrix(NA)
1443468634868:for(file in file_list_coloc) {
1443468635022:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1443468635179:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1443468635343:coloc_data <- merge(coloc_data, new, all=T)
1443468635614:}
1443468638587:coloc_data <- coloc_data[,-6]
1443468639064:coloc_data$parameter <- as.character(coloc_data$parameter)
1443468644952:measure_lsm_data <- matrix(NA)
1443468645114:for( file in file_list_measure_lsm) {
1443468645249:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1443468645398:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1443468645544:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1443468645707:}
1443468646716:measure_lsm_data <- measure_lsm_data[,-6]
1443468646717:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1443468646717:measure_lsm <- matrix(NA)
1443468646717:for( i in unique(measure_lsm_data$parameter)) {
1443468646718:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1443468646718:new <- new[,-1]
1443468646861:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443468647005:measure_lsm <- merge(measure_lsm, new)
1443468647130:}
1443468647284:measure_lsm <- measure_lsm[,-2]
1443468647434:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1443468647598:coloc_data <- matrix(NA)
1443468647754:for(file in file_list_coloc) {
1443468647902:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1443468648069:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1443468648242:coloc_data <- merge(coloc_data, new, all=T)
1443468648407:}
1443468649239:coloc_data <- coloc_data[,-6]
1443468649239:coloc_data$parameter <- as.character(coloc_data$parameter)
1443468649239:coloc <- matrix(NA)
1443468649578:for( i in unique(coloc_data$parameter)) {
1443468649864:new <- coloc_data[coloc_data$parameter == i,]
1443468650010:new <- new[,-1]
1443468650143:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443468650287:coloc <- merge(coloc, new)
1443468650530:}
1443468651312:coloc <- coloc[,c(1,5,8,11)]
1443468651488:names(coloc)[1] <- "Label"
1443468651675:#
1443468651871:count_data <- matrix(NA, 0, 13)
1443468652024:for ( file in file_list_count) {
1443468652195:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1443468652358:count_data <- rbind(count_data, new)
1443468652750:}
1443468653261:count <- count_data[count_data$Area > 99,]
1443468653291:count <- as.data.frame(xtabs(~Label, count))
1443468653438:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1443468653623:# green in nuclei
1443468654090:if (!is.na(file_list_in_nuclei[1])) {
1443468654231:print("Green in nuclei data detected, adding...")
1443468654383:in_nuclei_data <- matrix(NA)
1443468654563:for (file in file_list_in_nuclei) {
1443468654718:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1443468654886:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1443468655039:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1443468655182:}
1443468655343:in_nuclei <- matrix(NA)
1443468655518:for( i in unique(in_nuclei_data$parameter)) {
1443468655702:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1443468655846:new <- new[,-1]
1443468656044:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443468656189:in_nuclei <- merge(in_nuclei, new)
1443468656795:}
1443468656953:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1443468657128:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1443468657294:} else {
1443468657471:print("No green in nuclei data detected.")
1443468657735:}
1443468659181:### MERGE TABLES
1443468659373:res <- merge(measure_lsm, count, all=T)
1443468659773:res <- merge(res, coloc, by="Label", all=T)
1443468661854:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1443468662038:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1443468676464:View(res)
1443468684006:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1443468684223:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1443468684406:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1443468689008:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443468689239:meta <- meta[, -(1:5)]
1443468689446:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1443468729924:View(res)
1443468847955:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443468893989:res$file
1443468923055:as.data.frame(strsplit(as.character(res$file), "_"))
1443468941452:strsplit(as.character(res$file), "_")
1443468956363:as.data.frame(strsplit(as.character(res$file), "_")
1443468963315:)
1443469094858:res_all<-res
1443469131564:res<-res[grepl("CatD", res$file),]
1443469134099:res
1443469137517:View(res)
1443469147116:res<-res[!grepl("CatD", res$file),]
1443469155723:res<-res[!grepl("CatD", res_all$file),]
1443469160171:res<-res_all[!grepl("CatD", res_all$file),]
1443469167751:meta <- cbind(t()), as.data.frame(res$file))
1443469178351:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443469179853:meta <- meta[, -(1:5)]
1443469183417:View(meta)
1443469195566:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1443469206267:res <- merge(meta,res)
1443469207223:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1443469207599:res$cell_line <- droplevels(res$cell_line)
1443469210119:res <- res[,c(1:5,15,6:14,16:21)]
1443469217845:if (!is.na(file_list_in_nuclei[1])) {
1443469218072:res <- merge(res, in_nuclei, all.x=T)
1443469218981:}
1443469219476:res$file <- gsub("_", "/", res$file)
1443469219853:### AREA
1443469220228:#yellow
1443469220540:area_p <- 1024^2
1443469220723:area_um <- 18211.8110
1443469220898:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1443469221069:res$yellow_area_um <- res$yellow_area_fraction*area_um
1443469221261:res$yellow_area_pixels_per_cell <- res$yellow_area_fraction*area_p/res$cell_count
1443469221451:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res$cell_count
1443469226524:area_p <- 1024^2
1443469226980:area_um <- 18211.8110
1443469236076:res$red_area_pixels <- res$red_area_fraction*area_p
1443469236269:res$red_area_um <- res$red_area_fraction*area_um
1443469236492:res$red_area_pixels_per_cell <- res$red_area_fraction*area_p/res$cell_count
1443469236647:res$red_area_um_per_cell <- res$red_area_fraction*area_um/res$cell_count
1443469236825:#green
1443469237000:res$green_area_pixels <- res$green_area_fraction*area_p
1443469237165:res$green_area_um <- res$green_area_fraction*area_um
1443469237365:res$green_area_pixels_per_cell <- res$green_area_fraction*area_p/res$cell_count
1443469237560:res$green_area_um_per_cell <- res$green_area_fraction*area_um/res$cell_count
1443469237770:### INNE
1443469239252:res$green_in_nuclei_mean_per_cell <- res$green_in_nuclei_mean/res$cell_count
1443469241069:### SUMMARY
1443469241341:#LYSO
1443469241518:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1443469241693:agg1 <- agg1[,-c(4,5,6,7,8)]
1443469241975:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1443469242020:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1443469242200:agg2<- agg2[,-c(3,4,5,6,7)]
1443469242532:names(agg2)[1:2] <- c("cell_line", "treatment")
1443469243388:#MITO
1443469243574:agg3 <- aggregate(res, by=list(res$cell_line, res$date), FUN=mean, na.rm=T)
1443469243774:agg3 <- agg3[,-c(3,4,5,6)]
1443469244120:names(agg3)[1:2] <- c("cell_line", "date")
1443469605476:system("mkdir output")
1443469606362:write.csv(res, "output/measurements_lyso.csv", row.names=F)
1443469606532:write.csv(agg1, "output/summary1_lyso.csv", row.names=F)
1443469606759:write.csv(agg2, "output/summary2_lyso.csv", row.names=F)
1443469757484:res<-res[grepl("CatD", res$file),]
1443469810049:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443469811294:meta <- meta[, -(1:5)]
1443469821788:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443469821995:meta <- meta[, -(1:5)]
1443469849068:res<-res_all[grepl("CatD", res_all$file),]
1443469856727:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443469859359:meta <- meta[, -(1:5)]
1443469879662:View(meta)
1443469935209:names(meta) <- c("CatD", "date", "cell_line", "treatment", "image", "file")
1443469962698:meta <- meta[-1,]
1443469966809:View(meta)
1443469975801:meta <- meta[,-1]
1443469990567:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443469990738:meta <- meta[, -(1:5)]
1443469996137:meta <- meta[,-1]
1443469996885:names(meta) <- c("CatD", "date", "cell_line", "treatment", "image", "file")
1443470003628:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1443470006441:View(meta)
1443470012567:res <- merge(meta,res)
1443470014481:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1443470015910:res$cell_line <- droplevels(res$cell_line)
1443470018839:res <- res[,c(1:5,15,6:14,16:21)]
1443470023334:if (!is.na(file_list_in_nuclei[1])) {
1443470023506:res <- merge(res, in_nuclei, all.x=T)
1443470023656:}
1443470023832:res$file <- gsub("_", "/", res$file)
1443470024026:### AREA
1443470024373:#yellow
1443470024544:area_p <- 1024^2
1443470024741:area_um <- 18211.8110
1443470025170:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1443470025203:res$yellow_area_um <- res$yellow_area_fraction*area_um
1443470025318:res$yellow_area_pixels_per_cell <- res$yellow_area_fraction*area_p/res$cell_count
1443470025411:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res$cell_count
1443470025435:#red
1443470025435:res$red_area_pixels <- res$red_area_fraction*area_p
1443470025459:res$red_area_um <- res$red_area_fraction*area_um
1443470025484:res$red_area_pixels_per_cell <- res$red_area_fraction*area_p/res$cell_count
1443470025508:res$red_area_um_per_cell <- res$red_area_fraction*area_um/res$cell_count
1443470025534:#green
1443470025534:res$green_area_pixels <- res$green_area_fraction*area_p
1443470026011:res$green_area_um <- res$green_area_fraction*area_um
1443470026468:res$green_area_pixels_per_cell <- res$green_area_fraction*area_p/res$cell_count
1443470026498:res$green_area_um_per_cell <- res$green_area_fraction*area_um/res$cell_count
1443470026674:### INNE
1443470027077:res$green_in_nuclei_mean_per_cell <- res$green_in_nuclei_mean/res$cell_count
1443470033768:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1443470035606:agg1 <- agg1[,-c(4,5,6,7,8)]
1443470035775:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1443470035959:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1443470036165:agg2<- agg2[,-c(3,4,5,6,7)]
1443470036428:names(agg2)[1:2] <- c("cell_line", "treatment")
1443470047082:system("mkdir output")
1443470048949:write.csv(res, "output/measurements_lyso.csv", row.names=F)
1443470049141:write.csv(agg1, "output/summary1_lyso.csv", row.names=F)
1443470049339:write.csv(agg2, "output/summary2_lyso.csv", row.names=F)
1443470550422:res$cell_count[grepl("414152", res$date)] <- NA
1443470553644:View(res)
1443470625840:res[,grepl("per_cell", names(res)]
1443470631328:res[,grepl("per_cell", names(res))]
1443470644176:res[,grepl("per_cell", names(res))] <- NA
1443470647001:View(res)
1443470725559:res<-res_all[grepl("CatD", res_all$file),]
1443470736949:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443470737150:meta <- meta[, -(1:5)]
1443470737539:### LABELS: LYSO
1443470737703:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1443470739949:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443470740108:meta <- meta[, -(1:5)]
1443470741889:meta <- meta[,-1]
1443470742208:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1443470749360:res <- merge(meta,res)
1443470750357:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1443470750517:res$cell_line <- droplevels(res$cell_line)
1443470756142:res <- res[,c(1:5,15,6:14,16:21)]
1443470759279:if (!is.na(file_list_in_nuclei[1])) {
1443470759455:res <- merge(res, in_nuclei, all.x=T)
1443470759626:}
1443470759769:res$file <- gsub("_", "/", res$file)
1443470760120:### AREA
1443470760256:#yellow
1443470760400:area_p <- 1024^2
1443470760584:area_um <- 18211.8110
1443470761049:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1443470761153:res$yellow_area_um <- res$yellow_area_fraction*area_um
1443470761201:res$yellow_area_pixels_per_cell <- res$yellow_area_fraction*area_p/res$cell_count
1443470761225:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res$cell_count
1443470761248:#red
1443470761248:res$red_area_pixels <- res$red_area_fraction*area_p
1443470761413:res$red_area_um <- res$red_area_fraction*area_um
1443470761459:res$red_area_pixels_per_cell <- res$red_area_fraction*area_p/res$cell_count
1443470761512:res$red_area_um_per_cell <- res$red_area_fraction*area_um/res$cell_count
1443470761538:#green
1443470761538:res$green_area_pixels <- res$green_area_fraction*area_p
1443470761564:res$green_area_um <- res$green_area_fraction*area_um
1443470761591:res$green_area_pixels_per_cell <- res$green_area_fraction*area_p/res$cell_count
1443470761617:res$green_area_um_per_cell <- res$green_area_fraction*area_um/res$cell_count
1443470761644:### INNE
1443470761644:res$green_in_nuclei_mean_per_cell <- res$green_in_nuclei_mean/res$cell_count
1443470785986:res$cell_count[grepl("414152", res$date)] <- NA
1443470810726:> res[grepl("414152", res$date),grepl("per_cell", names(res))] <- NA
1443470818826:res[grepl("414152", res$date),grepl("per_cell", names(res))] <- NA
1443470820925:View(res)
1443470836833:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1443470837003:agg1 <- agg1[,-c(4,5,6,7,8)]
1443470837199:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1443470837477:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1443470837521:agg2<- agg2[,-c(3,4,5,6,7)]
1443470837671:names(agg2)[1:2] <- c("cell_line", "treatment")
1443470840305:system("mkdir output")
1443470841110:write.csv(res, "output/measurements_lyso.csv", row.names=F)
1443470841248:write.csv(agg1, "output/summary1_lyso.csv", row.names=F)
1443470841431:write.csv(agg2, "output/summary2_lyso.csv", row.names=F)
1443470844579:write.csv(res, "output/measurements_catD", row.names=F)
1443470844731:write.csv(agg1, "output/summary1_catD", row.names=F)
1443470844950:write.csv(agg2, "output/summary2_catD", row.names=F)
1443471248847:View(agg2)
1443552562007:pth <- "/mnt/DATAPART1/Sasi"
1443552566690:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1443552566855:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1443552566997:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1443552567151:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1443552571879:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1443553164987:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1443553171065:measure_lsm_data <- matrix(NA)
1443553171211:for( file in file_list_measure_lsm) {
1443553171368:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1443553171520:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1443553171672:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1443553171848:}
1443553172393:measure_lsm_data <- measure_lsm_data[,-6]
1443553172393:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1443553172394:measure_lsm <- matrix(NA)
1443553172524:for( i in unique(measure_lsm_data$parameter)) {
1443553172635:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1443553172794:new <- new[,-1]
1443553172953:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443553173105:measure_lsm <- merge(measure_lsm, new)
1443553173256:}
1443553173705:measure_lsm <- measure_lsm[,-2]
1443553175201:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1443553175358:coloc_data <- matrix(NA)
1443553175514:for(file in file_list_coloc) {
1443553175682:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1443553175839:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1443553175990:coloc_data <- merge(coloc_data, new, all=T)
1443553176161:}
1443553176397:coloc_data <- coloc_data[,-6]
1443553176537:coloc_data$parameter <- as.character(coloc_data$parameter)
1443553176646:coloc <- matrix(NA)
1443553176793:for( i in unique(coloc_data$parameter)) {
1443553176973:new <- coloc_data[coloc_data$parameter == i,]
1443553177124:new <- new[,-1]
1443553177299:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443553177452:coloc <- merge(coloc, new)
1443553177609:}
1443553177793:coloc <- coloc[,c(1,5,8,11)]
1443553177952:names(coloc)[1] <- "Label"
1443553178119:#
1443553178279:count_data <- matrix(NA, 0, 13)
1443553178437:for ( file in file_list_count) {
1443553178589:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1443553178765:count_data <- rbind(count_data, new)
1443553178924:}
1443553179082:count <- count_data[count_data$Area > 99,]
1443553179227:count <- as.data.frame(xtabs(~Label, count))
1443553179379:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1443553179560:# green in nuclei
1443553179728:if (!is.na(file_list_in_nuclei[1])) {
1443553179900:print("Green in nuclei data detected, adding...")
1443553180064:in_nuclei_data <- matrix(NA)
1443553180231:for (file in file_list_in_nuclei) {
1443553180403:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1443553180561:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1443553180723:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1443553180882:}
1443553181052:in_nuclei <- matrix(NA)
1443553181198:for( i in unique(in_nuclei_data$parameter)) {
1443553181356:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1443553181526:new <- new[,-1]
1443553181733:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443553181851:in_nuclei <- merge(in_nuclei, new)
1443553182023:}
1443553182218:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1443553182366:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1443553182544:} else {
1443553182715:print("No green in nuclei data detected.")
1443553182878:}
1443553184510:### MERGE TABLES
1443553184666:res <- merge(measure_lsm, count, all=T)
1443553184836:res <- merge(res, coloc, by="Label", all=T)
1443553185024:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1443553185377:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1443553186226:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1443553186432:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1443553186593:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1443553186780:### META
1443553186956:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443553187135:meta <- meta[, -(1:5)]
1443553187324:### LABELS: LYSO
1443553197801:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443553220423:as.data.frame(strsplit(as.character(res$file), "_")
1443553224373:)
1443553268082:as.data.frame(strsplit(as.character(res$file), "_")
1443553272523:)
1443553283523:strsplit(as.character(res$file), "_")
1443553289403:View(res)
1443553392799:165/3
1443553471478:View(coloc)
1443553487877:coloc$Label
1443553546872:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1443553547021:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1443553547173:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1443553547317:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1443553550826:measure_lsm_data <- matrix(NA)
1443553550984:for( file in file_list_measure_lsm) {
1443553551151:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1443553551293:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1443553551429:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1443553551563:}
1443553552079:measure_lsm_data <- measure_lsm_data[,-6]
1443553552079:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1443553552080:measure_lsm <- matrix(NA)
1443553552252:for( i in unique(measure_lsm_data$parameter)) {
1443553552386:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1443553552811:new <- new[,-1]
1443553552833:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443553552919:measure_lsm <- merge(measure_lsm, new)
1443553552920:}
1443553552952:measure_lsm <- measure_lsm[,-2]
1443553553048:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1443553553090:coloc_data <- matrix(NA)
1443553553274:for(file in file_list_coloc) {
1443553553782:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1443553553801:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1443553553855:coloc_data <- merge(coloc_data, new, all=T)
1443553553899:}
1443553554139:coloc_data <- coloc_data[,-6]
1443553554139:coloc_data$parameter <- as.character(coloc_data$parameter)
1443553554140:coloc <- matrix(NA)
1443553554153:for( i in unique(coloc_data$parameter)) {
1443553554153:new <- coloc_data[coloc_data$parameter == i,]
1443553554154:new <- new[,-1]
1443553554154:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443553554163:coloc <- merge(coloc, new)
1443553554272:}
1443553554613:coloc <- coloc[,c(1,5,8,11)]
1443553555112:names(coloc)[1] <- "Label"
1443553555168:#
1443553555194:count_data <- matrix(NA, 0, 13)
1443553555268:for ( file in file_list_count) {
1443553555338:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1443553555339:count_data <- rbind(count_data, new)
1443553555339:}
1443553555472:count <- count_data[count_data$Area > 99,]
1443553555685:count <- as.data.frame(xtabs(~Label, count))
1443553555799:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1443553556276:# green in nuclei
1443553556299:if (!is.na(file_list_in_nuclei[1])) {
1443553556376:print("Green in nuclei data detected, adding...")
1443553556377:in_nuclei_data <- matrix(NA)
1443553556428:for (file in file_list_in_nuclei) {
1443553556458:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1443553556539:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1443553556576:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1443553556577:}
1443553556578:in_nuclei <- matrix(NA)
1443553556785:for( i in unique(in_nuclei_data$parameter)) {
1443553557284:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1443553557342:new <- new[,-1]
1443553557405:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443553557465:in_nuclei <- merge(in_nuclei, new)
1443553557466:}
1443553557507:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1443553557508:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1443553557609:} else {
1443553557609:print("No green in nuclei data detected.")
1443553557667:}
1443553557792:### MERGE TABLES
1443553557792:res <- merge(measure_lsm, count, all=T)
1443553557824:res <- merge(res, coloc, by="Label", all=T)
1443553557841:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1443553560089:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1443553565197:res <- merge(measure_lsm, count, all=T)
1443553603249:count$Label <- as.factor(count$Label)
1443553611244:res <- merge(measure_lsm, count, all=T)
1443553625630:length(unique(res$Label))
1443553633325:res$Label
1443554098500:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1443554102915:measure_lsm_data <- matrix(NA)
1443554103118:for( file in file_list_measure_lsm) {
1443554103258:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1443554103479:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1443554103717:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1443554103853:}
1443554104076:measure_lsm_data <- measure_lsm_data[,-6]
1443554104278:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1443554104304:measure_lsm <- matrix(NA)
1443554104495:for( i in unique(measure_lsm_data$parameter)) {
1443554104762:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1443554104762:new <- new[,-1]
1443554104976:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443554105112:measure_lsm <- merge(measure_lsm, new)
1443554105501:}
1443554105717:measure_lsm <- measure_lsm[,-2]
1443554111729:res <- merge(measure_lsm, count, all=T)
1443554114141:res <- merge(res, coloc, by="Label", all=T)
1443554122823:res$Label
1443554146373:View(measure_lsm)
1443554155249:measure_lsm$Label
1443554219994:measure_lsm_data <- matrix(NA)
1443554220327:for( file in file_list_measure_lsm) {
1443554220637:Label <- c(gsub(".tif_measure_tif.tsv", "", as.character(file)))
1443554222342:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1443554222565:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1443554223772:}
1443554225466:measure_lsm_data <- measure_lsm_data[,-6]
1443554225668:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1443554226443:measure_lsm <- matrix(NA)
1443554226626:for( i in unique(measure_lsm_data$parameter)) {
1443554226778:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1443554226949:new <- new[,-1]
1443554227121:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1443554227279:measure_lsm <- merge(measure_lsm, new)
1443554227455:}
1443554227757:measure_lsm <- measure_lsm[,-2]
1443554234423:res <- merge(measure_lsm, count, all=T)
1443554236211:res <- merge(res, coloc, by="Label", all=T)
1443554249592:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1443554250049:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1443554252269:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1443554252463:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1443554252612:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1443554253035:### META
1443554253234:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1443554253554:meta <- meta[, -(1:5)]
1443554261474:View(meta)
1443554275258:meta <- meta[,-1]
1443554275880:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1443554278630:res <- merge(meta,res)
1443554280173:View(meta)
1443554286346:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1443554286727:res$cell_line <- droplevels(res$cell_line)
1443554294879:res <- res[,c(1:5,15,6:14,16:21)]
1443554297510:if (!is.na(file_list_in_nuclei[1])) {
1443554297950:res <- merge(res, in_nuclei, all.x=T)
1443554298130:}
1443554298367:res$file <- gsub("_", "/", res$file)
1443554298696:### AREA
1443554299050:#yellow
1443554299304:area_p <- 1024^2
1443554299502:area_um <- 18211.8110
1443554299699:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1443554299755:res$yellow_area_um <- res$yellow_area_fraction*area_um
1443554299900:res$yellow_area_pixels_per_cell <- res$yellow_area_fraction*area_p/res$cell_count
1443554300061:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res$cell_count
1443554300303:#red
1443554300466:res$red_area_pixels <- res$red_area_fraction*area_p
1443554300618:res$red_area_um <- res$red_area_fraction*area_um
1443554300800:res$red_area_pixels_per_cell <- res$red_area_fraction*area_p/res$cell_count
1443554300962:res$red_area_um_per_cell <- res$red_area_fraction*area_um/res$cell_count
1443554301122:#green
1443554301290:res$green_area_pixels <- res$green_area_fraction*area_p
1443554301479:res$green_area_um <- res$green_area_fraction*area_um
1443554301683:res$green_area_pixels_per_cell <- res$green_area_fraction*area_p/res$cell_count
1443554301801:res$green_area_um_per_cell <- res$green_area_fraction*area_um/res$cell_count
1443554301982:### INNE
1443554302146:res$green_in_nuclei_mean_per_cell <- res$green_in_nuclei_mean/res$cell_count
1443554350927:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1443554351098:agg1 <- agg1[,-c(4,5,6,7,8)]
1443554351307:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1443554351585:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1443554351623:agg2<- agg2[,-c(3,4,5,6,7)]
1443554351794:names(agg2)[1:2] <- c("cell_line", "treatment")
1443554354489:system("mkdir output")
1443554356849:View(agg1)
1443554362948:View(agg2)
1443554385332:View(agg2)
1443554613696:agg3 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1443554614042:agg3 <- agg3[,-c(3,4,5,6,7)]
1443554614080:names(agg3)[1:2] <- c("cell_line", "treatment")
1443554649837:agg4 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1443554650146:agg4 <- agg4[,-c(3,4,5,6,7)]
1443554650176:names(agg4)[1:2] <- c("cell_line", "treatment")
1443554652973:View(agg4)
1443554657075:View(agg1)
1443554659973:View(agg4)
1443554701762:agg4 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1443554702063:agg4 <- agg4[,-c(3,4,5,6,7)]
1443554702092:names(agg4)[1:2] <- c("cell_line", "treatment", 'date')
1443554713407:names(agg4)[1:3] <- c("cell_line", "treatment", 'date')
1443554717627:View(agg4)
1443554735876:View(agg4)
1443554769694:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1443554770010:agg1 <- agg1[,-c(4,5,6,7,8)]
1443554770131:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1443554774007:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1443554774306:agg2<- agg2[,-c(3,4,5,6,7)]
1443554774436:names(agg2)[1:2] <- c("cell_line", "treatment")
1443554791781:write.csv(res, "output/measurements_catD", row.names=F)
1443554792953:write.csv(agg2, "output/summary2_catD", row.names=F)
1443554802544:write.csv(agg2, "output/summary_catD", row.names=F)
1443554858615:write.csv(res, "output/measurements_caD.csv", row.names=F)
1443554859402:write.csv(agg2, "output/summary_catD.csv", row.names=F)
1443554907266:write.csv(res, "output/measurements_catD.csv", row.names=F)
1443555081898:rm(agg1, agg2,agg3,agg4)
1443564418751:system("mv script.R R/script.R")
1443565162547:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443565284081:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443566286781:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443566666898:go.path = file.path(CACHE.DIR, "GO.rda")
1443566667744:if (!file.exists(go.path)) {
1443566667956:path = file.path(CACHE.DIR, "gene2go.gz")
1443566668326:if (!file.exists(path)) {
1443566668628:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2go.gz", path)
1443566668922:}
1443566670036:h = gzfile(path, open="r")
1443566670297:o = read.table(h, skip=1, sep="\t",
1443566670648:col.names=c("Taxon ID", "Gene ID", "Term ID", "Evidence", "Qualifier", "Term Name", "PMID", "Category"))
1443566671496:nv = o$Term.Name
1443566671709:names(nv) = o$Term.ID
1443566672286:GO <<- list(
1443566672589:table=o,
1443566672882:terms=nv[unique(names(nv))],
1443566673051:annotation=by(o, o$Taxon.ID,
1443566673209:function(ts) {
1443566673346:by(ts, ts$Term.ID, function(x) {
1443566673498:unique(x$Gene.ID)
1443566673656:})
1443566673814:}))
1443566673959:save(GO, file=go.path)
1443566674150:} else {
1443566674311:if (!("GO" %in% ls())) {
1443566674469:load(go.path)
1443566674878:}
1443566675029:}
1443566675205:}
1443567627619:path = file.path(CACHE.DIR, "gene2go.gz")
1443567629190:h = gzfile(path, open="r")
1443567630045:o = read.table(h, skip=1, sep="\t",
1443567630303:col.names=c("Taxon ID", "Gene ID", "Term ID", "Evidence", "Qualifier", "Term Name", "PMID", "Category"))
1443567640790:nv = o$Term.Name
1443568029048:"GO" in ls()
1443568037848:"GO" %iN% ls()
1443568041151:"GO" %in% ls()
1443568056234:!9"GO" %in% ls())
1443568059577:!("GO" %in% ls())
1443644880992:class(pred)
1443644884431:class(predictions)
1443644891231:names(predictions)
1443644969551:class(spe)
1443645043682:dim(X, 1)
1443645051529:dim(X)[1]
1443645121834:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=3, tx_input_list=NULL) {
1443645121834:taxon.id = as.character(taxon.id)
1443645121834:At = A$annotation[[taxon.id]]
1443645121834:background = intersect(unique(unlist(At)), rownames(X))
1443645121835:if(dim(X)[1] == dim(X)[2]) {
1443645121835:r = X
1443645121835:} else {
1443645121835:r = most.correlated(X, subset=background, tx_input_list, k)
1443645121836:}
1443645121836:#r = top.correlated(X, subset=background, k=k)
1443645121836:mclapply(r, function(c1) { # dla każdego transkryptu
1443645121837:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1443645121837:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1443645121837:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1443645121838:oo = NULL
1443645121838:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1443645121838:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1443645121838:if (ct[1,1] >= min.count) {
1443645121839:fet = fisher.test(ct)
1443645121839:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1443645121839:oo = as.numeric(fet$estimate)
1443645121840:#oo = fet$p.value * sign(log10(as.numeric(fet$estimate)))
1443645121840:} else {
1443645121840:oo <- NA
1443645121841:}
1443645121841:} else {
1443645121841:oo <- NA
1443645121842:}
1443645121842:})
1443645121842:unlist(o)
1443645121843:}, mc.cores=NCPU)
1443645121843:}
1443645142939:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443645303774:ls()
1443645329822:?ls
1443645486396:ylab
1443645526359:ylab <- ylabels(GO)
1443645529937:ylab <- y.labels(GO)
1443645549717:prepare.env()
1443645591213:ylab <- y.labels(GO)
1443645600491:ylab[1]
1443645661544:ylab <- y.labels(GO, yhat)
1443645674469:yhat
1443645704979:yhat <- y.hat.from.pred(predictions)
1443645746036:ylab <- y.labels(GO, yhat)
1443645750280:ylab[1]
1443645774509:spe <- specif(yhat, ylab)
1443646471367:yhat[[2]]
1443646486109:summary(yhat[[2]])
1443646635137:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443647138441:specificity(yhat$`55`, as.factor(ylab$`55`))
1443647298843:y.hat <- yhat
1443647309091:y.lab =  ylab
1443647324482:o <- mclapply(list(names(y.hat)), function(tx) {
1443647324765:oo <- specificity(y.hat[names(y.hat) == tx], as.factor(y.lab[names(y.lab) == tx]))
1443647325015:}, mc.cores = NCPU)
1443647549151:o <- mclapply(list(names(y.hat)), function(tx) {
1443647549748:oo <- specificity(y.hat[names(y.hat) == tx], as.factor(y.lab[names(y.lab) == tx]))
1443647550000:}, mc.cores = NCPU)
1443647580818:prepare.env()
1443647641657:o <- mclapply((names(y.hat)), function(tx) {
1443647642141:oo <- specificity(y.hat[names(y.hat) == tx], as.factor(y.lab[names(y.lab) == tx]))
1443647642500:}, mc.cores = NCPU)
1443647651306:o <- mclapply(list(names(y.hat)), function(tx) {
1443647651569:oo <- specificity(y.hat[names(y.hat) == tx], as.factor(y.lab[names(y.lab) == tx]))
1443647651849:}, mc.cores = NCPU)
1443647723070:names(t.lab)
1443647726437:names(y.lab)
1443647735398:tx=
1443647743029:"55"
1443647753209:oo <- specificity(y.hat[names(y.hat) == tx], as.factor(y.lab[names(y.lab) == tx]))
1443647879004:y.hat[names(y.hat) == tx],
1443647884303:y.hat[names(y.hat) == tx]
1443647900845:as.factor(y.lab[names(y.lab) == tx]
1443647906162:)
1443647931180:y.lab[names(y.lab) == tx]
1443648056539:y.lab <- mclapply(y.lab, function(tx){
1443648056778:tx <- as.factor(tx)
1443648057005:}, mc.cores = NCPU)
1443648059574:o <- mclapply(list(names(y.hat)), function(tx) {
1443648059850:oo <- specificity(y.hat[names(y.hat) == tx], y.lab[names(y.lab) == tx])
1443648060079:}, mc.cores = NCPU)
1443648102281:y.lab[[1]]
1443648107909:oo <- specificity(y.hat[names(y.hat) == tx], y.lab[names(y.lab) == tx])
1443648155722:names(y.lab)
1443648198527:y.hat[names(y.hat) == tx]
1443648202631:y.lab[names(y.lab) == tx]
1443648210201:oo <- specificity(y.hat[names(y.hat) == tx], y.lab[names(y.lab) == tx])
1443648254279:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443648256981:oo <- specificity(y.hat[[names(y.hat) == tx]], y.lab[[names(y.lab) == tx]])
1443648268494:y.hat[[names(y.hat) == tx]]
1443648294192:y.lab[names(y.lab) == tx][1]
1443648318955:head(y.lab[names(y.lab) == tx][[1]])
1443648333162:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443648339498:head(y.lab[names(y.lab) == tx][[1]])
1443648343681:y.hat[[names(y.hat) == tx]]
1443648346518:oo <- specificity(y.hat[names(y.hat) == tx][[1]], y.lab[names(y.lab) == tx][[1]])
1443648383804:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443648429606:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443648449934:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443648480636:spe <- specif(yhat,ylab)
1443648497978:specif <- function(y.hat, y.lab) {
1443648497978:o <- mclapply(list(names(y.hat)), function(tx) {
1443648497978:oo <- specificity(y.hat[names(y.hat) == tx][[1]], as.factor(y.lab[names(y.lab) == tx][[1]]))
1443648497979:}, mc.cores = NCPU)
1443648497979:#names(o) <- names(y.hat)
1443648497979:o
1443648497979:}
1443648502811:spe <- specif(yhat,ylab)
1443648560766:specif <- function(y.hat, y.lab) {
1443648560767:o <- mclapply(names(y.hat), function(tx) {
1443648560767:oo <- specificity(y.hat[names(y.hat) == tx][[1]], as.factor(y.lab[names(y.lab) == tx][[1]]))
1443648560767:}, mc.cores = NCPU)
1443648560767:#names(o) <- names(y.hat)
1443648560768:o
1443648560768:}
1443648566698:spe <- specif(yhat,ylab)
1443648581428:specif <- function(y.hat, y.lab) {
1443648581428:o <- mclapply(names(y.hat), function(tx) {
1443648581429:oo <- specificity(y.hat[names(y.hat) == tx][[1]], as.factor(y.lab[names(y.lab) == tx][[1]]))
1443648581429:}, mc.cores = NCPU)
1443648581429:names(o) <- names(y.hat)
1443648581429:o
1443648581430:}
1443648583702:spe <- specif(yhat,ylab)
1443648708368:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443648785878:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443648808074:sen <- sensit(yhat, ylab)
1443648870349:?AUC
1443649179649:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443650833450:ROC <- auroc(rocurv, yhat,ylab)
1443650857149:auroc <- function(measure, min=0, max=1) {
1443650857149:o <- mclapply(measure, function(tx){
1443650857150:oo  <- auc(tx, min, max)
1443650857150:}, mc.cores = NCPU)
1443650857150:}
1443650861185:ROC <- auroc(rocurv, yhat,ylab)
1443650983887:auroc <- function(measure, min=0, max=1) {
1443650983887:o <- mclapply(names(measure), function(tx){
1443650983887:oo  <- auc(measure[names(measure)==tx][[1]], min, max)
1443650983887:}, mc.cores = NCPU)
1443650983888:names(o) <- names(measure)
1443650983888:o
1443650983888:}
1443650988775:ROC <- auroc(rocurv, yhat,ylab)
1443651064573:ROC <- auroc(spe, yhat,ylab)
1443651122649:measure[names(measure)==tx][[1]]
1443651132549:measure<-spe
1443651133948:measure[names(measure)==tx][[1]]
1443651171538:oo  <- auc(measure[names(measure)==tx][[1]], min, max)
1443651226173:measure[names(measure)==tx]
1443651332499:x <- measure[names(measure)==tx]
1443651349830:auc(x)
1443651401249:auc(spe[[1]])
1443651409560:auc(spe[[2]])
1443652102427:ROCURV <- rocurv(yhat, ylab)
1443652125223:auc(ROCURV[[2]])
1443652130298:auc(ROCURV[[1]])
1443652200923:auc <- function(measure, min=0, max=1) {
1443652200923:o <- mclapply(names(measure), function(tx){
1443652200923:oo  <- auc(measure[names(measure)==tx][[1]], min, max)
1443652200924:}, mc.cores = NCPU)
1443652200924:names(o) <- names(measure)
1443652200924:o
1443652200924:}
1443652216148:AUROC <- auc(ROCURV)
1443652272704:measure = AUROC[[1]]
1443652326567:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443652336781:prepare.env()
1443652377274:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443652394329:rm(prepare.env())
1443652396899:rm(prepare.env
1443652398373:)
1443652706599:Roc <- roc.all(yhat,ylab)
1443652724500:Auc <- auc.all(Roc)
1443652733599:rm(AUROC)
1443652815378:measure[names(measure)==tx][[1]]
1443652829698:measure[names(measure)==tx]
1443652844624:measure <- Roc
1443652846274:measure[names(measure)==tx]
1443652848233:measure[names(measure)==tx][[1]]
1443652885488:auc.all <- function(measure, min=0, max=1) {
1443652885489:o <- mclapply(names(measure), function(tx){
1443652885489:oo  <- auc(measure[names(measure)==tx][[1]], min, max)
1443652885489:unlist(oo)
1443652885489:}, mc.cores = NCPU)
1443652885490:names(o) <- names(measure)
1443652885490:o
1443652885490:}
1443652899824:Auc <- auc.all(Roc)
1443652994404:oo  <- auc(measure[names(measure)==tx][[1]], min, max)
1443653032082:measure[1]
1443653047773:measure[names(measure)==tx][[1]]
1443653065256:class(measure[names(measure)==tx][[1]])
1443653084323:plot(measure[names(measure)==tx][[1]])
1443653101774:plot(measure[names(measure)=='221150'][[1]])
1443653411425:class(measure)
1443653484538:class(measure[[1]])
1443653550801:x <- auc(measure[[1]])
1443653566773:x[[1]]
1443653569098:x
1443653602999:x <- auc(roc(yhat[[1]], ylab[[1]]))
1443653666049:yhat[[1]]
1443653675173:ylab[[1]]
1443653737155:Roc[[1]]
1443653814404:auc(Roc[[1]])
1443653824074:auc(spe[[1]])
1443653845162:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443653851505:take.off
1443653854323:take.off()
1443653873504:library(AUC)
1443653880232:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443654071837:rm(functions, h, info.path, nv, o,oo,path,ROC,ROCURV,x)
1443654077727:rm(auc, )
1443654116333:take.off()
1443654133382:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443654152074:Auc <- auc.all(Roc)
1443656455983:?stop
1443656580096:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443656615534:A <-auc.from.pred(predictions)
1443659306038:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443660811938:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443661525857:dim(X)
1443720259374:dim(tcga.expression.matrix())
1443720266660:dim(tcga.expression.matrix)
1443720410610:take.off()
1443720431949:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443720446162:rm(take.off())
1443720458264:rm(take.off)
1443720958574:predictions[[1]]
1443721054990:?fisher.test
1443721384874:?sample
1443722785681:source('/mnt/DATAPART1/rnaseq/R/get.data.R')
1443723059089:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443724168126:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443725599566:X = read.table("expression.gene.v2.tsv")
1443725611007:Xp = preprocess(X)
1443725618865:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(Xp)) #[2001:2200]
1443725618936:Xp.q = Xp[q,]
1443727134259:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727177510:correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443727222817:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727229056:correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443727613972:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727619915:correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443727632636:c=correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443727704075:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727705791:c=correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443727732328:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727734175:c=correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443727775362:sum(colnames(t(X)) == tx)
1443727825203:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727825378:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727828823:sum(colnames(t(X)) == tx)
1443727831367:c=correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443727885753:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443727889394:c=correlation.selected(Xp, tx_input_list = c("55", "221150"))
1443728062451:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443728110990:View(predict.annotations.knn)
1443729040436:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443729764521:source('/mnt/DATAPART1/rnaseq/R/fpredict.R')
1443730934886:NCPU =4
