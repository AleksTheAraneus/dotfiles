1437151742431:install.packages("ggplot2")
1437156519447:install.packages("plyr")
1437157325606:install.packages(c("ggplot2", "plyr"))
1437162240581:cd /media/perza/DATAPART1
1437162245691:pwd /media/perza/DATAPART1
1437162252265:wd /media/perza/DATAPART1
1437162292973:setwd("/media/perza/DATAPART1")
1437164133867:fasta.ftp <- "ftp://ftp.ensembl.org/pub/release-81/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.1.fa.gz"
1437164136683:download.file(fasta.ftp, fasta_ftp.fa.gz)
1437164148288:download.file(fasta.ftp, "fasta_ftp.fa.gz")
1437405983907:wd $HOME
1437761032426:install.packages("ggplot2")
1437761098093:install.packages("ggplot2")
1437761158093:install.packages(c("ggplot2", "plyr"))
1437761235439:install.packages(c("ggplot2", "plyr"))
1437761329228:install.packages(c("ggplot2", "plyr"))
1437761352467:ggplot()
1437761358556:qplot()
1437761372892:library(ggplot2)
1437761374985:qplot()
1438010159439:source("http://bioconductor.org/biocLite.R")
1438010171511:biocLite("Rsamtools")
1438010510638:biocLite("SRAdb")
1438010824627:biocLite("Biobase")
1438011075776:biocLite("SRAdb")
1438011286700:biocLite("RCurl")
1438011681226:biocLite("RCurl")
1438011950155:biocLite("SRAdb")
1438012348526:biocLite("GenomicAlignments")
1438012629662:install.packages("parallel")
1438014433481:wd /mnt/DATAPART1
1438014438457:setwd /mnt/DATAPART1
1438014445754:setwd "/mnt/DATAPART1"
1438014456907:setwd "/mnt/DATAPART1"
1438014465150:setwd
1438014473572:setwd "/mnt/DATAPART1"
1438014488376:setwd("/mnt/DATAPART1")
1438014726054:library(SRAdb)
1438014730396:if(!file.exists('SRAmetadb.sqlite')) {
1438014730564:start.time <- proc.time()
1438014730698:sqlfile <<- getSRAdbFile()
1438014730875:finish.time <- proc.time()
1438014731195:}
1438020026374:start.time
1438020036041:finish.time
1438020145248:proc.time()-start.time
1438020452586:sql.file <- 'SRAmetadb.sqlite'
1438020455081:sra.con <- dbConnect(SQLite(), sql.file)
1438020468979:dbListFiles(sra.con)
1438020479247:dbListTables(sra.con)
1438023352842:colDescriptions(sra.con)[1:5,]
1438023570681:colDescriptions(sra.con)
1438034482578:install.packages("pheatmap")
1438034568121:map <- read.csv("mart_export.txt", header=T)
1438034602236:map2 <- read.csv("mart_export(1).txt", header=T)
1438034640228:data <- read.csv("most_correlated.csv", header=T)[,-1]
1438034648832:View(data)
1438034670987:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438034671827:cnt.mat2 <- cnt.mat[1:500,]
1438034676387:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438034677522:rownames(cor) <- cnt.mat2[,1]
1438034677771:colnames(cor) <- cnt.mat2[,1]
1438034679806:tx <- matrix(nrow=nrow(cor), ncol=ncol(cor))
1438034680067:for(n in (1:ncol(cor))) {
1438034680564:tx[,n] <- colnames(cor)[n]
1438034680996:}
1438034693555:i <- 1:nrow(cor)
1438034693719:res.pos <- lapply(i, function(i) {
1438034693882:row <- rbind(colnames(cor)[-i], cor[i,-i])
1438034694074:row[2,] <- as.numeric(row[2,])
1438034694307:row <- row[,order(as.numeric(row[2,]), decreasing=T, na.last=T)]
1438034694465:row <- array(row, dim=c(2, ncol(cor)-1))
1438034694613:})
1438034695019:# i <- 1:nrow(cor)
1438034695522:# res.neg <- lapply(i, function(i) {
1438034695550:#   row <- rbind(colnames(cor)[-i], cor[i,-i])
1438034695666:#   row[2,] <- as.numeric(row[2,])
1438034695667:#   row <- row[,order(row[2,], decreasing=F, na.last=T)]
1438034695688:#   row <- array(row, dim=c(2, ncol(cor)-1))
1438034695948:# })
1438034695948:# use reshape2 for speed?
1438034695980:# add header?
1438034696378:data <- data.frame()
1438034696406:for(i in (1:nrow(cor))) {
1438034696534:chunk <- cbind(c(rownames(cor)[i], recursive=T), t(res.pos[[i]]))
1438034696534:data <- rbind(data, chunk)
1438034696557:}
1438034730344:names(data) <- c("gene1_id", "gene2_id", "correlation")
1438034730344:data$correlation <- as.numeric(levels(data$correlation))[data$correlation] #necessary?
1438034730352:write.csv(data, file="most_correlated.csv")
1438034731022:# graphical evaluation? md report
1438034748111:library(pheatmap)
1438034767307:pheatmap(cor)
1438099742949:url <- "http://uswest.ensembl.org/biomart/martview/ee4a66d436f2eab5ad275e454e656919?VIRTUALSCHEMANAME=default&ATTRIBUTES=hsapiens_gene_ensembl.default.feature_page.ensembl_gene_id|hsapiens_gene_ensembl.default.feature_page.ensembl_transcript_id|hsapiens_gene_ensembl.default.feature_page.name_1006|hsapiens_gene_ensembl.default.feature_page.definition_1006|hsapiens_gene_ensembl.default.feature_page.entrezgene|hsapiens_gene_ensembl.default.feature_page.ensembl_exon_id|hsapiens_gene_ensembl.default.feature_page.ensembl_peptide_id|hsapiens_gene_ensembl.default.feature_page.chromosome_name|hsapiens_gene_ensembl.default.feature_page.start_position|hsapiens_gene_ensembl.default.feature_page.end_position|hsapiens_gene_ensembl.default.feature_page.strand|hsapiens_gene_ensembl.default.feature_page.transcript_start|hsapiens_gene_ensembl.default.feature_page.transcript_end|hsapiens_gene_ensembl.default.feature_page.description|hsapiens_gene_ensembl.default.feature_page.refseq_mrna|hsapiens_gene_ensembl.default.feature_page.refseq_ncrna&FILTERS=&VISIBLEPANEL=resultspanel"
1438100228430:url <- "http://uswest.ensembl.org/biomart/martview/ee4a66d436f2eab5ad275e454e656919?VIRTUALSCHEMANAME=default&ATTRIBUTES=hsapiens_gene_ensembl.default.feature_page.ensembl_gene_id|hsapiens_gene_ensembl.default.feature_page.ensembl_transcript_id|hsapiens_gene_ensembl.default.feature_page.name_1006|hsapiens_gene_ensembl.default.feature_page.definition_1006|hsapiens_gene_ensembl.default.feature_page.entrezgene|hsapiens_gene_ensembl.default.feature_page.ensembl_exon_id|hsapiens_gene_ensembl.default.feature_page.ensembl_peptide_id|hsapiens_gene_ensembl.default.feature_page.chromosome_name|hsapiens_gene_ensembl.default.feature_page.start_position|hsapiens_gene_ensembl.default.feature_page.end_position|hsapiens_gene_ensembl.default.feature_page.strand|hsapiens_gene_ensembl.default.feature_page.transcript_start|hsapiens_gene_ensembl.default.feature_page.transcript_end|hsapiens_gene_ensembl.default.feature_page.description|hsapiens_gene_ensembl.default.feature_page.refseq_mrna|hsapiens_gene_ensembl.default.feature_page.refseq_ncrna&FILTERS=&VISIBLEPANEL=resultspanel"
1438100229927:download.file(url, destfile="mart_export.txt")
1438100241464:mart <- read.csv("mart_export.txt", header=T)
1438100246220:data <- read.csv("most_correlated.csv", header=T)[,-1]
1438100266419:SETWD()
1438100270287:setwd()
1438100636193:help(tcrossprod)
1438100724790:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438100726246:cnt.mat2 <- cnt.mat[1:500,]
1438100728814:start <- proc.time()
1438100728993:cor <- cor(t(cnt.mat[,-1]), method="pearson", use="everything")
1438101764821:View(cnt.mat)
1438102427365:cnt.mat2 <- cnt.mat[1:500,]
1438102428966:start <- proc.time()
1438102429124:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102429514:end <- proc.time-start
1438102531009:start <- proc.time()
1438102533027:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102553530:View(cnt.mat2)
1438102605358:cnt.mat2 <- cnt.mat[1:200,]
1438102607852:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102613417:View(cnt.mat2)
1438102616604:View(cor)
1438102660069:cnt.mat2 <- cnt.mat[1:1000,]
1438102661383:start <- proc.time()
1438102662686:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102663582:end <- proc.time-start
1438102676335:end <- proc.time()-start
1438102680254:start <- proc.time()
1438102680451:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102680582:end <- proc.time()-start
1438102698384:cnt.mat2 <- cnt.mat[1:5000,]
1438102699387:start <- proc.time()
1438102699567:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102700031:end <- proc.time()-start
1438102708576:cnt.mat2 <- cnt.mat[1:10000,]
1438102709861:start <- proc.time()
1438102710085:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102711786:end <- proc.time()-start
1438102906102:cnt.mat2 <- cnt.mat[1:30000,]
1438102907992:start <- proc.time()
1438102909468:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438102924844:end <- proc.time()-start
1438103141679:install.packages("parallel")
1438103272737:install.packages("doParallel")
1438103299834:detectCores()
1438103308263:library(doParallel)
1438103310082:detectCores()
1438103363591:start <- proc.time()
1438103363791:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438103378231:end <- proc.time()-start
1438103415349:detach("package:doParallel", unload=TRUE)
1438103464994:install.packages("WGCNA")
1438103502122:source("http://bioconductor.org/biocLite.R")
1438103502419:biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
1438103722011:library(WGCNA)
1438103740127:library(WGCNA)
1438103742172:install.packages("WGCNA")
1438103806976:library(WGCNA)
1438103816405:start <- proc.time()
1438103816562:cor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438103831525:end <- proc.time()-start
1438103915935:?cor
1438104024430:cr <- tcrossprod(cnt.mat2)
1438104059356:cr <- tcrossprod(cnt.mat2, cnt.mat2)
1438104388028:install.packages("parallel-package")
1438104650060:bigcor <- function(
1438104650060:x,
1438104650060:fun = c("cor", "cov"),
1438104650061:size = 2000,
1438104650061:verbose = TRUE,
1438104650061:to.ffdf = FALSE,
1438104650061:...)
1438104650061:{
1438104650061:library(ff, quietly = TRUE)
1438104650061:fun <- match.arg(fun)
1438104650062:if (fun == "cor") FUN <- cor else FUN <- cov
1438104650062:if (fun == "cor") STR <- "Correlation" else STR <- "Covariance"
1438104650062:NCOL <- ncol(x)
1438104650062:## calculate remainder, largest 'size'-divisible integer and block size
1438104650063:REST <- NCOL %% size
1438104650063:LARGE <- NCOL - REST
1438104650063:NBLOCKS <- NCOL %/% size
1438104650063:## preallocate square matrix of dimension
1438104650063:## ncol(x) in 'ff' single format
1438104650064:resMAT <- ff(vmode = "double", dim = c(NCOL, NCOL))
1438104650064:## split column numbers into 'nblocks' groups + remaining block
1438104650064:GROUP <- rep(1:NBLOCKS, each = size)
1438104650064:if (REST > 0) GROUP <- c(GROUP, rep(NBLOCKS + 1, REST))
1438104650065:SPLIT <- split(1:NCOL, GROUP)
1438104650065:## create all unique combinations of blocks
1438104650065:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438104650066:COMBS <- t(apply(COMBS, 1, sort))
1438104650066:COMBS <- unique(COMBS)
1438104650066:## initiate time counter
1438104650067:timeINIT <- proc.time()
1438104650067:## iterate through each block combination, calculate correlation matrix
1438104650067:## between blocks and store them in the preallocated matrix on both
1438104650068:## symmetric sides of the diagonal
1438104650068:for (i in 1:nrow(COMBS)) {
1438104650068:COMB <- COMBS[i, ]
1438104650068:G1 <- SPLIT[[COMB[1]]]
1438104650069:G2 <- SPLIT[[COMB[2]]]
1438104650069:if (verbose) cat(STR, "of Block", COMB[1], "and Block", COMB[2],
1438104650069:"(", length(G1), "x", length(G2), ") ... ")
1438104650070:flush.console()
1438104650070:RES <- FUN(x[, G1], x[, G2], ...)
1438104650070:resMAT[G1, G2] <- RES
1438104650071:resMAT[G2, G1] <- t(RES)
1438104650071:if (verbose) {
1438104650071:timeNOW <- proc.time() - timeINIT
1438104650072:cat(timeNOW[3], "s\n")
1438104650072:}
1438104650072:gc()
1438104650073:}
1438104650073:## remove added colums from the beginning
1438104650074:## optionally convert to matrix format. Beware: takes long!
1438104650075:if (to.ffdf) {
1438104650075:if (verbose) cat("=> Converting to ffdf matrix ... ")
1438104650075:resMAT <- as.ffdf(resMAT)
1438104650076:timeNOW <- proc.time() - timeINIT
1438104650076:if (verbose) cat(timeNOW[3], "s\n")
1438104650076:}
1438104650077:return(resMAT)
1438104650077:}
1438104686583:cor <- cor(cnt.mat2[,-1], method="pearson", use="everything")
1438104690930:View(cor)
1438104755836:cnt.mat2 <- t(cnt.mat2)
1438104758974:start <- proc.time()
1438104759135:cor <- cor(cnt.mat2[,-1], method="pearson", use="everything")
1438104759298:bigcor <- cor(t(cnt.mat2[,-1]), method="pearson", use="everything")
1438104772298:cnt.mat2 <- cnt.mat[1:30000,]
1438104773510:cnt.mat2 <- t(cnt.mat2)
1438104776724:View(cnt.mat2)
1438104779831:View(cnt.mat2)
1438104811136:cnt.mat2 <- cnt.mat[1:30000,]
1438104811582:cnt.mat2 <- t(cnt.mat2[,-1])
1438104815198:cor <- cor(cnt.mat2, method="pearson", use="everything")
1438104849301:bigcor <- cor(cnt.mat2, fun="cor")
1438104856248:bigcor <- cor(cnt.mat2, fun="cor")
1438104869654:bigcor <- bigcor(cnt.mat2, fun="cor")
1438104881506:install.packages("ff")
1438104914055:library(ff)
1438104916947:bigcor <- bigcor(cnt.mat2, fun="cor")
1438105157511:bigcor <- function(
1438105157511:x,
1438105157511:fun = c("cor", "cov"),
1438105157511:size = 2000,
1438105157511:verbose = TRUE,
1438105157511:to.ffdf = FALSE,
1438105157512:...)
1438105157512:{
1438105157512:library(ff, quietly = TRUE)
1438105157512:fun <- match.arg(fun)
1438105157512:if (fun == "cor") FUN <- cor else FUN <- cov
1438105157512:if (fun == "cor") STR <- "Correlation" else STR <- "Covariance"
1438105157513:FUN=cor()
1438105157513:NCOL <- ncol(x)
1438105157513:## calculate remainder, largest 'size'-divisible integer and block size
1438105157513:REST <- NCOL %% size
1438105157514:LARGE <- NCOL - REST
1438105157514:NBLOCKS <- NCOL %/% size
1438105157514:## preallocate square matrix of dimension
1438105157514:## ncol(x) in 'ff' single format
1438105157515:resMAT <- ff(vmode = "double", dim = c(NCOL, NCOL))
1438105157515:## split column numbers into 'nblocks' groups + remaining block
1438105157515:GROUP <- rep(1:NBLOCKS, each = size)
1438105157515:if (REST > 0) GROUP <- c(GROUP, rep(NBLOCKS + 1, REST))
1438105157516:SPLIT <- split(1:NCOL, GROUP)
1438105157516:## create all unique combinations of blocks
1438105157516:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438105157517:COMBS <- t(apply(COMBS, 1, sort))
1438105157517:COMBS <- unique(COMBS)
1438105157517:## initiate time counter
1438105157517:timeINIT <- proc.time()
1438105157518:## iterate through each block combination, calculate correlation matrix
1438105157518:## between blocks and store them in the preallocated matrix on both
1438105157518:## symmetric sides of the diagonal
1438105157519:for (i in 1:nrow(COMBS)) {
1438105157519:COMB <- COMBS[i, ]
1438105157519:G1 <- SPLIT[[COMB[1]]]
1438105157520:G2 <- SPLIT[[COMB[2]]]
1438105157520:if (verbose) cat(STR, "of Block", COMB[1], "and Block", COMB[2],
1438105157520:"(", length(G1), "x", length(G2), ") ... ")
1438105157520:flush.console()
1438105157521:RES <- FUN(x[, G1], x[, G2], ...)
1438105157521:resMAT[G1, G2] <- RES
1438105157522:resMAT[G2, G1] <- t(RES)
1438105157522:if (verbose) {
1438105157522:timeNOW <- proc.time() - timeINIT
1438105157523:cat(timeNOW[3], "s\n")
1438105157523:}
1438105157523:gc()
1438105157524:}
1438105157524:## remove added colums from the beginning
1438105157525:## optionally convert to matrix format. Beware: takes long!
1438105157525:if (to.ffdf) {
1438105157526:if (verbose) cat("=> Converting to ffdf matrix ... ")
1438105157526:resMAT <- as.ffdf(resMAT)
1438105157526:timeNOW <- proc.time() - timeINIT
1438105157527:if (verbose) cat(timeNOW[3], "s\n")
1438105157527:}
1438105157528:return(resMAT)
1438105157528:}
1438105161179:bigcor <- bigcor(cnt.mat2, fun="cor")
1438105422965:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105422965:library(ff, quietly = TRUE)
1438105422965:require(doMC)
1438105422965:if(ncore=="all"){
1438105422965:ncore = multicore:::detectCores()
1438105422966:registerDoMC(cores = ncore)
1438105422966:} else{
1438105422966:registerDoMC(cores = ncore)
1438105422966:}
1438105440025:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105440025:library(ff, quietly = TRUE)
1438105440025:require(doMC)
1438105440025:if(ncore=="all"){
1438105440026:ncore = multicore:::detectCores()
1438105440026:registerDoMC(cores = ncore)
1438105440026:} else{
1438105440026:registerDoMC(cores = ncore)
1438105440027:}
1438105440027:NCOL <- ncol(x)
1438105440027:## test if ncol(x) %% nblocks gives remainder 0
1438105440028:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438105440028:## preallocate square matrix of dimension
1438105440028:## ncol(x) in 'ff' single format
1438105440028:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438105440029:## split column numbers into 'nblocks' groups
1438105440029:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438105440030:## create all unique combinations of blocks
1438105440030:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438105440030:COMBS <- t(apply(COMBS, 1, sort))
1438105440030:COMBS <- unique(COMBS)
1438105440031:## iterate through each block combination, calculate correlation matrix
1438105440031:## between blocks and store them in the preallocated matrix on both
1438105440032:## symmetric sides of the diagonal
1438105440032:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438105440032:COMB <- COMBS[i, ]
1438105440032:G1 <- SPLIT[[COMB[1]]]
1438105440033:G2 <- SPLIT[[COMB[2]]]
1438105440033:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438105440033:flush.console()
1438105440034:COR <- cor(MAT[, G1], MAT[, G2], ...)
1438105440034:corMAT[G1, G2] <- COR
1438105440034:corMAT[G2, G1] <- t(COR)
1438105440035:COR <- NULLbigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105440035:library(ff, quietly = TRUE)
1438105440035:require(doMC)
1438105440036:if(ncore=="all"){
1438105440036:ncore = multicore:::detectCores()
1438105440037:registerDoMC(cores = ncore)
1438105440037:} else{
1438105440037:registerDoMC(cores = ncore)
1438105440038:}
1438105440038:NCOL <- ncol(x)
1438105440039:## test if ncol(x) %% nblocks gives remainder 0
1438105440040:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438105440040:## preallocate square matrix of dimension
1438105440041:## ncol(x) in 'ff' single format
1438105440041:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438105440042:## split column numbers into 'nblocks' groups
1438105440042:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438105440043:## create all unique combinations of blocks
1438105440043:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438105440044:COMBS <- t(apply(COMBS, 1, sort))
1438105440044:COMBS <- unique(COMBS)
1438105440045:## iterate through each block combination, calculate correlation matrix
1438105440046:## between blocks and store them in the preallocated matrix on both
1438105440046:## symmetric sides of the diagonal
1438105440046:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438105440047:COMB <- COMBS[i, ]
1438105440047:G1 <- SPLIT[[COMB[1]]]
1438105440048:G2 <- SPLIT[[COMB[2]]]
1438105440048:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438105440049:flush.console()
1438105440049:COR <- cor(MAT[, G1], MAT[, G2], ...)
1438105440050:corMAT[G1, G2] <- COR
1438105440050:corMAT[G2, G1] <- t(COR)
1438105440051:COR <- NULL
1438105440051:}
1438105440052:gc()
1438105440053:return(corMAT)
1438105440053:}
1438105440054:}
1438105440055:gc()
1438105440055:return(corMAT)
1438105440056:}
1438105473465:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105473465:library(ff, quietly = TRUE)
1438105473465:require(doMC)
1438105473465:if(ncore=="all"){
1438105473465:ncore = multicore:::detectCores()
1438105473465:registerDoMC(cores = ncore)
1438105473466:} else{
1438105473466:registerDoMC(cores = ncore)
1438105473466:}
1438105473466:NCOL <- ncol(x)
1438105473467:## test if ncol(x) %% nblocks gives remainder 0
1438105473467:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438105473467:## preallocate square matrix of dimension
1438105473467:## ncol(x) in 'ff' single format
1438105473468:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438105473468:## split column numbers into 'nblocks' groups
1438105473468:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438105473469:## create all unique combinations of blocks
1438105473469:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438105473469:COMBS <- t(apply(COMBS, 1, sort))
1438105473469:COMBS <- unique(COMBS)
1438105473470:## iterate through each block combination, calculate correlation matrix
1438105473470:## between blocks and store them in the preallocated matrix on both
1438105473470:## symmetric sides of the diagonal
1438105473471:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438105473471:COMB <- COMBS[i, ]
1438105473471:G1 <- SPLIT[[COMB[1]]]
1438105473471:G2 <- SPLIT[[COMB[2]]]
1438105473472:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438105473472:flush.console()
1438105473472:COR <- cor(x[, G1], x[, G2], ...)
1438105473473:corMAT[G1, G2] <- COR
1438105473473:corMAT[G2, G1] <- t(COR)
1438105473473:COR <- NULL
1438105473474:}
1438105473474:gc()
1438105473474:return(corMAT)
1438105473475:}
1438105513959:bigcorPar <- bigcorPar(cnt.mat2)
1438105574597:detectCores()
1438105793246:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105810852:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105810853:library(ff, quietly = TRUE)
1438105810853:require(doMC)
1438105810853:if(ncore=="all"){
1438105810853:ncore = detectCores()
1438105810853:registerDoParallel(cores = ncore)
1438105810853:} else{
1438105810854:registerDoParallel(cores = ncore)
1438105810854:}
1438105810854:NCOL <- ncol(x)
1438105810854:## test if ncol(x) %% nblocks gives remainder 0
1438105810855:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438105810855:## preallocate square matrix of dimension
1438105810855:## ncol(x) in 'ff' single format
1438105810855:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438105810856:## split column numbers into 'nblocks' groups
1438105810856:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438105810856:## create all unique combinations of blocks
1438105810857:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438105810857:COMBS <- t(apply(COMBS, 1, sort))
1438105810857:COMBS <- unique(COMBS)
1438105810857:## iterate through each block combination, calculate correlation matrix
1438105810858:## between blocks and store them in the preallocated matrix on both
1438105810858:## symmetric sides of the diagonal
1438105810858:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438105810858:COMB <- COMBS[i, ]
1438105810859:G1 <- SPLIT[[COMB[1]]]
1438105810859:G2 <- SPLIT[[COMB[2]]]
1438105810859:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438105810860:flush.console()
1438105810860:COR <- cor(x[, G1], x[, G2], ...)
1438105810860:corMAT[G1, G2] <- COR
1438105810860:corMAT[G2, G1] <- t(COR)
1438105810861:COR <- NULL
1438105810861:}
1438105810862:gc()
1438105810862:return(corMAT)
1438105810862:}
1438105818456:bigcorPar <- bigcorPar(cnt.mat2)
1438105849808:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105850062:library(ff, quietly = TRUE)
1438105856824:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105856824:library(ff, quietly = TRUE)
1438105856824:requireParallel
1438105856824:if(ncore=="all"){
1438105856824:ncore = detectCores()
1438105856824:registerDoParallel(cores = ncore)
1438105856825:} else{
1438105856825:registerDoParallel(cores = ncore)
1438105856825:}
1438105856825:NCOL <- ncol(x)
1438105856826:## test if ncol(x) %% nblocks gives remainder 0
1438105856826:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438105856826:## preallocate square matrix of dimension
1438105856826:## ncol(x) in 'ff' single format
1438105856827:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438105856827:## split column numbers into 'nblocks' groups
1438105856827:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438105856827:## create all unique combinations of blocks
1438105856828:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438105856828:COMBS <- t(apply(COMBS, 1, sort))
1438105856828:COMBS <- unique(COMBS)
1438105856829:## iterate through each block combination, calculate correlation matrix
1438105856829:## between blocks and store them in the preallocated matrix on both
1438105856829:## symmetric sides of the diagonal
1438105856829:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438105856830:COMB <- COMBS[i, ]
1438105856830:G1 <- SPLIT[[COMB[1]]]
1438105856830:G2 <- SPLIT[[COMB[2]]]
1438105856830:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438105856831:flush.console()
1438105856831:COR <- cor(x[, G1], x[, G2], ...)
1438105856831:corMAT[G1, G2] <- COR
1438105856832:corMAT[G2, G1] <- t(COR)
1438105856832:COR <- NULL
1438105856832:}
1438105856833:gc()
1438105856833:return(corMAT)
1438105856833:}
1438105862674:bigcorPar <- bigcorPar(cnt.mat2)
1438105884299:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438105884299:library(ff, quietly = TRUE)
1438105884299:require(doParallel)
1438105884300:if(ncore=="all"){
1438105884300:ncore = detectCores()
1438105884300:registerDoParallel(cores = ncore)
1438105884300:} else{
1438105884300:registerDoParallel(cores = ncore)
1438105884300:}
1438105884301:NCOL <- ncol(x)
1438105884301:## test if ncol(x) %% nblocks gives remainder 0
1438105884301:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438105884302:## preallocate square matrix of dimension
1438105884302:## ncol(x) in 'ff' single format
1438105884302:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438105884302:## split column numbers into 'nblocks' groups
1438105884302:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438105884303:## create all unique combinations of blocks
1438105884303:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438105884303:COMBS <- t(apply(COMBS, 1, sort))
1438105884304:COMBS <- unique(COMBS)
1438105884304:## iterate through each block combination, calculate correlation matrix
1438105884304:## between blocks and store them in the preallocated matrix on both
1438105884305:## symmetric sides of the diagonal
1438105884305:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438105884305:COMB <- COMBS[i, ]
1438105884305:G1 <- SPLIT[[COMB[1]]]
1438105884306:G2 <- SPLIT[[COMB[2]]]
1438105884306:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438105884306:flush.console()
1438105884306:COR <- cor(x[, G1], x[, G2], ...)
1438105884307:corMAT[G1, G2] <- COR
1438105884307:corMAT[G2, G1] <- t(COR)
1438105884307:COR <- NULL
1438105884308:}
1438105884308:gc()
1438105884308:return(corMAT)
1438105884309:}
1438105887862:bigcorPar <- bigcorPar(cnt.mat2)
1438105922804:View(cor)
1438105945369:bigcorPar[1:200}]
1438105949080:bigcorPar[1:200]
1438106235935:?as.ffdf
1438106321761:?as.matrix
1438106340785:dim(cor)
1438106371685:nrow(cor)
1438106380599:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438106380599:library(ff, quietly = TRUE)
1438106380600:require(doParallel)
1438106380600:if(ncore=="all"){
1438106380600:ncore = detectCores()
1438106380600:registerDoParallel(cores = ncore)
1438106380600:} else{
1438106380600:registerDoParallel(cores = ncore)
1438106380601:}
1438106380601:NCOL <- ncol(x)
1438106380601:## test if ncol(x) %% nblocks gives remainder 0
1438106380601:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438106380602:## preallocate square matrix of dimension
1438106380602:## ncol(x) in 'ff' single format
1438106380602:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438106380603:## split column numbers into 'nblocks' groups
1438106380603:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438106380603:## create all unique combinations of blocks
1438106380603:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438106380604:COMBS <- t(apply(COMBS, 1, sort))
1438106380604:COMBS <- unique(COMBS)
1438106380604:## iterate through each block combination, calculate correlation matrix
1438106380604:## between blocks and store them in the preallocated matrix on both
1438106380605:## symmetric sides of the diagonal
1438106380605:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438106380605:COMB <- COMBS[i, ]
1438106380605:G1 <- SPLIT[[COMB[1]]]
1438106380606:G2 <- SPLIT[[COMB[2]]]
1438106380606:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438106380606:flush.console()
1438106380607:COR <- cor(x[, G1], x[, G2], ...)
1438106380607:corMAT[G1, G2] <- COR
1438106380607:corMAT[G2, G1] <- t(COR)
1438106380608:COR <- NULL
1438106380608:}
1438106380608:corMAT <- as.matrix(corMAT, nrow=nrow(x))
1438106380609:gc()
1438106380609:return(corMAT)
1438106380610:}
1438106384223:bigcorPar <- bigcorPar(cnt.mat2)
1438106480092:dim(bigcorPar)
1438106521070:mat <- as.matrix(bigcorPar, nrow=3000)
1438106545570:mat <- as.matrix(bigcorPar, nrow=30000)
1438106561145:mat <- as.matrix(as.numeric(bigcorPar), nrow=30000)
1438106564548:View(mat)
1438106574570:class(bigcorPar)
1438106694331:matrix(bigcorPar)
1438106733981:physical(bigcorPar)
1438106816730:virtual(bigcorPar)
1438106854370:get.ff(bigcorPar)
1438106879481:open(bigcorPar)
1438107151442:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438107151442:library(ff, quietly = TRUE)
1438107151442:require(doParallel)
1438107151442:if(ncore=="all"){
1438107151443:ncore = detectCores()
1438107151443:registerDoParallel(cores = ncore)
1438107151443:} else{
1438107151443:registerDoParallel(cores = ncore)
1438107151443:}
1438107151443:NCOL <- ncol(x)
1438107151444:## test if ncol(x) %% nblocks gives remainder 0
1438107151444:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438107151444:## preallocate square matrix of dimension
1438107151445:## ncol(x) in 'ff' single format
1438107151445:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438107151445:## split column numbers into 'nblocks' groups
1438107151445:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438107151446:## create all unique combinations of blocks
1438107151446:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438107151446:COMBS <- t(apply(COMBS, 1, sort))
1438107151446:COMBS <- unique(COMBS)
1438107151447:## iterate through each block combination, calculate correlation matrix
1438107151447:## between blocks and store them in the preallocated matrix on both
1438107151447:## symmetric sides of the diagonal
1438107151447:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438107151448:COMB <- COMBS[i, ]
1438107151448:G1 <- SPLIT[[COMB[1]]]
1438107151448:G2 <- SPLIT[[COMB[2]]]
1438107151449:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438107151449:flush.console()
1438107151449:COR <- cor(x[, G1], x[, G2], ...)
1438107151449:corMAT[G1, G2] <- COR
1438107151450:corMAT[G2, G1] <- t(COR)
1438107151450:COR <- NULL
1438107151450:}
1438107151451:gc()
1438107151451:return(corMAT)
1438107151451:}
1438109472946:cor.mat <- bigcorPar(cnt.mat2)
1438110037227:get.ff(cor.mat, 3L)
1438110041417:get.ff(cor.mat, 1L)
1438110045542:get.ff(cor.mat, 2L)
1438110121721:get.ff(cor.mat, 2L, 1)
1438110134224:cor.mat
1438110405939:cor.mat[]
1438110457371:cor.mat[[,1]]
1438110461144:cor.mat[[,]]
1438110466544:cor.mat[,1
1438110468269:]
1438110480100:class(cor.mat[,1])
1438110485070:class(cor.mat[,2])
1438110491588:cor.mat[,2]
1438110521303:head(cor.mat[,1])
1438110531194:head(cor.mat[,2])
1438110567184:head(cor.mat)
1438110585451:head(cor.mat[,9])
1438110590574:head(cor.mat[,20000])
1438110601987:head(cor[,20000])
1438110680004:cor.mat.df <- as.ffdf(cor.mat)
1438110866039:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438110866039:library(ff, quietly = TRUE)
1438110866040:require(doParallel)
1438110866040:if(ncore=="all"){
1438110866040:ncore = detectCores()
1438110866040:registerDoParallel(cores = ncore)
1438110866040:} else{
1438110866040:registerDoParallel(cores = ncore)
1438110866041:}
1438110866041:NCOL <- ncol(x)
1438110866041:## test if ncol(x) %% nblocks gives remainder 0
1438110866041:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438110866042:## preallocate square matrix of dimension
1438110866042:## ncol(x) in 'ff' single format
1438110866043:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438110866043:## split column numbers into 'nblocks' groups
1438110866043:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438110866043:## create all unique combinations of blocks
1438110866044:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438110866044:COMBS <- t(apply(COMBS, 1, sort))
1438110866044:COMBS <- unique(COMBS)
1438110866045:## iterate through each block combination, calculate correlation matrix
1438110866045:## between blocks and store them in the preallocated matrix on both
1438110866045:## symmetric sides of the diagonal
1438110866045:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438110866046:COMB <- COMBS[i, ]
1438110866046:G1 <- SPLIT[[COMB[1]]]
1438110866046:G2 <- SPLIT[[COMB[2]]]
1438110866046:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438110866047:flush.console()
1438110866047:COR <- cor(x[, G1], x[, G2], ...)
1438110866047:corMAT[G1, G2] <- COR
1438110866048:corMAT[G2, G1] <- t(COR)
1438110866048:COR <- NULL
1438110866048:}
1438110866049:gc()
1438110866049:return(corMAT)
1438110866049:}
1438110877282:cor.mat.df[1]
1438110887586:View(cor.mat.df[1])
1438110906944:View(cor.mat.df[,1])
1438110918329:View(cor.mat[,1])
1438111216938:View(cor.mat.df[,])
1438111324537:head(cor.mat[,])
1438111352240:View(cor.mat[,])
1438112160463:class(cor.mat[,])
1438112218951:start <- proc.time()
1438112219182:# cor <- cor(cnt.mat2, method="pearson", use="everything")
1438112219711:cor.mat <- bigcorPar(cnt.mat2, ncore=11)
1438112475865:end <- proc.time()-start
1438112515358:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=6))
1438112859083:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113008092:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438113158255:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438113158255:library(ff, quietly = TRUE)
1438113158255:require(doParallel)
1438113158256:if(ncore=="all"){
1438113158256:ncore = detectCores()
1438113158256:registerDoParallel(cores = ncore)
1438113158256:} else{
1438113158256:registerDoParallel(cores = ncore)
1438113158257:}
1438113158257:NCOL <- ncol(x)
1438113158257:## test if ncol(x) %% nblocks gives remainder 0
1438113158257:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438113158258:## preallocate square matrix of dimension
1438113158258:## ncol(x) in 'ff' single format
1438113158258:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438113158258:## split column numbers into 'nblocks' groups
1438113158258:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438113158259:## create all unique combinations of blocks
1438113158259:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438113158259:COMBS <- t(apply(COMBS, 1, sort))
1438113158260:COMBS <- unique(COMBS)
1438113158260:## iterate through each block combination, calculate correlation matrix
1438113158260:## between blocks and store them in the preallocated matrix on both
1438113158261:## symmetric sides of the diagonal
1438113158261:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438113158261:COMB <- COMBS[i, ]
1438113158261:G1 <- SPLIT[[COMB[1]]]
1438113158262:G2 <- SPLIT[[COMB[2]]]
1438113158262:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438113158262:flush.console()
1438113158262:COR <- cor(x[, G1], x[, G2], ...)
1438113158263:corMAT[G1, G2] <- COR
1438113158263:corMAT[G2, G1] <- t(COR)
1438113158264:COR <- NULL
1438113158264:}
1438113158265:gc()
1438113158265:return(corMAT)
1438113158265:}
1438113158266:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438113158586:cnt.mat2 <- cnt.mat[1:30000,]
1438113158592:cnt.mat2 <- t(cnt.mat2[,-1])
1438113158605:#cnt.mat <- as.numeric(cnt.mat)
1438113158605:start <- proc.time()
1438113158606:# cor <- cor(cnt.mat2, method="pearson", use="everything")
1438113158606:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=6))
1438113184758:# code from: https://gist.github.com/bobthecat/5024079
1438113184758:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438113184758:library(ff, quietly = TRUE)
1438113184758:require(doParallel)
1438113184759:if(ncore=="all"){
1438113184759:ncore = detectCores()
1438113184759:registerDoParallel(cores = ncore)
1438113184759:} else{
1438113184759:registerDoParallel(cores = ncore)
1438113184759:}
1438113184760:NCOL <- ncol(x)
1438113184760:## test if ncol(x) %% nblocks gives remainder 0
1438113184760:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438113184760:## preallocate square matrix of dimension
1438113184761:## ncol(x) in 'ff' single format
1438113184761:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438113184761:## split column numbers into 'nblocks' groups
1438113184761:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438113184762:## create all unique combinations of blocks
1438113184762:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438113184762:COMBS <- t(apply(COMBS, 1, sort))
1438113184762:COMBS <- unique(COMBS)
1438113184763:## iterate through each block combination, calculate correlation matrix
1438113184763:## between blocks and store them in the preallocated matrix on both
1438113184763:## symmetric sides of the diagonal
1438113184763:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438113184764:COMB <- COMBS[i, ]
1438113184764:G1 <- SPLIT[[COMB[1]]]
1438113184764:G2 <- SPLIT[[COMB[2]]]
1438113184764:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438113184765:flush.console()
1438113184765:COR <- cor(x[, G1], x[, G2], ...)
1438113184765:corMAT[G1, G2] <- COR
1438113184766:corMAT[G2, G1] <- t(COR)
1438113184766:COR <- NULL
1438113184766:}
1438113184767:gc()
1438113184767:return(corMAT)
1438113184767:}
1438113188052:library(ff)
1438113215062:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113342336:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113624687:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438113624688:library(ff, quietly = TRUE)
1438113624688:require(doParallel)
1438113624688:if(ncore=="all"){
1438113624688:ncore = detectCores()
1438113624688:registerDoParallel(cores = ncore)
1438113624688:} else{
1438113624689:registerDoParallel(cores = ncore)
1438113624689:}
1438113624689:NCOL <- ncol(x)
1438113624689:## test if ncol(x) %% nblocks gives remainder 0
1438113624690:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438113624690:## preallocate square matrix of dimension
1438113624690:## ncol(x) in 'ff' single format
1438113624690:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438113624691:## split column numbers into 'nblocks' groups
1438113624691:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438113624691:## create all unique combinations of blocks
1438113624691:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438113624692:COMBS <- t(apply(COMBS, 1, sort))
1438113624692:COMBS <- unique(COMBS)
1438113624692:## iterate through each block combination, calculate correlation matrix
1438113624692:## between blocks and store them in the preallocated matrix on both
1438113624693:## symmetric sides of the diagonal
1438113624693:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438113624693:COMB <- COMBS[i, ]
1438113624693:G1 <- SPLIT[[COMB[1]]]
1438113624694:G2 <- SPLIT[[COMB[2]]]
1438113624694:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438113624694:flush.console()
1438113624694:COR <- cor(x[, G1], x[, G2], ...)
1438113624695:corMAT[G1, G2] <- COR
1438113624695:corMAT[G2, G1] <- t(COR)
1438113624695:COR <- NULL
1438113624696:}
1438113624696:gc()
1438113624696:return(corMAT)
1438113624697:}
1438113636752:library(ff)
1438113643291:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113649294:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438113650899:cnt.mat2 <- cnt.mat[1:30000,]
1438113652223:cnt.mat2 <- t(cnt.mat2[,-1])
1438113655681:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113714566:cnt.mat2 <- cnt.mat[1:10000,]
1438113715271:cnt.mat2 <- t(cnt.mat2[,-1])
1438113716595:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything")
1438113721538:)
1438113729602:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113738221:cnt.mat2 <- cnt.mat[1:30000,]
1438113741131:cnt.mat2 <- t(cnt.mat2[,-1])
1438113742345:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438113767427:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113801875:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113830679:system.time(cor.mat <- bigcorPar(cnt.mat2, ncore=12))
1438113940073:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438113971948:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438113995169:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438114099532:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438114099803:cnt.mat2 <- cnt.mat #[1:30000,]
1438114101079:cnt.mat2 <- t(cnt.mat2[,-1])
1438114105174:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438114329580:for(i in 5:1) {}
1438114332717:for(i in 5:1) {
1438114342005:print(i)
1438114343079:}
1438114681592:10 %%3
1438114760577:find.blocks(cnt.mat)
1438114765229:find.nblocks <- function(x) {
1438114765229:ttl <- nrow(x)
1438114765229:r=NULL
1438114765229:for(i in ttl:1) {
1438114765230:r <- ttl %% i
1438114765230:if(r==0)
1438114765230:break
1438114765230:}
1438114765230:}
1438114767773:find.blocks(cnt.mat)
1438114773117:find.nblocks(cnt.mat)
1438114797533:find.nblocks <- function(x) {
1438114797533:ttl <- nrow(x)
1438114797533:r=NULL
1438114797533:for(i in ttl:1) {
1438114797533:r <- ttl %% i
1438114797534:if(r==0)
1438114797534:break
1438114797534:}
1438114797534:return(i)
1438114797534:}
1438114799232:find.nblocks(cnt.mat)
1438114828259:find.nblocks <- function(x) {
1438114828260:ttl <- nrow(x)
1438114828260:r=NULL
1438114828260:for(i in (ttl-12):1) {
1438114828260:r <- ttl %% i
1438114828260:if(r==0)
1438114828260:break
1438114828261:}
1438114828261:return(i)
1438114828261:}
1438114833696:find.nblocks(cnt.mat)
1438114873734:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=26290, ncore=12))
1438114900068:.MAchine$integer.max
1438114903857:.Machine$integer.max
1438114989151:find.nblocks <- function(x) {
1438114989312:ttl <- nrow(x)
1438114989508:r=NULL
1438114989707:for(i in (ttl-12):1) {
1438114989892:r <- ttl %% i
1438114990112:if(r==0 && i<<(ttl/4)
1438114990284:break
1438114990479:}
1438114990715:return(i)
1438114990963:}
1438115000563:find.nblocks <- function(x) {
1438115001131:ttl <- nrow(x)
1438115001831:r=NULL
1438115002089:for(i in (ttl-12):1) {
1438115002309:r <- ttl %% i
1438115002512:if(r==0 && i<<(ttl/4)
1438115015652:find.nblocks <- function(x) {
1438115015856:ttl <- nrow(x)
1438115016089:r=NULL
1438115016484:for(i in (ttl-12):1) {
1438115018055:r <- ttl %% i
1438115022038:if(r==0 && i<=(ttl/4))
1438115022703:break
1438115023027:}
1438115023403:return(i)
1438115023544:}
1438115042398:find.nblocks(cnt.mat)
1438115053651:find.nblocks <- function(x) {
1438115053839:ttl <- nrow(x)
1438115053988:r=NULL
1438115054159:for(i in (ttl-12):1) {
1438115054303:r <- ttl %% i
1438115054427:if(r==0 && i<(ttl/4))
1438115054651:break
1438115054807:}
1438115054941:return(i)
1438115055231:}
1438115062672:find.nblocks(cnt.mat)
1438115076116:find.nblocks <- function(x) {
1438115076116:ttl <- nrow(x)
1438115076116:r=NULL
1438115076116:for(i in (ttl-12):1) {
1438115076117:r <- ttl %% i
1438115076117:if(r==0 && i<1000)
1438115076117:break
1438115076117:}
1438115076117:return(i)
1438115076117:}
1438115096620:find.nblocks <- function(x) {
1438115096621:ttl <- nrow(x)
1438115096621:r=NULL
1438115096621:for(i in (ttl-12):1) {
1438115096621:r <- ttl %% i
1438115096621:if(r==0 && i<(ttl/100))
1438115096621:break
1438115096621:}
1438115096622:return(i)
1438115096622:}
1438115104599:find.nblocks(cnt.mat)
1438115117036:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=478, ncore=12))
1438115122660:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438115141262:find.nblocks(cnt.mat2)
1438115165847:nrow(cnt.mat2)
1438115178688:find.nblocks <- function(x) {
1438115178855:ttl <- ncol(x)
1438115179012:r=NULL
1438115179156:for(i in (ttl-12):1) {
1438115179290:r <- ttl %% i
1438115179456:if(r==0 && i<(ttl/100))
1438115179607:break
1438115179759:}
1438115179907:return(i)
1438115180203:}
1438115192876:find.nblocks(cnt.mat2)
1438115201251:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=478, ncore=12))
1438115207005:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438115207588:cnt.mat2 <- cnt.mat #[1:30000,]
1438115208364:cnt.mat2 <- t(cnt.mat2[,-1])
1438115227337:View(cnt.mat2)
1438115251464:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438115252062:cnt.mat2 <- cnt.mat #[1:30000,]
1438115254369:View(cnt.mat2)
1438115261178:cnt.mat2 <- t(cnt.mat2[,-1])
1438115291473:ncol(cnt.mat2)/478
1438115297252:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438115319835:cnt.mat2 <- cnt.mat[1:30000,]
1438115322132:cnt.mat2 <- t(cnt.mat2[,-1])
1438115327108:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438115638611:cnt.mat2 <- cnt.mat #[1:30000,]
1438115640076:cnt.mat2 <- t(cnt.mat2[,-1])
1438115655035:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438116805652:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438116813349:cnt.mat2 <- cnt.mat[1:50000,]
1438116814728:cnt.mat2 <- t(cnt.mat2[,-1])
1438116819352:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438116830917:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438116832408:library(ff, quietly = TRUE)
1438116832910:require(doParallel)
1438116832966:if(ncore=="all"){
1438116833023:ncore = detectCores()
1438116833055:registerDoParallel(cores = ncore)
1438116833115:} else{
1438116833116:registerDoParallel(cores = ncore)
1438116833161:}
1438116833195:NCOL <- ncol(x)
1438116833214:## test if ncol(x) %% nblocks gives remainder 0
1438116833266:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438116833292:## preallocate square matrix of dimension
1438116833327:## ncol(x) in 'ff' single format
1438116833369:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438116833406:## split column numbers into 'nblocks' groups
1438116833443:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438116833472:## create all unique combinations of blocks
1438116833542:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438116833599:COMBS <- t(apply(COMBS, 1, sort))
1438116833599:COMBS <- unique(COMBS)
1438116833626:## iterate through each block combination, calculate correlation matrix
1438116833670:## between blocks and store them in the preallocated matrix on both
1438116833709:## symmetric sides of the diagonal
1438116833743:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438116833913:COMB <- COMBS[i, ]
1438116834270:G1 <- SPLIT[[COMB[1]]]
1438116834503:G2 <- SPLIT[[COMB[2]]]
1438116834741:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438116834946:flush.console()
1438116835145:COR <- cor(x[, G1], x[, G2], ...)
1438116835377:corMAT[G1, G2] <- COR
1438116835584:corMAT[G2, G1] <- t(COR)
1438116835807:COR <- NULL
1438116835994:}
1438116836442:gc()
1438116836873:return(corMAT)
1438116837049:}
1438116847276:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438116932251:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438116932650:cnt.mat2 <- cnt.mat[1:2300,]
1438116933576:cnt.mat2 <- t(cnt.mat2[,-1])
1438116938649:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438116938650:library(ff, quietly = TRUE)
1438116938650:require(doParallel)
1438116938650:if(ncore=="all"){
1438116938650:ncore = detectCores()
1438116938650:registerDoParallel(cores = ncore)
1438116938650:} else{
1438116938650:registerDoParallel(cores = ncore)
1438116938651:}
1438116938651:NCOL <- ncol(x)
1438116938651:## test if ncol(x) %% nblocks gives remainder 0
1438116938651:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438116938652:## preallocate square matrix of dimension
1438116938652:## ncol(x) in 'ff' single format
1438116938652:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438116938652:## split column numbers into 'nblocks' groups
1438116938653:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438116938653:## create all unique combinations of blocks
1438116938653:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438116938653:COMBS <- t(apply(COMBS, 1, sort))
1438116938654:COMBS <- unique(COMBS)
1438116938654:## iterate through each block combination, calculate correlation matrix
1438116938654:## between blocks and store them in the preallocated matrix on both
1438116938655:## symmetric sides of the diagonal
1438116938655:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438116938655:COMB <- COMBS[i, ]
1438116938655:G1 <- SPLIT[[COMB[1]]]
1438116938656:G2 <- SPLIT[[COMB[2]]]
1438116938656:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438116938656:flush.console()
1438116938656:COR <- cor(x[, G1], x[, G2], ...)
1438116938657:corMAT[G1, G2] <- COR
1438116938657:corMAT[G2, G1] <- t(COR)
1438116938657:COR <- NULL
1438116938658:}
1438116938658:gc()
1438116938658:return(corMAT)
1438116938659:}
1438116945974:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438116951497:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438116975096:cnt.mat2 <- cnt.mat[1:32300,]
1438116975795:cnt.mat2 <- t(cnt.mat2[,-1])
1438116978542:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438117001752:cnt.mat2 <- cnt.mat[1:52300,]
1438117002371:cnt.mat2 <- t(cnt.mat2[,-1])
1438117003819:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438117018031:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438117038575:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438117109400:matrix(rand(0,1), 60000, 60000)
1438117137524:matrix(rand(0,1), 60000, 60000)
1438117150376:matrix(c(0,1), 60000, 60000)
1438117467723:library(doParallel)
1438117468379:registerDoParallel(cores = 11)
1438117483536:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438182518353:install.packages("manipulate")
1438183034359:library(ff)
1438183044870:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438183044871:library(ff, quietly = TRUE)
1438183044871:require(doParallel)
1438183044871:if(ncore=="all"){
1438183044871:ncore = detectCores()
1438183044872:registerDoParallel(cores = ncore)
1438183044872:} else{
1438183044872:registerDoParallel(cores = ncore)
1438183044872:}
1438183044873:NCOL <- ncol(x)
1438183044873:## test if ncol(x) %% nblocks gives remainder 0
1438183044873:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438183044874:## preallocate square matrix of dimension
1438183044874:## ncol(x) in 'ff' single format
1438183044875:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438183044875:## split column numbers into 'nblocks' groups
1438183044875:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438183044876:## create all unique combinations of blocks
1438183044876:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438183044876:COMBS <- t(apply(COMBS, 1, sort))
1438183044877:COMBS <- unique(COMBS)
1438183044877:## iterate through each block combination, calculate correlation matrix
1438183044878:## between blocks and store them in the preallocated matrix on both
1438183044878:## symmetric sides of the diagonal
1438183044878:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438183044879:COMB <- COMBS[i, ]
1438183044879:G1 <- SPLIT[[COMB[1]]]
1438183044879:G2 <- SPLIT[[COMB[2]]]
1438183044879:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438183044880:flush.console()
1438183044880:COR <- cor(x[, G1], x[, G2], ...)
1438183044880:corMAT[G1, G2] <- COR
1438183044881:corMAT[G2, G1] <- t(COR)
1438183044881:COR <- NULL
1438183044882:}
1438183044882:gc()
1438183044883:return(corMAT)
1438183044883:}
1438183055013:library(doParallel)
1438183055173:registerDoParallel(cores = 11)
1438183080106:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438183081724:cnt.mat2 <- t(cnt.mat2[,-1])
1438183089806:cnt.mat2 <- t(cnt.mat[,-1])
1438183099631:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=100, ncore=12))
1438183109930:find.nblocks <- function(x) {
1438183113751:ttl <- ncol(x)
1438183114254:r=NULL
1438183114277:for(i in (ttl-12):1) {
1438183114326:r <- ttl %% i
1438183114353:if(r==0 && i<(ttl/100))
1438183114576:break
1438183114778:}
1438183114977:return(i)
1438183115156:}
1438183130774:find.nblocks(cnt.mat)
1438183134105:find.nblocks(cnt.mat2)
1438183147880:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438183175086:cnt.mat2 <- cnt.mat[1:52300,]
1438183175356:cnt.mat2 <- t(cnt.mat2[,-1])
1438183177993:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438183198423:.MAchine
1438183201599:.Machine
1438183209374:.Machine$integer.max
1438183217849:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438183220449:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438183602824:matrix(c(NULL), 3,3)
1438183612749:matrix(NA, 3,3)
1438183623699:matrix(NULL, 3,3)
1438183665458:?expand.grid
1438183753959:?%dopar%
1438184147749:?flush.console
1438184311724:NCOL <- ncol(cnt.mat)
1438184318574:NCOL <- ncol(cnt.mat2)
1438184328298:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438184385759:cor.par <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...) {
1438184385759:library(ff, quietly = TRUE)
1438184385759:require(doParallel)
1438184385759:if(ncore=="all"){
1438184385760:ncore = detectCores()
1438184385760:registerDoParallel(cores = ncore)
1438184385760:} else{
1438184385760:registerDoParallel(cores = ncore)
1438184385761:}
1438184385761:NCOL <- ncol(x)
1438184385762:## test if ncol(x) %% nblocks gives remainder 0
1438184385762:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438184385762:## preallocate square matrix of dimension
1438184385763:corMAT <- matrix(NA, NCOL, NCOL)
1438184385763:## split column numbers into 'nblocks' groups
1438184385763:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438184385764:## create all unique combinations of blocks
1438184385764:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438184385764:COMBS <- t(apply(COMBS, 1, sort))
1438184385765:COMBS <- unique(COMBS)
1438184385765:## iterate through each block combination, calculate correlation matrix
1438184385766:## between blocks and store them in the preallocated matrix on both
1438184385766:## symmetric sides of the diagonal
1438184385766:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438184385767:COMB <- COMBS[i, ]
1438184385767:G1 <- SPLIT[[COMB[1]]]
1438184385767:G2 <- SPLIT[[COMB[2]]]
1438184385768:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438184385768:flush.console()
1438184385768:COR <- cor(x[, G1], x[, G2], ...)
1438184385769:corMAT[G1, G2] <- COR
1438184385769:corMAT[G2, G1] <- t(COR)
1438184385769:COR <- NULL
1438184385770:}
1438184385770:gc()
1438184385771:return(corMAT)
1438184385771:}
1438184396398:cor.par(cnt.mat2)
1438185085164:cor.par <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...) {
1438185085165:library(ff, quietly = TRUE)
1438185085165:require(doParallel)
1438185085165:if(ncore=="all"){
1438185085166:ncore = detectCores()
1438185085166:registerDoParallel(cores = ncore)
1438185085166:} else{
1438185085166:registerDoParallel(cores = ncore)
1438185085166:}
1438185085167:NCOL <- ncol(x)
1438185085167:## test if ncol(x) %% nblocks gives remainder 0
1438185085168:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438185085168:## preallocate square matrix of dimension
1438185085169:corMAT <- matrix(NA, NCOL, NCOL)
1438185085169:## split column numbers into 'nblocks' groups
1438185085170:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438185085170:## create all unique combinations of blocks
1438185085171:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438185085171:COMBS <- t(apply(COMBS, 1, sort))
1438185085171:COMBS <- unique(COMBS)
1438185085172:## iterate through each block combination, calculate correlation matrix
1438185085172:## between blocks and store them in the preallocated matrix on both
1438185085172:## symmetric sides of the diagonal
1438185085173:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438185085173:COMB <- COMBS[i, ]
1438185085173:G1 <- SPLIT[[COMB[1]]]
1438185085174:G2 <- SPLIT[[COMB[2]]]
1438185085174:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438185085174:flush.console()
1438185085175:COR <- cor(x[, G1], x[, G2], ...)
1438185085175:corMAT[G1, G2] <- COR
1438185085175:corMAT[G2, G1] <- t(COR)
1438185085176:COR <- NULL
1438185085176:}
1438185085177:gc()
1438185085177:return(corMAT)
1438185085178:}
1438185095543:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438185100381:cnt.mat2 <- t(cnt.mat[,-1])
1438185121754:find.nblocks <- function(x) {
1438185121754:ttl <- ncol(x)
1438185121754:r=NULL
1438185121754:for(i in (ttl-12):1) {
1438185121754:r <- ttl %% i
1438185121755:if(r==0 && i<(ttl/100))
1438185121755:break
1438185121755:}
1438185121755:return(i)
1438185121755:}
1438185150313:b <- find.nblocks(cnt.mat2)
1438185175686:find.nblocks <- function(x) {
1438185175687:ttl <- ncol(x)
1438185175687:r=NULL
1438185175687:for(i in (ttl-12):1) {
1438185175687:r <- ttl %% i
1438185175688:if(r==0 && i<(ttl/100))
1438185175688:break
1438185175688:}
1438185175688:return(as.numeric(i))
1438185175689:}
1438185183916:b <- find.nblocks(cnt.mat2)
1438185219854:cor.mat2 <- cor.par(cnt.mat2, nblocks=478, ncore=10)
1438185271239:detach("package:ff", unload=TRUE)
1438185280683:library(doParallel)
1438185282857:registerDoParallel(cores = 11)
1438185297165:cor.par <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...) {
1438185297165:#library(ff, quietly = TRUE)
1438185297165:require(doParallel)
1438185297166:if(ncore=="all"){
1438185297166:ncore = detectCores()
1438185297166:registerDoParallel(cores = ncore)
1438185297166:} else{
1438185297167:registerDoParallel(cores = ncore)
1438185297167:}
1438185297167:NCOL <- ncol(x)
1438185297168:## test if ncol(x) %% nblocks gives remainder 0
1438185297168:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438185297168:## preallocate square matrix of dimension
1438185297169:corMAT <- matrix(NA, NCOL, NCOL)
1438185297169:## split column numbers into 'nblocks' groups
1438185297169:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438185297170:## create all unique combinations of blocks
1438185297170:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438185297170:COMBS <- t(apply(COMBS, 1, sort))
1438185297171:COMBS <- unique(COMBS)
1438185297171:## iterate through each block combination, calculate correlation matrix
1438185297171:## between blocks and store them in the preallocated matrix on both
1438185297172:## symmetric sides of the diagonal
1438185297172:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438185297172:COMB <- COMBS[i, ]
1438185297173:G1 <- SPLIT[[COMB[1]]]
1438185297173:G2 <- SPLIT[[COMB[2]]]
1438185297173:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438185297173:flush.console()
1438185297174:COR <- cor(x[, G1], x[, G2], ...)
1438185297174:corMAT[G1, G2] <- COR
1438185297174:corMAT[G2, G1] <- t(COR)
1438185297175:COR <- NULL
1438185297175:}
1438185297176:gc()
1438185297176:return(corMAT)
1438185297177:}
1438185310339:cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12)
1438185317362:cor.mat2 <- cor.par(cnt.mat2, nblocks=478, ncore=10)
1438188814097:library(doParallel)
1438188814275:registerDoParallel(cores = 11)
1438188825692:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438188827131:cnt.mat2 <- t(cnt.mat[,-1])
1438188832887:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438189190894:cor.mat2 <- cor.par(cnt.mat2, nblocks=10, ncore=10)
1438189196488:cor.par <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...) {
1438189196489:#library(ff, quietly = TRUE)
1438189196489:require(doParallel)
1438189196489:if(ncore=="all"){
1438189196489:ncore = detectCores()
1438189196490:registerDoParallel(cores = ncore)
1438189196490:} else{
1438189196490:registerDoParallel(cores = ncore)
1438189196490:}
1438189196491:NCOL <- ncol(x)
1438189196491:## test if ncol(x) %% nblocks gives remainder 0
1438189196492:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438189196492:## preallocate square matrix of dimension
1438189196492:corMAT <- matrix(NA, NCOL, NCOL)
1438189196493:## split column numbers into 'nblocks' groups
1438189196493:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438189196493:## create all unique combinations of blocks
1438189196494:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438189196494:COMBS <- t(apply(COMBS, 1, sort))
1438189196494:COMBS <- unique(COMBS)
1438189196495:## iterate through each block combination, calculate correlation matrix
1438189196495:## between blocks and store them in the preallocated matrix on both
1438189196496:## symmetric sides of the diagonal
1438189196496:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438189196496:COMB <- COMBS[i, ]
1438189196496:G1 <- SPLIT[[COMB[1]]]
1438189196497:G2 <- SPLIT[[COMB[2]]]
1438189196497:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438189196498:flush.console()
1438189196498:COR <- cor(x[, G1], x[, G2], ...)
1438189196498:corMAT[G1, G2] <- COR
1438189196499:corMAT[G2, G1] <- t(COR)
1438189196499:COR <- NULL
1438189196499:}
1438189196500:gc()
1438189196500:return(corMAT)
1438189196501:}
1438189208182:cor.mat2 <- cor.par(cnt.mat2, nblocks=10, ncore=10)
1438189215804:library(doParallel)
1438189221621:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438189222601:cnt.mat2 <- t(cnt.mat[,-1])
1438189231857:cor.mat2 <- cor.par(cnt.mat2, nblocks=10, ncore=10)
1438203470837:which R
1438203638149:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438203639288:cnt.mat2 <- cnt.mat[1:30000,]
1438203639514:cnt.mat2 <- t(cnt.mat2[,-1])
1438203644215:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438203870005:system.time(matrix(c(0,1), 60000, 60000))
1438203960901:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438203960902:library(ff, quietly = TRUE)
1438203960902:require(doParallel)
1438203960902:if(ncore=="all"){
1438203960902:ncore = detectCores()
1438203960903:registerDoParallel(cores = ncore)
1438203960903:} else{
1438203960903:registerDoParallel(cores = ncore)
1438203960903:}
1438203960904:NCOL <- ncol(x)
1438203960904:## test if ncol(x) %% nblocks gives remainder 0
1438203960904:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438203960905:## preallocate square matrix of dimension
1438203960905:## ncol(x) in 'ff' single format
1438203960905:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438203960906:## split column numbers into 'nblocks' groups
1438203960906:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438203960906:## create all unique combinations of blocks
1438203960907:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438203960907:COMBS <- t(apply(COMBS, 1, sort))
1438203960907:COMBS <- unique(COMBS)
1438203960908:## iterate through each block combination, calculate correlation matrix
1438203960908:## between blocks and store them in the preallocated matrix on both
1438203960908:## symmetric sides of the diagonal
1438203960909:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438203960909:COMB <- COMBS[i, ]
1438203960909:G1 <- SPLIT[[COMB[1]]]
1438203960910:G2 <- SPLIT[[COMB[2]]]
1438203960910:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438203960911:flush.console()
1438203960911:COR <- cor(x[, G1], x[, G2], ...)
1438203960911:corMAT[G1, G2] <- COR
1438203960912:corMAT[G2, G1] <- t(COR)
1438203960912:COR <- NULL
1438203960912:}
1438203960913:gc()
1438203960913:return(corMAT)
1438203960914:}
1438204249689:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438204260076:library(ff)
1438204271487:library(doParallel)
1438204396458:library(ff)
1438204398623:library(doParallel)
1438204431932:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438204852838:detach("package:parallel", unload=TRUE)
1438204907898:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438204907898:library(ff, quietly = TRUE)
1438204907898:#   require(doParallel)
1438204907899:#   if(ncore=="all"){
1438204907899:#     ncore = detectCores()
1438204907899:#     registerDoParallel(cores = ncore)
1438204907900:#   } else{
1438204907900:#     registerDoParallel(cores = ncore)
1438204907900:#   }
1438204907901:NCOL <- ncol(x)
1438204907901:## test if ncol(x) %% nblocks gives remainder 0
1438204907902:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438204907902:## preallocate square matrix of dimension
1438204907903:## ncol(x) in 'ff' single format
1438204907903:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438204907904:## split column numbers into 'nblocks' groups
1438204907904:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438204907905:## create all unique combinations of blocks
1438204907905:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438204907905:COMBS <- t(apply(COMBS, 1, sort))
1438204907906:COMBS <- unique(COMBS)
1438204907906:## iterate through each block combination, calculate correlation matrix
1438204907907:## between blocks and store them in the preallocated matrix on both
1438204907907:## symmetric sides of the diagonal
1438204907908:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438204907908:COMB <- COMBS[i, ]
1438204907909:G1 <- SPLIT[[COMB[1]]]
1438204907909:G2 <- SPLIT[[COMB[2]]]
1438204907909:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438204907910:flush.console()
1438204907910:COR <- cor(x[, G1], x[, G2], ...)
1438204907910:corMAT[G1, G2] <- COR
1438204907911:corMAT[G2, G1] <- t(COR)
1438204907911:COR <- NULL
1438204907911:}
1438204907912:gc()
1438204907912:return(corMAT)
1438204907912:}
1438204922895:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438204923277:cnt.mat2 <- cnt.mat[1:30000,]
1438204923283:cnt.mat2 <- t(cnt.mat2[,-1])
1438204927034:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438205921175:getMKLThreads()
1438205928999:getMKLthreads()
1438205954071:library(ff)
1438205955637:setMKLthreads(10)
1438206093927:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438206093927:library(ff, quietly = TRUE)
1438206093927:#   require(doParallel)
1438206093927:#   if(ncore=="all"){
1438206093928:#     ncore = detectCores()
1438206093928:#     registerDoParallel(cores = ncore)
1438206093928:#   } else{
1438206093928:#     registerDoParallel(cores = ncore)
1438206093928:#   }
1438206093929:NCOL <- ncol(x)
1438206093929:## test if ncol(x) %% nblocks gives remainder 0
1438206093929:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438206093930:## preallocate square matrix of dimension
1438206093930:## ncol(x) in 'ff' single format
1438206093930:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438206093931:## split column numbers into 'nblocks' groups
1438206093931:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438206093931:## create all unique combinations of blocks
1438206093932:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438206093932:COMBS <- t(apply(COMBS, 1, sort))
1438206093932:COMBS <- unique(COMBS)
1438206093933:## iterate through each block combination, calculate correlation matrix
1438206093933:## between blocks and store them in the preallocated matrix on both
1438206093933:## symmetric sides of the diagonal
1438206093933:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438206093934:COMB <- COMBS[i, ]
1438206093934:G1 <- SPLIT[[COMB[1]]]
1438206093934:G2 <- SPLIT[[COMB[2]]]
1438206093935:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438206093935:flush.console()
1438206093935:COR <- cor(x[, G1], x[, G2], ...)
1438206093936:corMAT[G1, G2] <- COR
1438206093936:corMAT[G2, G1] <- t(COR)
1438206093936:COR <- NULL
1438206093937:}
1438206093937:gc()
1438206093938:return(corMAT)
1438206093938:}
1438206101193:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438206101592:cnt.mat2 <- cnt.mat[1:30000,]
1438206101995:cnt.mat2 <- t(cnt.mat2[,-1])
1438206104873:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438206142435:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438206293336:detach("package:RevoUtilsMath", unload=TRUE)
1438206300410:setMKLthreads(1)
1438206337482:tcrossprod(cnt.mat)
1438206347102:tcrossprod(cnt.mat2)
1438206357624:system.time(tcrossprod(cnt.mat2))
1438206420022:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438206420627:cnt.mat <- t(cnt.mat[,-1])
1438206423325:cnt.mat2 <- cnt.mat[,1:30000]
1438206430260:system.time(tcrossprod(cnt.mat))
1438206745577:library("RevoUtilsMath", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.2")
1438206753149:system.time(tcrossprod(cnt.mat))
1438206774673:system.time(tcrossprod(t(cnt.mat))
1438206776724:)
1438206796274:detach("package:RevoUtilsMath", unload=TRUE)
1438206804424:system.time(tcrossprod(t(cnt.mat)))
1438206951250:library("RevoUtilsMath", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.2")
1438206985177:system.time((t(cnt.mat)) %*% cnt.mat)
1438206999429:detach("package:RevoUtilsMath", unload=TRUE)
1438207001799:system.time((t(cnt.mat)) %*% cnt.mat)
1438207021950:View(cnt.mat)
1438208876653:library("foreach", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.2")
1438208887450:library("parallel", lib.loc="/usr/lib64/RRO-3.2.1/R-3.2.1/lib/R/library")
1438208901074:library("iterators", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.2")
1438208924923:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438208968624:warnings()
1438208978137:# code from: https://gist.github.com/bobthecat/5024079
1438208978137:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438208978137:library(ff, quietly = TRUE)
1438208978137:require(doParallel)
1438208978137:if(ncore=="all"){
1438208978138:ncore = detectCores()
1438208978138:registerDoParallel(cores = ncore)
1438208978138:} else{
1438208978138:registerDoParallel(cores = ncore)
1438208978139:}
1438208978139:NCOL <- ncol(x)
1438208978139:## test if ncol(x) %% nblocks gives remainder 0
1438208978140:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438208978140:## preallocate square matrix of dimension
1438208978140:## ncol(x) in 'ff' single format
1438208978141:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438208978141:## split column numbers into 'nblocks' groups
1438208978141:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438208978142:## create all unique combinations of blocks
1438208978142:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438208978142:COMBS <- t(apply(COMBS, 1, sort))
1438208978143:COMBS <- unique(COMBS)
1438208978143:## iterate through each block combination, calculate correlation matrix
1438208978143:## between blocks and store them in the preallocated matrix on both
1438208978144:## symmetric sides of the diagonal
1438208978144:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438208978144:COMB <- COMBS[i, ]
1438208978145:G1 <- SPLIT[[COMB[1]]]
1438208978145:G2 <- SPLIT[[COMB[2]]]
1438208978145:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438208978146:flush.console()
1438208978146:COR <- cor(x[, G1], x[, G2], ...)
1438208978146:corMAT[G1, G2] <- COR
1438208978147:corMAT[G2, G1] <- t(COR)
1438208978147:COR <- NULL
1438208978147:}
1438208978148:gc()
1438208978148:return(corMAT)
1438208978149:}
1438208985978:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=12))
1438209029875:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438209029875:library(ff, quietly = TRUE)
1438209029876:require(doParallel)
1438209029876:if(ncore=="all"){
1438209029876:ncore = detectCores()
1438209029876:registerDoParallel(cores = ncore)
1438209029876:} else{
1438209029877:registerDoParallel(cores = ncore)
1438209029877:}
1438209029877:NCOL <- ncol(x)
1438209029878:## test if ncol(x) %% nblocks gives remainder 0
1438209029878:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438209029878:## preallocate square matrix of dimension
1438209029879:## ncol(x) in 'ff' single format
1438209029879:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438209029879:## split column numbers into 'nblocks' groups
1438209029880:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438209029880:## create all unique combinations of blocks
1438209029880:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438209029881:COMBS <- t(apply(COMBS, 1, sort))
1438209029881:COMBS <- unique(COMBS)
1438209029881:## iterate through each block combination, calculate correlation matrix
1438209029882:## between blocks and store them in the preallocated matrix on both
1438209029882:## symmetric sides of the diagonal
1438209029882:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438209029883:COMB <- COMBS[i, ]
1438209029883:G1 <- SPLIT[[COMB[1]]]
1438209029883:G2 <- SPLIT[[COMB[2]]]
1438209029884:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438209029884:flush.console()
1438209029884:COR <- cor(x[, G1], x[, G2], ...)
1438209029885:corMAT[G1, G2] <- COR
1438209029885:corMAT[G2, G1] <- t(COR)
1438209029885:COR <- NULL
1438209029886:}
1438209029886:gc()
1438209029887:return(corMAT)
1438209029887:}
1438209042072:system.time(cor.mat <- bigcorPar(cnt.mat, nblocks=10, ncore=12))
1438209089869:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438209109211:system.time(cor <- cor(cnt.mat, method="pearson", use="everything"))
1438270035517:?etc
1438270041179:??etc
1438270515959:.Machine$integer.max
1438270743755:library(bit64)
1438270756209:install.packages("bit64")
1438270775562:library(bit64)
1438270788673:.Machine$integer.max
1438270794296:.Machine$integer.max +1
1438270802660:as.integer(.Machine$integer.max +1)
1438270805982:as.integer(.Machine$integer.max +1L)
1438270837203:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438270837204:library(ff, quietly = TRUE)
1438270837204:require(doParallel)
1438270837204:if(ncore=="all"){
1438270837204:ncore = detectCores()
1438270837205:registerDoParallel(cores = ncore)
1438270837205:} else{
1438270837205:registerDoParallel(cores = ncore)
1438270837205:}
1438270837206:NCOL <- ncol(x)
1438270837206:## test if ncol(x) %% nblocks gives remainder 0
1438270837206:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438270837207:## preallocate square matrix of dimension
1438270837207:## ncol(x) in 'ff' single format
1438270837207:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438270837208:## split column numbers into 'nblocks' groups
1438270837208:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438270837208:## create all unique combinations of blocks
1438270837209:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438270837209:COMBS <- t(apply(COMBS, 1, sort))
1438270837209:COMBS <- unique(COMBS)
1438270837210:## iterate through each block combination, calculate correlation matrix
1438270837210:## between blocks and store them in the preallocated matrix on both
1438270837210:## symmetric sides of the diagonal
1438270837211:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438270837211:COMB <- COMBS[i, ]
1438270837211:G1 <- SPLIT[[COMB[1]]]
1438270837212:G2 <- SPLIT[[COMB[2]]]
1438270837212:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438270837212:flush.console()
1438270837213:COR <- cor(x[, G1], x[, G2], ...)
1438270837213:corMAT[G1, G2] <- COR
1438270837213:corMAT[G2, G1] <- t(COR)
1438270837214:COR <- NULL
1438270837214:}
1438270837215:gc()
1438270837215:return(corMAT)
1438270837215:}
1438270844434:library(ff)
1438270858490:library(doParallel)
1438270873707:system.time(cor.mat <- bigcorPar(cnt.mat, nblocks=10, ncore=10))
1438270909965:cnt.mat <- t(cnt.mat[,-1])
1438270911616:cnt.mat2 <- cnt.mat[,1:30000]
1438270915298:system.time(cor.mat <- bigcorPar(cnt.mat, nblocks=10, ncore=10))
1438270955699:ff(vmode = "single", dim = c(NCOL, NCOL))
1438270977403:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438270995081:NCOL=ncol(cnt.mat)
1438270996476:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438271042310:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=10))
1438271132574:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=10))
1438271249480:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438271278177:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=10))
1438271297400:cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=10)
1438271363299:system.time(cor.mat <- bigcorPar(cnt.mat, nblocks=10, ncore=10))
1438271365572:system.time(cor.mat <- bigcorPar(cnt.mat2, nblocks=10, ncore=10))
1438271417159:bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
1438271417159:library(ff, quietly = TRUE)
1438271417159:require(doParallel)
1438271417160:if(ncore=="all"){
1438271417160:ncore = detectCores()
1438271417160:registerDoParallel(cores = ncore)
1438271417160:} else{
1438271417160:registerDoParallel(cores = ncore)
1438271417161:}
1438271417161:NCOL <- ncol(x)
1438271417161:## test if ncol(x) %% nblocks gives remainder 0
1438271417162:if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
1438271417162:## preallocate square matrix of dimension
1438271417162:## ncol(x) in 'ff' single format
1438271417163:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438271417163:## split column numbers into 'nblocks' groups
1438271417163:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438271417164:## create all unique combinations of blocks
1438271417164:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438271417164:COMBS <- t(apply(COMBS, 1, sort))
1438271417165:COMBS <- unique(COMBS)
1438271417165:## iterate through each block combination, calculate correlation matrix
1438271417165:## between blocks and store them in the preallocated matrix on both
1438271417166:## symmetric sides of the diagonal
1438271417166:results <- foreach(i = 1:nrow(COMBS)) %dopar% {
1438271417166:COMB <- COMBS[i, ]
1438271417167:G1 <- SPLIT[[COMB[1]]]
1438271417167:G2 <- SPLIT[[COMB[2]]]
1438271417167:if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
1438271417168:flush.console()
1438271417168:COR <- cor(x[, G1], x[, G2], ...)
1438271417168:corMAT[G1, G2] <- COR
1438271417169:corMAT[G2, G1] <- t(COR)
1438271417169:COR <- NULL
1438271417169:}
1438271417170:gc()
1438271417170:return(corMAT)
1438271417171:}
1438271423203:system.time(cor.mat <- bigcorPar(cnt.mat, nblocks=10, ncore=10))
1438271552024:?ff
1438271582882:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438272048499:corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
1438272193201:object.size(0.2)
1438272196099:object.size(0.23252352523)
1438272201324:object.size(0.23252352523890367376023862)
1438272208399:object.size(1)
1438272210874:object.size(1.0)
1438272220473:object.size(0)
1438272226824:object.size(T)
1438272294899:?system
1438272346131:system(awk 'MemFree/ {print $2}' /proc/meminfo)
1438272357724:system(awk '/MemFree/ {print $2}' /proc/meminfo)
1438272391149:system(grep MemFree /proc/meminfo)
1438272621398:object.size(cnt.mat)
1438272626849:object.size(cnt.mat2)
1438272651158:2525048*2
1438272803049:object.size(cnt.mat[,1:50000])
1438272815431:object.size(cnt.mat[,1:52000])
1438273190855:?require
1438273538629:sort( sapply(ls(),function(x){object.size(get(x))}))
1438273621557:memory.limit()
1438273633300:memory.size
1438273636374:memory.size()
1438273805181:system(ls)
1438273810079:system("ls")
1438273819860:system("lscpu")
1438274842025:system("grep "MemAvailable" /proc/meminfo")
1438274858316:system("cat /proc/meminfo" | grep "MemAvailable")
1438274864165:system("cat /proc/meminfo")
1438275028349:class(system("cat /proc/meminfo"))
1438275040299:mem <- system("cat /proc/meminfo")
1438275089899:mem <- as.matrix(system("cat /proc/meminfo"))
1438275093273:View(mem)
1438275166286:mem <- as.integer(system("cat /proc/meminfo"))
1438275235524:system("cat /proc/meminfo")$1
1438275238748:system("cat /proc/meminfo")[1]
1438275243149:system("cat /proc/meminfo")[[1]
1438275244880:]
1438275544024:system("awk '/MemFree/ {print $2}' /proc/meminfo, intern=T")
1438275560324:system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)
1438275655442:mem.avail <- system("awk '/MemFree/ {print $3}' /proc/meminfo", intern=T)
1438275666599:mem.avail
1438275676073:mem.avail <- system("awk '/MemFree/ {print $4}' /proc/meminfo", intern=T)
1438275680199:mem.avail <- system("awk '/MemFree/ {print $5}' /proc/meminfo", intern=T)
1438275694474:mem.avail <- system("awk '/MemFree/ {print $1}' /proc/meminfo", intern=T)
1438275699175:mem.avail <- system("awk '/MemFree/ {print $5}' /proc/meminfo", intern=T)
1438275702327:mem.avail <- system("awk '/MemFree/ {print $4}' /proc/meminfo", intern=T)
1438275709704:system("awk '/MemFree/ {print $4}' /proc/meminfo", intern=T)
1438275713432:system("awk '/MemFree/ {print $3}' /proc/meminfo", intern=T)
1438275730855:system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)
1438275744651:mem.avail <- system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)
1438275746009:mem.est <- mem.avail / detectCores()
1438275762654:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T))
1438275764385:mem.est <- mem.avail / detectCores()
1438275809848:object.size(cnt.mat2)
1438275814831:object.size(cnt.mat2)/48
1438275881298:mem.est/48
1438275894959:object.size(cnt.mat)/48
1438275987425:23.16666666667 *48
1438276013324:(object.size(cnt.mat)-NCOL)
1438276029429:class(cor.mat)
1438276047663:object.size(cor.amt)
1438276050823:object.size(cor.mat)
1438276074149:View(cnt.mat2)
1438276117152:object.size(matrix(c(0.1), 30000, 30000))
1438276152407:object.size(matrix(c(0.1), 50000, 50000))
1438276223385:48*2500000000
1438276345924:object.size(matrix(c(0.1), NCOL, NCOL))
1438276950198:?floor)
1438276951849:?floor
1438276959324:floor(3/2)
1438276974774:class(floor(3/2))
1438276986523:class(1)
1438276999674:object.size(as.integer(1))
1438277271303:ffsave(cor.mat, file="cor_mat")
1438280347824:rm(cor.mat)
1438280375752:cor.amt<-ffload(file="cor_mat")
1438280427199:cor.mat<-ffload(file="cor_mat")
1438280440949:cor.mat<-ffload(file="cor_mat.ffData")
1438280467748:cor.mat<-ffload(file="cor_mat", overwrite=T
1438280467749:)
1438280571833:rm(cor.amt)
1438280580274:class(cor.mat)
1438280671895:cor.mat<-ffload(file="cor_mat", overwrite=F)
1438280740699:rm(cor.mat)
1438280757256:cor.mat<-ffload(file="cor_mat", overwrite=F)
1438280764661:library(ff)
1438280766577:cor.mat<-ffload(file="cor_mat", overwrite=F)
1438281277300:cor.mat[1]
1438281279530:cor.mat[1,]
1438281297224:ffload(file="cor_mat", overwrite=F)
1438281303762:ffload(file="cor_mat", overwrite=T)
1438281707307:system.tim(ffsave(cor.mat, file="cor_mat"))
1438281712252:system.time(ffsave(cor.mat, file="cor_mat"))
1438282177694:system.tim(ffload(file="cor_mat", overwrite=T))
1438282181987:system.time(ffload(file="cor_mat", overwrite=T))
1438282385116:cnt.mat3 <- cnt.mat[, 1:50000]
1438282402203:View(cnt.mat)
1438282435366:system.time(cor(cnt.mat3))
1438282530298:cnt.mat3 <- cnt.mat1[,1:40000]
1438282533445:cnt.mat3 <- cnt.mat[,1:40000]
1438282556971:system.time(cor(cnt.mat3))
1438284075208:NCOL = ncol(cnt.mat3)
1438284088324:NCOL = ncol(cnt.mat2)
1438284095099:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438284105109:nblocks=10
1438284112629:SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
1438284132970:COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
1438284134025:COMBS <- t(apply(COMBS, 1, sort))
1438284134253:COMBS <- unique(COMBS)
1438284136433:View(COMBS)
1438284158712:i=3
1438284161435:COMB <- COMBS[i, ]
1438284166776:G1 <- SPLIT[[COMB[1]]]
1438284167566:G2 <- SPLIT[[COMB[2]]]
1438284188709:class(COMB)
1438284194208:COMB
1438284212274:paste("dffwef", COMB)
1438284226628:paste("dffwef", COMB[1], COMB[2])
1438284265474:?ffsave
1438284270600:library(f)
1438284272557:library(ff)
1438284274073:?ffsave
1438354156154:add <- ncolx %% max.ncol
1438354612767:View(cnt.mat)
1438354667901:system.time(cor <- cor(cnt.mat2, method="pearson", use="everything"))
1438354689442:View(cor)
1438355211982:floor
1438355214800:?floor
1438355304198:?gc
1438355656896:COMB <- COMBS[i, ]
1438355658830:G1 <- split[[COMB[1]]]
1438355674589:split[[COMB[1]]]
1438355757868:ncolx = 80000
1438355765751:nchunks=2
1438355768561:split <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438355804954:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438355808530:rm(split)
1438355820558:class(groups)
1438355833385:COMBS <- expand.grid(1:length(split), 1:length(split))
1438355837834:COMBS <- t(apply(COMBS, 1, sort))
1438355838102:COMBS <- unique(COMBS)
1438355842774:COMB <- COMBS[i, ]
1438355848802:i=2
1438355851831:COMB <- COMBS[i, ]
1438355860814:COMBS <- expand.grid(1:length(split), 1:length(split))
1438355860957:COMBS <- t(apply(COMBS, 1, sort))
1438355861109:COMBS <- unique(COMBS)
1438355863873:View(COMBS)
1438355886753:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438355886876:COMBS <- t(apply(COMBS, 1, sort))
1438355887007:COMBS <- unique(COMBS)
1438355901624:COMB <- COMBS[i, ]
1438355910298:split[[COMB[1]]]
1438355935499:groups[[COMB[1]]
1438355939826:]
1438355990099:system.time(groups[[COMB[1]]])
1438357146166:cor.par <- function(x, nthreads="all") {
1438357146167:require(doParallel) # doMC ?
1438357146167:require(ff)
1438357146168:if(nthreads="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438357146168:nthreads <- detectCores() #make it a global var? or just register in beginning
1438357146168:}
1438357146168:registerDoParallel(cores = nthreads)
1438357146169:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438357146292:mem.est <- mem.avail / detectCores()
1438357146292:# determine the largest chunk size (vector) for one thread
1438357146293:# for now assume:
1438357146293:max.size = 40000*13
1438357146293:max.ncol = floor(max.size / nrow(x))
1438357146293:ncolx <- ncol(x)
1438357146294:nchunks <- ceiling(ncolx / max.ncol)
1438357146294:# extend the matrix so it is divided into even chunks
1438357146294:add <- ncolx %% max.ncol
1438357146295:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438357146295:ncolx <- ncol(x)
1438357146296:## split column numbers into 'nblocks' groups
1438357146296:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438357146302:## create all unique combinations of blocks
1438357146302:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438357146303:COMBS <- t(apply(COMBS, 1, sort))
1438357146304:COMBS <- unique(COMBS)
1438357146304:foreach(i = 1:nrow(COMBS)) %dopar% {
1438357146304:COMB <- COMBS[i, ]
1438357146305:G1 <- groups[[COMB[1]]]
1438357146305:G2 <- groups[[COMB[2]]]
1438357146305:if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438357146305:flush.console()
1438357146306:cor.mat <- cor(x[, G1], x[, G2], ...)
1438357146306:ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438357146306:#corMAT[G1, G2] <- COR
1438357146306:#corMAT[G2, G1] <- t(COR)
1438357146306:COR <- NULL
1438357146307:}
1438357146307:gc()
1438357146380:return(corMAT)
1438357146381:# ffsave(cor.mat, file="cor_mat")
1438357146381:# ffload(file="cor_mat", overwrite=T)
1438357146381:}
1438357223740:cor.par <- function(x, nthreads="all") {
1438357223741:require(doParallel) # doMC ?
1438357223741:require(ff)
1438357223741:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438357223741:nthreads <- detectCores() #make it a global var? or just register in beginning
1438357223741:}
1438357223742:registerDoParallel(cores = nthreads)
1438357223742:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438357223742:mem.est <- mem.avail / detectCores()
1438357223743:# determine the largest chunk size (vector) for one thread
1438357223743:# for now assume:
1438357223743:max.size = 40000*13
1438357223743:max.ncol = floor(max.size / nrow(x))
1438357223744:ncolx <- ncol(x)
1438357223744:nchunks <- ceiling(ncolx / max.ncol)
1438357223744:# extend the matrix so it is divided into even chunks
1438357223744:add <- ncolx %% max.ncol
1438357223745:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438357223745:ncolx <- ncol(x)
1438357223746:## split column numbers into 'nblocks' groups
1438357223746:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438357223746:## create all unique combinations of blocks
1438357223747:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438357223747:COMBS <- t(apply(COMBS, 1, sort))
1438357223747:COMBS <- unique(COMBS)
1438357223748:foreach(i = 1:nrow(COMBS)) %dopar% {
1438357223749:COMB <- COMBS[i, ]
1438357223749:G1 <- groups[[COMB[1]]]
1438357223749:G2 <- groups[[COMB[2]]]
1438357223750:if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438357223750:flush.console()
1438357223750:cor.mat <- cor(x[, G1], x[, G2], ...)
1438357223751:ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438357223751:#corMAT[G1, G2] <- COR
1438357223752:#corMAT[G2, G1] <- t(COR)
1438357223752:COR <- NULL
1438357223752:}
1438357223753:gc()
1438357223753:return(corMAT)
1438357223754:# ffsave(cor.mat, file="cor_mat")
1438357223755:# ffload(file="cor_mat", overwrite=T)
1438357223755:}
1438357243551:cor.par(cnt.mat2)
1438357266324:1
1438357336644:cor.par <- function(x, nthreads="all") {
1438357336645:require(doParallel) # doMC ?
1438357336645:require(ff)
1438357336645:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438357336645:nthreads <- detectCores() #make it a global var? or just register in beginning
1438357336646:}
1438357336646:registerDoParallel(cores = nthreads)
1438357336646:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438357336646:mem.est <- mem.avail / detectCores()
1438357336647:# determine the largest chunk size (vector) for one thread
1438357336647:# for now assume:
1438357336647:max.size = 40000*13
1438357336648:max.ncol = floor(max.size / nrow(x))
1438357336648:ncolx <- ncol(x)
1438357336648:nchunks <- ceiling(ncolx / max.ncol)
1438357336649:# extend the matrix so it is divided into even chunks
1438357336649:add <- ncolx %% max.ncol
1438357336649:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438357336649:ncolx <- ncol(x)
1438357336650:## split column numbers into 'nblocks' groups
1438357336650:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438357336651:## create all unique combinations of blocks
1438357336651:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438357336651:COMBS <- t(apply(COMBS, 1, sort))
1438357336652:COMBS <- unique(COMBS)
1438357336652:foreach(i = 1:nrow(COMBS)) %dopar% {
1438357336653:COMB <- COMBS[i, ]
1438357336653:G1 <- groups[[COMB[1]]]
1438357336653:G2 <- groups[[COMB[2]]]
1438357336654:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438357336654:flush.console()
1438357336654:cor.mat <- cor(x[, G1], x[, G2], ...)
1438357336655:ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438357336655:#corMAT[G1, G2] <- COR
1438357336656:#corMAT[G2, G1] <- t(COR)
1438357336656:COR <- NULL
1438357336656:}
1438357336657:gc()
1438357336657:return(corMAT)
1438357336658:# ffsave(cor.mat, file="cor_mat")
1438357336659:# ffload(file="cor_mat", overwrite=T)
1438357336659:}
1438357340099:cor.par(cnt.mat2)
1438357429160:cor.par <- function(x, nthreads="all") {
1438357429160:require(doParallel) # doMC ?
1438357429160:require(ff)
1438357429161:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438357429161:nthreads <- detectCores() #make it a global var? or just register in beginning
1438357429161:}
1438357429161:registerDoParallel(cores = nthreads)
1438357429161:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438357429162:mem.est <- mem.avail / detectCores()
1438357429162:# determine the largest chunk size (vector) for one thread
1438357429162:# for now assume:
1438357429163:max.size = 40000*13
1438357429163:max.ncol = floor(max.size / nrow(x))
1438357429163:ncolx <- ncol(x)
1438357429163:nchunks <- ceiling(ncolx / max.ncol)
1438357429164:# extend the matrix so it is divided into even chunks
1438357429164:add <- ncolx %% max.ncol
1438357429164:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438357429165:ncolx <- ncol(x)
1438357429165:## split column numbers into 'nblocks' groups
1438357429165:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438357429166:## create all unique combinations of blocks
1438357429166:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438357429167:COMBS <- t(apply(COMBS, 1, sort))
1438357429167:COMBS <- unique(COMBS)
1438357429168:foreach(i = 1:nrow(COMBS)) %dopar% {
1438357429168:COMB <- COMBS[i, ]
1438357429168:G1 <- groups[[COMB[1]]]
1438357429169:G2 <- groups[[COMB[2]]]
1438357429169:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438357429169:flush.console()
1438357429170:cor.mat <- cor(x[, G1], x[, G2])
1438357429170:ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438357429171:#corMAT[G1, G2] <- COR
1438357429171:#corMAT[G2, G1] <- t(COR)
1438357429171:COR <- NULL
1438357429172:}
1438357429172:gc()
1438357429173:return(corMAT)
1438357429174:# ffsave(cor.mat, file="cor_mat")
1438357429174:# ffload(file="cor_mat", overwrite=T)
1438357429175:}
1438357436824:cor.par(cnt.mat2)
1438357718248:paste("cor_mat_", COMB[1], COMB[2], sep="")
1438357737974:class(paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438357779386:## calculating corr
1438357779387:cor.par <- function(x, nthreads="all") {
1438357779387:require(doParallel) # doMC ?
1438357779387:require(ff)
1438357779387:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438357779388:nthreads <- detectCores() #make it a global var? or just register in beginning
1438357779388:}
1438357779388:registerDoParallel(cores = nthreads)
1438357779388:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438357779388:mem.est <- mem.avail / detectCores()
1438357779389:# determine the largest chunk size (vector) for one thread
1438357779389:# for now assume:
1438357779389:max.size = 40000*13
1438357779390:max.ncol = floor(max.size / nrow(x))
1438357779390:ncolx <- ncol(x)
1438357779390:nchunks <- ceiling(ncolx / max.ncol)
1438357779391:# extend the matrix so it is divided into even chunks
1438357779391:add <- ncolx %% max.ncol
1438357779391:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438357779391:ncolx <- ncol(x)
1438357779392:## split column numbers into 'nblocks' groups
1438357779392:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438357779393:## create all unique combinations of blocks
1438357779393:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438357779393:COMBS <- t(apply(COMBS, 1, sort))
1438357779394:COMBS <- unique(COMBS)
1438357779394:foreach(i = 1:nrow(COMBS)) %dopar% {
1438357779395:COMB <- COMBS[i, ]
1438357779395:G1 <- groups[[COMB[1]]]
1438357779395:G2 <- groups[[COMB[2]]]
1438357779396:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438357779396:flush.console()
1438357779397:cor.mat <- cor(x[, G1], x[, G2])
1438357779397:print(head(cor.mat))
1438357779397:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438357779398:#corMAT[G1, G2] <- COR
1438357779398:#corMAT[G2, G1] <- t(COR)
1438357779398:COR <- NULL
1438357779399:}
1438357779399:gc()
1438357779400:#return(corMAT)
1438357779400:# ffsave(cor.mat, file="cor_mat")
1438357779401:# ffload(file="cor_mat", overwrite=T)
1438357779401:}
1438357787779:cor.par(cnt.mat2)
1438357967648:View(COMBS)
1438358019971:## calculating corr
1438358019971:cor.par <- function(x, nthreads="all") {
1438358019972:require(doParallel) # doMC ?
1438358019972:require(ff)
1438358019972:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438358019972:nthreads <- detectCores() #make it a global var? or just register in beginning
1438358019972:}
1438358019973:registerDoParallel(cores = nthreads)
1438358019973:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438358019973:mem.est <- mem.avail / detectCores()
1438358019973:# determine the largest chunk size (vector) for one thread
1438358019974:# for now assume:
1438358019974:max.size = 40000*13
1438358019974:max.ncol = floor(max.size / nrow(x))
1438358019974:ncolx <- ncol(x)
1438358019975:nchunks <- ceiling(ncolx / max.ncol)
1438358019975:# extend the matrix so it is divided into even chunks
1438358019975:add <- ncolx %% max.ncol
1438358019976:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438358019976:ncolx <- ncol(x)
1438358019976:## split column numbers into 'nblocks' groups
1438358019977:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438358019977:## create all unique combinations of blocks
1438358019978:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438358019978:COMBS <- t(apply(COMBS, 1, sort))
1438358019978:COMBS <- unique(COMBS)
1438358019979:foreach(i = 1:nrow(COMBS)) %dopar% {
1438358019979:COMB <- COMBS[i, ]
1438358019980:print(COMBS)
1438358019980:G1 <- groups[[COMB[1]]]
1438358019980:G2 <- groups[[COMB[2]]]
1438358019981:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438358019981:flush.console()
1438358019981:cor.mat <- cor(x[, G1], x[, G2])
1438358019982:#print(head(cor.mat))
1438358019982:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438358019982:#corMAT[G1, G2] <- COR
1438358019983:#corMAT[G2, G1] <- t(COR)
1438358019983:COR <- NULL
1438358019983:}
1438358019984:gc()
1438358019984:return(cor.mat)
1438358019985:# ffsave(cor.mat, file="cor_mat")
1438358019986:# ffload(file="cor_mat", overwrite=T)
1438358019986:}
1438358040648:cor.mat <- cor.par(cnt.mat2)
1438358124699:cor.mat
1438358245628:cor.par <- function(x, nthreads="all") {
1438358245629:require(doParallel) # doMC ?
1438358245629:require(ff)
1438358245629:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438358245629:nthreads <- detectCores() #make it a global var? or just register in beginning
1438358245630:}
1438358245630:registerDoParallel(cores = nthreads)
1438358245630:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438358245630:mem.est <- mem.avail / detectCores()
1438358245631:# determine the largest chunk size (vector) for one thread
1438358245631:# for now assume:
1438358245631:max.size = 40000*13
1438358245631:max.ncol = floor(max.size / nrow(x))
1438358245632:ncolx <- ncol(x)
1438358245632:nchunks <- ceiling(ncolx / max.ncol)
1438358245632:# extend the matrix so it is divided into even chunks
1438358245633:add <- ncolx %% max.ncol
1438358245633:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438358245633:ncolx <- ncol(x)
1438358245634:## split column numbers into 'nblocks' groups
1438358245634:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438358245635:## create all unique combinations of blocks
1438358245635:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438358245635:COMBS <- t(apply(COMBS, 1, sort))
1438358245635:COMBS <- unique(COMBS)
1438358245636:foreach(i = 1:nrow(COMBS)) %dopar% {
1438358245637:COMB <- COMBS[i, ]
1438358245637:print(COMBS)
1438358245637:G1 <- groups[[COMB[1]]]
1438358245638:G2 <- groups[[COMB[2]]]
1438358245638:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438358245638:flush.console()
1438358245639:cor.mat <- cor(x[, G1], x[, G2])
1438358245639:#print(head(cor.mat))
1438358245639:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438358245640:#corMAT[G1, G2] <- COR
1438358245640:#corMAT[G2, G1] <- t(COR)
1438358245641:}
1438358245641:gc()
1438358245642:return(cor.mat)
1438358245642:# ffsave(cor.mat, file="cor_mat")
1438358245643:# ffload(file="cor_mat", overwrite=T)
1438358245643:}
1438358263298:X <- cor.par(cnt.mat2)
1438358472381:cor.par <- function(x, nthreads="all") {
1438358472382:require(doParallel) # doMC ?
1438358472382:require(ff)
1438358472382:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438358472382:nthreads <- detectCores() #make it a global var? or just register in beginning
1438358472383:}
1438358472383:registerDoParallel(cores = nthreads)
1438358472383:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438358472383:mem.est <- mem.avail / detectCores()
1438358472384:# determine the largest chunk size (vector) for one thread
1438358472384:# for now assume:
1438358472384:max.size = 40000*13
1438358472384:max.ncol = floor(max.size / nrow(x))
1438358472385:ncolx <- ncol(x)
1438358472385:nchunks <- ceiling(ncolx / max.ncol)
1438358472385:# extend the matrix so it is divided into even chunks
1438358472386:add <- ncolx %% max.ncol
1438358472386:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438358472386:ncolx <- ncol(x)
1438358472387:## split column numbers into 'nblocks' groups
1438358472387:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438358472388:## create all unique combinations of blocks
1438358472388:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438358472388:COMBS <- t(apply(COMBS, 1, sort))
1438358472388:COMBS <- unique(COMBS)
1438358472389:cor.mat <- matrix(NA, ncolx, ncolx)
1438358472390:foreach(i = 1:nrow(COMBS)) %dopar% {
1438358472390:COMB <- COMBS[i, ]
1438358472390:print(COMBS)
1438358472391:G1 <- groups[[COMB[1]]]
1438358472391:G2 <- groups[[COMB[2]]]
1438358472391:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438358472392:flush.console()
1438358472392:cor.mat <- cor(x[, G1], x[, G2])
1438358472392:#print(head(cor.mat))
1438358472393:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438358472393:#corMAT[G1, G2] <- COR
1438358472393:#corMAT[G2, G1] <- t(COR)
1438358472394:#cor.mat <- NULL
1438358472394:return(cor.mat)
1438358472395:}
1438358472395:gc()
1438358472396:#return(cor.mat)
1438358472396:# ffsave(cor.mat, file="cor_mat")
1438358472397:# ffload(file="cor_mat", overwrite=T)
1438358472397:}
1438358481778:X <- cor.par(cnt.mat2)
1438358895635:View(X)
1438358976011:cor.par <- function(x, nthreads="all") {
1438358976011:require(doParallel) # doMC ?
1438358976011:require(ff)
1438358976011:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438358976012:nthreads <- detectCores() #make it a global var? or just register in beginning
1438358976012:}
1438358976012:registerDoParallel(cores = nthreads)
1438358976012:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438358976012:mem.est <- mem.avail / detectCores()
1438358976013:# determine the largest chunk size (vector) for one thread
1438358976013:# for now assume:
1438358976013:max.size = 40000*13
1438358976014:max.ncol = floor(max.size / nrow(x))
1438358976014:ncolx <- ncol(x)
1438358976014:nchunks <- ceiling(ncolx / max.ncol)
1438358976015:# extend the matrix so it is divided into even chunks
1438358976015:add <- ncolx %% max.ncol
1438358976015:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438358976015:ncolx <- ncol(x)
1438358976016:## split column numbers into 'nblocks' groups
1438358976016:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438358976017:## create all unique combinations of blocks
1438358976017:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438358976017:COMBS <- t(apply(COMBS, 1, sort))
1438358976018:COMBS <- unique(COMBS)
1438358976018:cor.mat <- matrix(NA, ncolx, ncolx)
1438358976019:foreach(i = 1:nrow(COMBS)) %dopar% {
1438358976019:COMB <- COMBS[i, ]
1438358976019:print(COMBS)
1438358976020:G1 <- groups[[COMB[1]]]
1438358976020:G2 <- groups[[COMB[2]]]
1438358976020:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438358976021:#flush.console()
1438358976021:cor.mat <- cor(x[, G1], x[, G2])
1438358976022:#print(head(cor.mat))
1438358976022:write.csv(cor.mat, "cor_mat.csv")
1438358976022:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438358976023:#corMAT[G1, G2] <- COR
1438358976023:#corMAT[G2, G1] <- t(COR)
1438358976023:#cor.mat <- NULL
1438358976024:#return(cor.mat)
1438358976024:}
1438358976025:gc()
1438358976025:#return(cor.mat)
1438358976026:# ffsave(cor.mat, file="cor_mat")
1438358976026:# ffload(file="cor_mat", overwrite=T)
1438358976027:}
1438358985948:cor.par(cnt.mat2)
1438359124625:## calculating corr
1438359124625:cor.par <- function(x, nthreads="all") {
1438359124625:require(doParallel) # doMC ?
1438359124626:require(ff)
1438359124626:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438359124626:nthreads <- detectCores() #make it a global var? or just register in beginning
1438359124626:}
1438359124627:registerDoParallel(cores = nthreads)
1438359124627:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438359124627:mem.est <- mem.avail / detectCores()
1438359124627:# determine the largest chunk size (vector) for one thread
1438359124628:# for now assume:
1438359124628:max.size = 40000*13
1438359124628:max.ncol = floor(max.size / nrow(x))
1438359124628:ncolx <- ncol(x)
1438359124629:nchunks <- ceiling(ncolx / max.ncol)
1438359124629:# extend the matrix so it is divided into even chunks
1438359124629:add <- ncolx %% max.ncol
1438359124630:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438359124630:ncolx <- ncol(x)
1438359124630:## split column numbers into 'nblocks' groups
1438359124631:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438359124631:## create all unique combinations of blocks
1438359124632:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438359124632:COMBS <- t(apply(COMBS, 1, sort))
1438359124632:COMBS <- unique(COMBS)
1438359124633:#cor.mat <- matrix(NA, ncolx, ncolx)
1438359124633:foreach(i = 1:nrow(COMBS)) %dopar% {
1438359124634:COMB <- COMBS[i, ]
1438359124634:print(COMBS)
1438359124634:G1 <- groups[[COMB[1]]]
1438359124635:G2 <- groups[[COMB[2]]]
1438359124635:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438359124635:#flush.console()
1438359124636:cor.mat <- cor(x[, G1], x[, G2])
1438359124636:#print(head(cor.mat))
1438359124637:write.csv(cor.mat, "cor_mat.csv")
1438359124637:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438359124637:#corMAT[G1, G2] <- COR
1438359124638:#corMAT[G2, G1] <- t(COR)
1438359124638:#cor.mat <- NULL
1438359124638:#return(cor.mat)
1438359124639:}
1438359124639:gc()
1438359124640:#return(cor.mat)
1438359124641:# ffsave(cor.mat, file="cor_mat")
1438359124641:# ffload(file="cor_mat", overwrite=T)
1438359124642:}
1438359133827:cor.par(cnt.mat2)
1438359480219:cor.par <- function(x, nthreads="all") {
1438359480219:require(doParallel) # doMC ?
1438359480220:require(ff)
1438359480220:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438359480220:nthreads <- detectCores() #make it a global var? or just register in beginning
1438359480220:}
1438359480221:registerDoParallel(cores = nthreads)
1438359480221:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438359480221:mem.est <- mem.avail / detectCores()
1438359480222:# determine the largest chunk size (vector) for one thread
1438359480222:# for now assume:
1438359480222:max.size = 40000*13
1438359480222:max.ncol = floor(max.size / nrow(x))
1438359480223:ncolx <- ncol(x)
1438359480223:nchunks <- ceiling(ncolx / max.ncol)
1438359480223:# extend the matrix so it is divided into even chunks
1438359480224:add <- ncolx %% max.ncol
1438359480224:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438359480224:ncolx <- ncol(x)
1438359480225:## split column numbers into 'nblocks' groups
1438359480225:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438359480226:## create all unique combinations of blocks
1438359480226:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438359480226:COMBS <- t(apply(COMBS, 1, sort))
1438359480227:COMBS <- unique(COMBS)
1438359480227:#cor.mat <- matrix(NA, ncolx, ncolx)
1438359480228:foreach(i = 1:nrow(COMBS)) %dopar% {
1438359480228:COMB <- COMBS[i, ]
1438359480229:print(COMBS)
1438359480229:G1 <- groups[[COMB[1]]]
1438359480230:G2 <- groups[[COMB[2]]]
1438359480231:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438359480231:#flush.console()
1438359480231:cor.mat <- cor(x[, G1], x[, G2])
1438359480232:#print(head(cor.mat))
1438359480232:write.csv(cor.mat, "cor_mat.csv")
1438359480232:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438359480233:#corMAT[G1, G2] <- COR
1438359480233:#corMAT[G2, G1] <- t(COR)
1438359480234:#cor.mat <- NULL
1438359480234:#return(cor.mat)
1438359480234:}
1438359503477:## calculating corr
1438359503477:cor.par <- function(x, nthreads="all") {
1438359503477:require(doParallel) # doMC ?
1438359503477:require(ff)
1438359503478:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438359503478:nthreads <- detectCores() #make it a global var? or just register in beginning
1438359503478:}
1438359503478:registerDoParallel(cores = nthreads)
1438359503478:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438359503479:mem.est <- mem.avail / detectCores()
1438359503479:# determine the largest chunk size (vector) for one thread
1438359503479:# for now assume:
1438359503480:max.size = 40000*13
1438359503480:max.ncol = floor(max.size / nrow(x))
1438359503480:ncolx <- ncol(x)
1438359503480:nchunks <- ceiling(ncolx / max.ncol)
1438359503481:# extend the matrix so it is divided into even chunks
1438359503481:add <- ncolx %% max.ncol
1438359503481:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438359503482:ncolx <- ncol(x)
1438359503482:## split column numbers into 'nblocks' groups
1438359503482:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438359503483:## create all unique combinations of blocks
1438359503483:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438359503483:COMBS <- t(apply(COMBS, 1, sort))
1438359503484:COMBS <- unique(COMBS)
1438359503484:#cor.mat <- matrix(NA, ncolx, ncolx)
1438359503485:foreach(i = 1:nrow(COMBS)) %dopar% {
1438359503485:COMB <- COMBS[i, ]
1438359503486:print(COMBS)
1438359503486:G1 <- groups[[COMB[1]]]
1438359503486:G2 <- groups[[COMB[2]]]
1438359503487:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438359503487:#flush.console()
1438359503487:cor.mat <- cor(x[, G1], x[, G2])
1438359503488:#print(head(cor.mat))
1438359503488:write.csv(cor.mat, "cor_mat.csv")
1438359503488:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438359503489:#corMAT[G1, G2] <- COR
1438359503489:#corMAT[G2, G1] <- t(COR)
1438359503489:#cor.mat <- NULL
1438359503490:#return(cor.mat)
1438359503490:}
1438359503491:gc()
1438359503491:#return(cor.mat)
1438359503492:# ffsave(cor.mat, file="cor_mat")
1438359503492:# ffload(file="cor_mat", overwrite=T)
1438359503493:}
1438359507161:cor.par(cnt.mat2)
1438359667196:flush.console()
1438359983402:## calculating corr
1438359983403:cor.par <- function(x, nthreads="all") {
1438359983403:require(doParallel) # doMC ?
1438359983403:require(ff)
1438359983404:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438359983404:nthreads <- detectCores() #make it a global var? or just register in beginning
1438359983404:}
1438359983404:registerDoParallel(cores = nthreads)
1438359983405:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438359983405:mem.est <- mem.avail / detectCores()
1438359983405:# determine the largest chunk size (vector) for one thread
1438359983405:# for now assume:
1438359983406:max.size = 40000*13
1438359983406:max.ncol = floor(max.size / nrow(x))
1438359983406:ncolx <- ncol(x)
1438359983407:nchunks <- ceiling(ncolx / max.ncol)
1438359983407:# extend the matrix so it is divided into even chunks
1438359983407:add <- ncolx %% max.ncol
1438359983407:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438359983408:ncolx <- ncol(x)
1438359983408:## split column numbers into 'nblocks' groups
1438359983409:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438359983409:## create all unique combinations of blocks
1438359983409:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438359983410:COMBS <- t(apply(COMBS, 1, sort))
1438359983410:COMBS <- unique(COMBS)
1438359983411:#cor.mat <- matrix(NA, ncolx, ncolx)
1438359983411:foreach(i = 1:nrow(COMBS)) %dopar% {
1438359983412:COMB <- COMBS[i, ]
1438359983412:print(COMBS)
1438359983412:G1 <- groups[[COMB[1]]]
1438359983413:G2 <- groups[[COMB[2]]]
1438359983413:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438359983413:#flush.console()
1438359983414:cor.mat <- cor(x[, G1], x[, G2])
1438359983414:#print(head(cor.mat))
1438359983414:write.csv(cor.mat, "cor_mat.csv")
1438359983415:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438359983415:#corMAT[G1, G2] <- COR
1438359983415:#corMAT[G2, G1] <- t(COR)
1438359983416:#cor.mat <- NULL
1438359983416:#return(cor.mat)
1438359983417:}
1438359983417:#gc()
1438359983418:#return(cor.mat)
1438359983418:# ffsave(cor.mat, file="cor_mat")
1438359983419:# ffload(file="cor_mat", overwrite=T)
1438359983419:}
1438359987147:cor.par(cnt.mat2)
1438361036824:View(COMBS)
1438361075408:max.size = 40000*13
1438361075652:max.ncol = floor(max.size / nrow(x))
1438361076051:ncolx <- ncol(x)
1438361076374:nchunks <- ceiling(ncolx / max.ncol)
1438361086699:x <- cnt.mat2
1438361091300:ncolx <- ncol(x)
1438361092443:nchunks <- ceiling(ncolx / max.ncol)
1438361101524:max.size = 40000*13
1438361101723:max.ncol = floor(max.size / nrow(x))
1438361101896:ncolx <- ncol(x)
1438361102344:nchunks <- ceiling(ncolx / max.ncol)
1438361103212:# extend the matrix so it is divided into even chunks
1438361103426:add <- ncolx %% max.ncol
1438361104004:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438361104462:ncolx <- ncol(x)
1438361104977:## split column numbers into 'nblocks' groups
1438361105988:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438361106623:## create all unique combinations of blocks
1438361106778:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438361107180:COMBS <- t(apply(COMBS, 1, sort))
1438361107338:COMBS <- unique(COMBS)
1438361108024:#cor.mat <- matrix(NA, ncolx, ncolx)
1438361128425:COMB <- COMBS[i, ]
1438361141099:i=1
1438361145504:COMB <- COMBS[i, ]
1438361147884:print(COMBS)
1438361149628:G1 <- groups[[COMB[1]]]
1438361150148:G2 <- groups[[COMB[2]]]
1438361164549:dmi(X)
1438361168578:dim(x)
1438361234563:ncolx <- ncol(x)
1438361240494:max.size = 40000*13
1438361240732:max.ncol = floor(max.size / nrow(x))
1438361256900:ncolx <- ncol(cnt.mat2)
1438361265707:nchunks <- ceiling(ncolx / max.ncol)
1438361271865:add <- ncolx %% max.ncol
1438361331477:add <- max.ncol % ncolx
1438361338771:add <- max.ncol %% ncolx
1438361342234:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438361347459:dim(x)
1438361353752:View(x)
1438361365728:dim(cnt.mat2)
1438361424238:ncolx <- ncol(x)
1438361426584:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438361427953:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438361428152:COMBS <- t(apply(COMBS, 1, sort))
1438361428460:COMBS <- unique(COMBS)
1438361432627:COMB <- COMBS[i, ]
1438361433863:print(COMBS)
1438361435307:G1 <- groups[[COMB[1]]]
1438361435524:G2 <- groups[[COMB[2]]]
1438361438325:cor.mat <- cor(x[, G1], x[, G2])
1438361539923:max.size = 40000*12 / 12 #col / nthreads
1438361540116:max.ncol = floor(max.size / nrow(x))
1438361540642:ncolx <- ncol(x)
1438361540820:nchunks <- ceiling(ncolx / max.ncol)
1438361541803:add <- max.ncol %% ncolx
1438361541956:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438361542388:ncolx <- ncol(x)
1438361546629:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438361568377:x <_ cnt.mat2
1438361571049:x <- cnt.mat2
1438361574329:max.size = 40000*12 / 12 #col / nthreads
1438361574857:max.ncol = floor(max.size / nrow(x))
1438361575336:ncolx <- ncol(x)
1438361575839:nchunks <- ceiling(ncolx / max.ncol)
1438361578004:add <- max.ncol %% ncolx
1438361647749:nchunks
1438361659747:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438361660925:ncolx <- ncol(x)
1438361662004:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438361725706:nclox
1438361728981:ncolx
1438361745399:ncolx / max.ncol
1438361778724:gc()
1438361814374:flush.console()
1438361846480:gc(reset=T)
1438361910774:gc()
1438362553199:rm(cor.amt)
1438362555752:rm(cor.mat)
1438362559056:gc()
1438362638099:cor.mat <- NULL
1438362660077:cor.par <- function(x, nthreads="all") {
1438362660077:require(doParallel) # doMC ?
1438362660077:require(ff)
1438362660078:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438362660078:nthreads <- detectCores() #make it a global var? or just register in beginning
1438362660078:}
1438362660078:registerDoParallel(cores = nthreads)
1438362660079:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438362660079:mem.est <- mem.avail / detectCores()
1438362660079:# determine the largest chunk size (matrix / vector) for one thread
1438362660079:# for now assume:
1438362660080:max.size = 40000*12 / 12 #col / nthreads
1438362660080:max.ncol = floor(max.size / nrow(x))
1438362660080:ncolx <- ncol(x)
1438362660080:nchunks <- ceiling(ncolx / max.ncol)
1438362660081:# extend the matrix so it is divided into even chunks
1438362660081:add <- max.ncol %% ncolx
1438362660081:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438362660082:ncolx <- ncol(x)
1438362660082:## split column numbers into 'nblocks' groups
1438362660083:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438362660083:## create all unique combinations of blocks
1438362660083:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438362660084:COMBS <- t(apply(COMBS, 1, sort))
1438362660084:COMBS <- unique(COMBS)
1438362660085:#cor.mat <- matrix(NA, ncolx, ncolx)
1438362660085:foreach(i = 1:nrow(COMBS)) %dopar% {
1438362660085:COMB <- COMBS[i, ]
1438362660086:print(COMBS)
1438362660086:G1 <- groups[[COMB[1]]]
1438362660086:G2 <- groups[[COMB[2]]]
1438362660087:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438362660087:#flush.console()
1438362660088:cor.mat <- cor(x[, G1], x[, G2])
1438362660088:#print(head(cor.mat))
1438362660088:write.csv(cor.mat, "cor_mat.csv")
1438362660089:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438362660089:#corMAT[G1, G2] <- COR
1438362660089:#corMAT[G2, G1] <- t(COR)
1438362660090:#cor.mat <- NULL
1438362660090:#return(cor.mat)
1438362660090:cor.mat <- NULL
1438362660091:#gc()
1438362660091:}
1438362660092:#gc()
1438362660092:#return(cor.mat)
1438362660093:# ffsave(cor.mat, file="cor_mat")
1438362660093:# ffload(file="cor_mat", overwrite=T)
1438362660094:}
1438362695099:cor.par(cnt.mat2)
1438362857540:max.size = 40000*12 / 12 #col / nthreads
1438362858479:max.ncol = floor(max.size / nrow(x))
1438362859386:ncolx <- ncol(x)
1438362874074:x <- cnt.mat2
1438362876352:ncolx <- ncol(x)
1438362880215:nchunks <- ceiling(ncolx / max.ncol)
1438362905566:rm NCOL
1438362913105:rm(NCOL)
1438362916202:rm(SPLIT)
1438363174287:ncolx <- as.integer(ncol(x))
1438363194556:ncolx <- as.numeric(ncol(x))
1438363199780:nchunks <- ceiling(ncolx / max.ncol)
1438363214659:add <- max.ncol %% ncolx
1438363232743:add <- ncolx %% max.ncol
1438363257249:3 %%#
1438363262573:3 %% 3
1438363268399:30 %% 3
1438363293036:add <- ncolx %% nchunks
1438363294633:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438363319574:head(x)
1438363333574:x[3,3]
1438371876805:max.size = 40000*12 / 12 #col / nthreads
1438371877633:max.ncol = floor(max.size / nrow(x))
1438371877824:ncolx <- as.numeric(ncol(x))
1438371877977:nchunks <- ceiling(ncolx / max.ncol)
1438371888787:x <- cnt.mat2
1438371891989:max.ncol = floor(max.size / nrow(x))
1438371892494:ncolx <- as.numeric(ncol(x))
1438371892788:nchunks <- ceiling(ncolx / max.ncol)
1438371903742:add <- ncolx %% nchunks
1438371905885:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438371906285:ncolx <- ncol(x)
1438371923717:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438371933165:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438371933372:COMBS <- t(apply(COMBS, 1, sort))
1438371933522:COMBS <- unique(COMBS)
1438371948324:COMB <- COMBS[i, ]
1438371949432:print(COMBS)
1438371949835:G1 <- groups[[COMB[1]]]
1438371950923:G2 <- groups[[COMB[2]]]
1438371967706:cor.mat <- cor(x[, G1], x[, G2])
1438371976067:View(cor.mat)
1438372111385:proper <- cor(cor.mat)
1438372116038:View(proper)
1438372136052:proper <- cor(cnt.mat)
1438372167137:proper <- cor(cnt.mat)
1438372241703:proper <- cor(cnt.mat2)
1438372267268:View(proper)
1438372360467:require(doParallel) # doMC ?
1438372361504:require(ff)
1438372371663:x <- cnt.mat2
1438372383667:max.size = 40000*12 / 12 #col / nthreads
1438372383858:max.ncol = floor(max.size / nrow(x))
1438372384005:ncolx <- as.numeric(ncol(x))
1438372384139:nchunks <- ceiling(ncolx / max.ncol)
1438372384612:# extend the matrix so it is divided into even chunks
1438372384740:add <- ncolx %% nchunks
1438372384884:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438372385202:ncolx <- ncol(x)
1438372385338:## split column numbers into 'nblocks' groups
1438372386059:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438372386497:## create all unique combinations of blocks
1438372386705:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438372386849:COMBS <- t(apply(COMBS, 1, sort))
1438372386990:COMBS <- unique(COMBS)
1438372387107:#cor.mat <- matrix(NA, ncolx, ncolx)
1438372395060:i=1
1438372398472:COMB <- COMBS[i, ]
1438372400800:print(COMBS)
1438372405736:print(COMB)
1438372407873:G1 <- groups[[COMB[1]]]
1438372409032:G2 <- groups[[COMB[2]]]
1438372412993:cor.mat <- cor(x[, G1], x[, G2])
1438372417243:View(cor.mat)
1438373624017:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438373627207:cnt.mat <- t(cnt.mat[,-1])
1438373639967:cnt.mat2 <- cnt.mat[,1:30000]
1438373649134:require(doParallel) # doMC ?
1438373649301:require(ff)
1438373657406:x <- cnt.mat2
1438373661350:max.size = 40000*12 / 12 #col / nthreads
1438373663357:max.ncol = floor(max.size / nrow(x))
1438373663946:ncolx <- as.numeric(ncol(x))
1438373664386:nchunks <- ceiling(ncolx / max.ncol)
1438373666090:add <- ncolx %% nchunks
1438373670645:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438373671978:ncolx <- ncol(x)
1438373674826:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438373681858:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438373682201:COMBS <- t(apply(COMBS, 1, sort))
1438373682474:COMBS <- unique(COMBS)
1438373694149:i <- 1
1438373697961:COMB <- COMBS[i, ]
1438373698984:print(COMB)
1438373700697:G1 <- groups[[COMB[1]]]
1438373700898:G2 <- groups[[COMB[2]]]
1438373727577:save.image("/mnt/DATAPART1/corr.RData")
1438373769365:proper <- cor(cnt.mat2)
1438373819411:save.image("/mnt/DATAPART1/corr.RData")
1438374061947:cor.mat <- cor(x[, G1], x[, G2])
1438374065273:View(cor.mat)
1438374083605:write.csv(cor.mat, "cor_mat.csv")
1438374099792:cor.mat <- NULL
1438374123303:rm(cor.mat)# <- NULL
1438374368218:cor.par <- function(x, nthreads="all") {
1438374368218:require(doParallel) # doMC ?
1438374368218:require(ff)
1438374368218:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438374368219:nthreads <- detectCores() #make it a global var? or just register in beginning
1438374368219:}
1438374368219:registerDoParallel(cores = nthreads)
1438374368219:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438374368220:mem.est <- mem.avail / detectCores()
1438374368220:# determine the largest chunk size (matrix / vector) for one thread
1438374368220:# for now assume:
1438374368220:max.size = 40000*12 / 12 #col / nthreads
1438374368221:max.ncol = floor(max.size / nrow(x))
1438374368221:ncolx <- as.numeric(ncol(x))
1438374368221:nchunks <- ceiling(ncolx / max.ncol)
1438374368222:# extend the matrix so it is divided into even chunks
1438374368222:add <- ncolx %% nchunks
1438374368222:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438374368222:ncolx <- ncol(x)
1438374368223:## split column numbers into 'nblocks' groups
1438374368223:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438374368224:## create all unique combinations of blocks
1438374368224:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438374368224:COMBS <- t(apply(COMBS, 1, sort))
1438374368225:COMBS <- unique(COMBS)
1438374368225:#cor.mat <- matrix(NA, ncolx, ncolx)
1438374368226:foreach(i = 1:nrow(COMBS)) %dopar% {
1438374368226:COMB <- COMBS[i, ]
1438374368227:print(COMB)
1438374368227:G1 <- groups[[COMB[1]]]
1438374368227:G2 <- groups[[COMB[2]]]
1438374368228:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438374368228:#flush.console()
1438374368229:cor.mat <- cor(x[, G1], x[, G2])
1438374368229:#print(head(cor.mat))
1438374368229:write.csv(cor.mat, "cor_mat.csv")
1438374368230:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438374368230:#corMAT[G1, G2] <- COR
1438374368230:#corMAT[G2, G1] <- t(COR)
1438374368231:#cor.mat <- NULL
1438374368231:#return(cor.mat)
1438374368231:cor.mat <- NULL
1438374368232:#gc()
1438374368232:}
1438374368233:#gc()
1438374368233:#return(cor.mat)
1438374368234:# ffsave(cor.mat, file="cor_mat")
1438374368234:# ffload(file="cor_mat", overwrite=T)
1438374368235:}
1438374378865:cor.par(cnt.mat2)
1438374538038:## calculating corr
1438374538039:cor.par <- function(x, nthreads="all") {
1438374538039:require(doParallel) # doMC ?
1438374538039:require(ff)
1438374538039:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438374538039:nthreads <- detectCores() #make it a global var? or just register in beginning
1438374538040:}
1438374538040:registerDoParallel(cores = nthreads)
1438374538040:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438374538040:mem.est <- mem.avail / detectCores()
1438374538041:# determine the largest chunk size (matrix / vector) for one thread
1438374538041:# for now assume:
1438374538041:max.size = 40000*12 / 12 #col / nthreads
1438374538042:max.ncol = floor(max.size / nrow(x))
1438374538042:ncolx <- as.numeric(ncol(x))
1438374538042:nchunks <- ceiling(ncolx / max.ncol)
1438374538042:# extend the matrix so it is divided into even chunks
1438374538043:add <- ncolx %% nchunks
1438374538043:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438374538043:ncolx <- ncol(x)
1438374538044:## split column numbers into 'nblocks' groups
1438374538044:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438374538045:## create all unique combinations of blocks
1438374538045:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438374538045:COMBS <- t(apply(COMBS, 1, sort))
1438374538046:COMBS <- unique(COMBS)
1438374538046:#cor.mat <- matrix(NA, ncolx, ncolx)
1438374538047:foreach(i = 1:nrow(COMBS)) %dopar% {
1438374538047:COMB <- COMBS[i, ]
1438374538047:print(COMB)
1438374538048:G1 <- groups[[COMB[1]]]
1438374538048:G2 <- groups[[COMB[2]]]
1438374538049:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438374538049:#flush.console()
1438374538049:cor.mat <- cor(x[, G1], x[, G2])
1438374538050:#print(head(cor.mat))
1438374538050:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], COMB[2], ".csv"))
1438374538050:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438374538051:#corMAT[G1, G2] <- COR
1438374538051:#corMAT[G2, G1] <- t(COR)
1438374538051:#cor.mat <- NULL
1438374538052:#return(cor.mat)
1438374538052:cor.mat <- NULL
1438374538053:#gc()
1438374538053:}
1438374547466:}
1438374550490:cor.par(cnt.mat2)
1438374916998:cor.par <- function(x, nthreads="all") {
1438374916999:require(doParallel) # doMC ?
1438374916999:require(ff)
1438374916999:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438374916999:nthreads <- detectCores() #make it a global var? or just register in beginning
1438374916999:}
1438374917000:registerDoParallel(cores = nthreads)
1438374917000:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438374917000:mem.est <- mem.avail / detectCores()
1438374917001:# determine the largest chunk size (matrix / vector) for one thread
1438374917001:# for now assume:
1438374917001:max.size = 40000*12 / 12 #col / nthreads
1438374917001:max.ncol = floor(max.size / nrow(x))
1438374917002:ncolx <- as.numeric(ncol(x))
1438374917002:nchunks <- ceiling(ncolx / max.ncol)
1438374917002:# extend the matrix so it is divided into even chunks
1438374917003:add <- ncolx %% nchunks
1438374917003:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438374917003:ncolx <- ncol(x)
1438374917004:## split column numbers into 'nblocks' groups
1438374917004:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438374917004:## create all unique combinations of blocks
1438374917005:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438374917005:COMBS <- t(apply(COMBS, 1, sort))
1438374917005:COMBS <- unique(COMBS)
1438374917006:#cor.mat <- matrix(NA, ncolx, ncolx)
1438374917007:foreach(i = 1:nrow(COMBS)) %dopar% {
1438374917007:COMB <- COMBS[i, ]
1438374917007:print(COMB)
1438374917008:G1 <- groups[[COMB[1]]]
1438374917008:G2 <- groups[[COMB[2]]]
1438374917008:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438374917009:#flush.console()
1438374917016:cor.mat <- cor(x[, G1], x[, G2])
1438374917016:#print(head(cor.mat))
1438374917017:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], COMB[2], ".csv"))
1438374917017:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438374917018:#corMAT[G1, G2] <- COR
1438374917018:#corMAT[G2, G1] <- t(COR)
1438374917018:#cor.mat <- NULL
1438374917019:#return(cor.mat)
1438374917019:rm(cor.mat)
1438374917019:print(done)
1438374917020:#gc()
1438374917020:}
1438374917021:#gc()
1438374917021:#return(cor.mat)
1438374917022:# ffsave(cor.mat, file="cor_mat")
1438374917022:# ffload(file="cor_mat", overwrite=T)
1438374917023:}
1438374963758:## calculating corr
1438374963758:cor.par <- function(x, nthreads="all") {
1438374963759:require(doParallel) # doMC ?
1438374963759:require(ff)
1438374963759:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438374963759:nthreads <- detectCores() #make it a global var? or just register in beginning
1438374963760:}
1438374963760:registerDoParallel(cores = nthreads)
1438374963760:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438374963760:mem.est <- mem.avail / detectCores()
1438374963761:# determine the largest chunk size (matrix / vector) for one thread
1438374963761:# for now assume:
1438374963761:max.size = 40000*12 / 12 #col / nthreads
1438374963761:max.ncol = floor(max.size / nrow(x))
1438374963762:ncolx <- as.numeric(ncol(x))
1438374963762:nchunks <- ceiling(ncolx / max.ncol)
1438374963762:# extend the matrix so it is divided into even chunks
1438374963763:add <- ncolx %% nchunks
1438374963763:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438374963763:ncolx <- ncol(x)
1438374963764:## split column numbers into 'nblocks' groups
1438374963764:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438374963764:## create all unique combinations of blocks
1438374963765:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438374963765:COMBS <- t(apply(COMBS, 1, sort))
1438374963765:COMBS <- unique(COMBS)
1438374963766:#cor.mat <- matrix(NA, ncolx, ncolx)
1438374963767:foreach(i = 1:nrow(COMBS)) %dopar% {
1438374963767:COMB <- COMBS[i, ]
1438374963767:print(COMB)
1438374963768:G1 <- groups[[COMB[1]]]
1438374963768:G2 <- groups[[COMB[2]]]
1438374963768:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438374963769:#flush.console()
1438374963769:cor.mat <- cor(x[, G1], x[, G2])
1438374963770:#print(head(cor.mat))
1438374963770:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], COMB[2], ".csv"))
1438374963770:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438374963771:#corMAT[G1, G2] <- COR
1438374963771:#corMAT[G2, G1] <- t(COR)
1438374963771:#cor.mat <- NULL
1438374963772:#return(cor.mat)
1438374963772:rm(cor.mat)
1438374963772:print(paste("done", COMB[1], COMB[2]))
1438374963773:#gc()
1438374963773:}
1438374963774:#gc()
1438374963774:#return(cor.mat)
1438374963775:# ffsave(cor.mat, file="cor_mat")
1438374963775:# ffload(file="cor_mat", overwrite=T)
1438374963776:}
1438374970265:cor.par(cnt.mat2)
1438375068516:gc()
1438375098322:View(cnt.mat2)
1438375587390:pre.mat <- ff(vmode = "single", dim = c(70000, 70000))
1438375607566:sqrt(.Machine$integer.max)
1438375623265:pre.mat <- ff(vmode = "single", dim = c(50000, 50000))
1438375632290:pre.mat <- ff(vmode = "single", dim = c(47000, 47000))
1438375638616:pre.mat <- ff(vmode = "single", dim = c(46000, 46000))
1438375699566:rm(cor.mat)
1438375717940:rm(cor.par)
1438375738710:save.image("/mnt/DATAPART1/corr.RData")
1438375959775:cor.par <- function(x, nthreads="all") {
1438375959776:require(doParallel) # doMC ?
1438375959776:#require(ff)
1438375959776:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438375959776:nthreads <- detectCores() #make it a global var? or just register in beginning
1438375959777:}
1438375959777:registerDoParallel(cores = nthreads)
1438375959777:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438375959777:mem.est <- mem.avail / detectCores()
1438375959778:# determine the largest chunk size (matrix / vector) for one thread
1438375959778:# for now assume:
1438375959778:max.size = 40000*12 / 12 #col / nthreads
1438375959778:max.ncol = floor(max.size / nrow(x))
1438375959779:ncolx <- as.numeric(ncol(x))
1438375959779:nchunks <- ceiling(ncolx / max.ncol)
1438375959779:# extend the matrix so it is divided into even chunks
1438375959780:add <- ncolx %% nchunks
1438375959780:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438375959780:ncolx <- ncol(x)
1438375959781:## split column numbers into 'nblocks' groups
1438375959781:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438375959781:## create all unique combinations of blocks
1438375959782:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438375959782:COMBS <- t(apply(COMBS, 1, sort))
1438375959782:COMBS <- unique(COMBS)
1438375959783:#cor.mat <- matrix(NA, ncolx, ncolx)
1438375959784:foreach(i = 1:nrow(COMBS)) %dopar% {
1438375959784:COMB <- COMBS[i, ]
1438375959784:print(COMB)
1438375959785:G1 <- groups[[COMB[1]]]
1438375959785:G2 <- groups[[COMB[2]]]
1438375959785:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438375959786:#flush.console()
1438375959786:cor.mat <- cor(x[, G1], x[, G2])
1438375959787:#print(head(cor.mat))
1438375959787:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], COMB[2], ".csv"))
1438375959787:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438375959788:#corMAT[G1, G2] <- COR
1438375959788:#corMAT[G2, G1] <- t(COR)
1438375959789:#cor.mat <- NULL
1438375959789:#return(cor.mat)
1438375959789:rm(cor.mat)
1438375959790:print(paste("done", COMB[1], COMB[2]))
1438375959790:gc()
1438375959790:}
1438375959791:#rm(COMBS, )
1438375959791:#gc()
1438375959792:#return(cor.mat)
1438375959792:# ffsave(cor.mat, file="cor_mat")
1438375959793:# ffload(file="cor_mat", overwrite=T)
1438375959793:}
1438375979700:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438375979971:cnt.mat <- t(cnt.mat[,-1])
1438375979992:cnt.mat2 <- cnt.mat[,1:30000]
1438376001292:cor.par(cnt.mat2)
1438376101383:## calculating corr
1438376101383:cor.par <- function(x, nthreads="all") {
1438376101383:require(doParallel) # doMC ?
1438376101383:#require(ff)
1438376101384:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438376101384:nthreads <- detectCores() #make it a global var? or just register in beginning
1438376101384:}
1438376101384:registerDoParallel(cores = nthreads)
1438376101385:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438376101385:mem.est <- mem.avail / detectCores()
1438376101385:# determine the largest chunk size (matrix / vector) for one thread
1438376101385:# for now assume:
1438376101386:max.size = 40000*12 / 12 #col / nthreads
1438376101386:max.ncol = floor(max.size / nrow(x))
1438376101386:ncolx <- as.numeric(ncol(x))
1438376101386:nchunks <- ceiling(ncolx / max.ncol)
1438376101387:# extend the matrix so it is divided into even chunks
1438376101387:add <- ncolx %% nchunks
1438376101387:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438376101388:ncolx <- ncol(x)
1438376101388:## split column numbers into 'nblocks' groups
1438376101389:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438376101389:## create all unique combinations of blocks
1438376101389:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438376101390:COMBS <- t(apply(COMBS, 1, sort))
1438376101390:COMBS <- unique(COMBS)
1438376101391:#cor.mat <- matrix(NA, ncolx, ncolx)
1438376101391:foreach(i = 1:nrow(COMBS)) %dopar% {
1438376101391:COMB <- COMBS[i, ]
1438376101392:print(COMB)
1438376101392:G1 <- groups[[COMB[1]]]
1438376101392:G2 <- groups[[COMB[2]]]
1438376101393:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438376101402:#flush.console()
1438376101402:cor.mat <- cor(x[, G1], x[, G2])
1438376101402:#print(head(cor.mat))
1438376101403:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], COMB[2], ".csv"))
1438376101403:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438376101403:#corMAT[G1, G2] <- COR
1438376101404:#corMAT[G2, G1] <- t(COR)
1438376101404:#cor.mat <- NULL
1438376101404:#return(cor.mat)
1438376101405:rm(cor.mat)
1438376101405:print(paste("done", COMB[1], COMB[2]))
1438376101406:#gc()
1438376101406:}
1438376101406:#rm(COMBS, )
1438376101407:#gc()
1438376101407:#return(cor.mat)
1438376101408:# ffsave(cor.mat, file="cor_mat")
1438376101408:# ffload(file="cor_mat", overwrite=T)
1438376101409:}
1438376106115:cor.par(cnt.mat2)
1438376185046:?gc
1438612641639:?setwd
1438613188805:path.expand(~/)
1438613192972:path.expand("~")
1438613200562:path.expand("/")
1438613228802:path.expand("rnaseq.Rproj")
1438613234681:path.expand("/rnaseq.Rproj")
1438613264572:fp <- file.path(gtewd())
1438613268186:fp <- file.path(getwd())
1438613303084:paste0(fp, "/cor")
1438613834632:system.timematrix(NA, 100000, 100000))
1438613840880:system.time(matrix(NA, 100000, 100000))
1438613931607:basename()
1438616741530:system.time(matrix(NA, 100000, 100000))
1438617593367:system.time(matrix(NA, 200000, 200000))
1438617639405:system.time(matrix(NA, 200000, 100000))
1438618300031:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438618300442:cnt.mat <- t(cnt.mat[,-1])
1438618300446:cnt.mat2 <- cnt.mat[,1:30000]
1438618307621:names(cnt.mat2)
1438618315712:rownames((cnt.mat2))
1438618380967:colnames((cnt.mat2))
1438618384956:View(cnt.mat2)
1438618392656:View(cnt.mat)
1438618400300:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438618401746:View(cnt.mat)
1438618534155:rownames(cnt.mat)
1438618555157:names(cnt.mat)
1438618586015:rownames(cnt.mat) <- cnt.mat[,1]
1438618591159:rownames(cnt.mat)
1438618593924:View(cnt.mat)
1438618628308:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438618628678:rownames(cnt.mat) <- cnt.mat[,1]
1438618628874:cnt.mat <- t(cnt.mat[,-1])
1438618630521:View(cnt.mat2)
1438618630871:View(cnt.mat)
1438618651296:cnt.mat2 <- cnt.mat[,1:30000]
1438618768672:?data.frame
1438618796177:data.frame(NA, ncol=2, nrow =2)
1438618803640:data.frame(NA, ncol=2, nrow=2)
1438618868620:x <- cnt.mat2
1438618874320:require(doParallel) # doMC ?
1438618879039:registerDoParallel(cores = nthreads)
1438618886151:cols <- colnames(x)
1438618888030:max.size = 40000*12 / 12 #col / nthreads
1438618888222:max.ncol = floor(max.size / nrow(x))
1438618888422:ncolx <- as.numeric(ncol(x))
1438618888621:nchunks <- ceiling(ncolx / max.ncol)
1438618891560:# extend the matrix so it is divided into even chunks
1438618891751:add <- ncolx %% nchunks
1438618892237:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438618892421:ncolx <- ncol(x)
1438618893223:## split column numbers into 'nblocks' groups
1438618893404:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438618893588:## create all unique combinations of blocks
1438618894256:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438618894582:COMBS <- t(apply(COMBS, 1, sort))
1438618894767:COMBS <- unique(COMBS)
1438618895727:#cor.mat <- matrix(NA, ncolx, ncolx)
1438618895903:foreach(i = 1:nrow(COMBS)) %dopar% {
1438618904730:i=1
1438618907707:COMB <- COMBS[i, ]
1438618909055:print(COMB)
1438618910382:G1 <- groups[[COMB[1]]]
1438618910955:G2 <- groups[[COMB[2]]]
1438618918569:cor.mat <- cor(x[, G1], x[, G2])
1438618929161:class(cor.amt)
1438618932456:class(cor.mat)
1438618939055:View(cor.mat)
1438618962130:dim(cor.mat)
1438618974655:i=4
1438618977366:COMB <- COMBS[i, ]
1438618977546:print(COMB)
1438618977775:G1 <- groups[[COMB[1]]]
1438618979242:G2 <- groups[[COMB[2]]]
1438618979511:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438618979692:#flush.console()
1438618979843:cor.mat <- cor(x[, G1], x[, G2])
1438618982710:View(cor.mat)
1438618995960:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], COMB[2], ".csv"))
1438619045780:csv.mat <- read.csv(cor_mat_14)
1438619052610:csv.mat <- read.csv("cor_mat_14.csv")
1438619066604:View(csv.mat)
1438619255872:for(chunk in list.files(paste0(fp, "/correlation_matrix"))) {
1438619255872:print(chunk)
1438619255873:}
1438619264485:fp <- file.path(getwd())
1438619272716:for(chunk in list.files(paste0(fp, "/correlation_matrix"))) {
1438619272717:print(chunk)
1438619272717:}
1438619284442:for(chunk in list.files(paste0(fp, "/correlation_matrix"))) {
1438619284442:print(chunk)
1438619284442:}
1438619300905:list.files(paste0(fp, "/correlation_matrix"))
1438619319855:list.files(path=paste0(fp, "/correlation_matrix"))
1438619327130:list.files()
1438619343088:list.files("/correlation_matrix"))
1438619346664:list.files("/correlation_matrix")
1438619360417:dir.create("correlation_matrix")
1438619372562:setwd(paste0(fp, "/correlation_matrix"))
1438619379421:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "_", COMB[2], ".csv"))
1438619388213:setwd(fp)
1438619395780:list.files("/correlation_matrix")
1438619400505:list.files("/correlation_matrix")
1438619402505:list.files(path=paste0(fp, "/correlation_matrix"))
1438619407754:for(chunk in list.files(paste0(fp, "/correlation_matrix"))) {
1438619407755:print(chunk)
1438619407755:}
1438620012076:tx <- matrix(size, size)
1438620022786:for(file in list.files(paste0(fp, "/correlation_matrix"))) {
1438620023005:print(paste("Processing", file))
1438620023205:chunk <- read.csv(file)
1438620026938:}
1438620098767:setwd(paste0(fp, "/correlation_matrix"))
1438620100283:for(file in list.files()) {
1438620100458:print(paste("Processing", file))
1438620100629:chunk <- read.csv(file)
1438620102988:size <- nrow(chunk)
1438620105257:}
1438620140380:for(i in size) { print(i)}
1438620154907:tx <- matrix(size, size)
1438620155739:for(n in (1:size)) {
1438620155931:tx[,n] <- colnames(chunk)[n]
1438620156080:}
1438620196105:View(chunk)
1438620272469:rownames(chunk) <- chunk[,1]
1438620272690:chunk <- chunk[,-1]
1438620274455:View(chunk)
1438620359077:i <- 1:nrow(chunk)
1438620360384:res.pos <- lapply(i, function(i) {
1438620360539:row <- rbind(colnames(chunk)[-i], chunk[i,-i])
1438620360683:row[2,] <- as.numeric(row[2,])
1438620360845:row <- row[,order(as.numeric(row[2,]), decreasing=T, na.last=T)]
1438620360986:row <- array(row, dim=c(2, size-1))
1438620361140:})
1438620986240:i <- 1:size
1438620986241:res.pos2 <- lapply(i, function(i) {
1438620986241:row <- chunk[i,-i]
1438620986241:row <- as.numeric(row)
1438620986242:row <- order(as.numeric(row), decreasing=T, na.last=T)
1438620986242:})
1438621095984:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438621096375:rownames(cnt.mat) <- cnt.mat[,1]
1438621096379:cnt.mat <- t(cnt.mat[,-1])
1438621097161:cnt.mat2 <- cnt.mat[,1:30000]
1438622175543:for(file in list.files()) {
1438622175699:print(paste("Processing", file))
1438622175840:chunk <- read.csv(file)
1438622178493:}
1438622205181:c
1438622207273:for(file in list.files()) {
1438622207438:print(paste("Processing", file))
1438622207583:chunk <- read.csv(file)
1438622212320:}
1438622232569:setwd(paste0(fp, "/correlation_matrix"))
1438622238250:fp <- file.path(getwd())
1438622239148:library(doParallel)
1438622239298:registerDoParallel(cores = 11)
1438622251713:for(file in list.files()) {
1438622251822:print(paste("Processing", file))
1438622251940:chunk <- read.csv(file)
1438622257120:size <- nrow(chunk)
1438622260463:}
1438622276990:setwd(paste0(fp, "/correlation_matrix"))
1438622278454:for(file in list.files()) {
1438622278604:print(paste("Processing", file))
1438622278748:chunk <- read.csv(file)
1438622292796:}
1438622307900:rownames(chunk) <- chunk[,1]
1438622308050:chunk <- chunk[,-1]
1438622308189:size <- nrow(chunk)
1438622314513:i <- 1:size
1438622314514:res.pos2 <- lapply(i, function(i) {
1438622314514:row <- chunk[i,-i]
1438622314514:row <- as.numeric(row)
1438622314514:row <- order(as.numeric(row), decreasing=T, na.last=T)
1438622314515:})
1438625970107:res.pos2[1]
1438625976305:View(res.pos2[1])
1438625997685:chunk[i]
1438626011655:i=2
1438626012780:chunk[i]
1438626189541:row <- chunk[i,-i]
1438626196236:View(row)
1438626200948:row <- as.numeric(row)
1438626221255:View(row)
1438626227165:row <- chunk[i,-i]
1438626229587:row <- order(as.numeric(row), decreasing=T, na.last=T)
1438626236614:row <- chunk[i,-i]
1438626252854:sort(row)
1438626271080:?sort
1438626282037:row <- sort(row, decreasing=T, na.last=T)
1438626283629:View(row)
1438626302817:i <- 1:size
1438626302818:res.pos2 <- lapply(i, function(i) {
1438626302818:row <- chunk[i,-i]
1438626302818:row <- sort(row, decreasing=T, na.last=T)
1438626302818:})
1438626547316:View(res.pos2[1])
1438626872189:?list.files
1438627346730:setwd(fp)
1438627354357:cor.par <- function(x, nthreads="all") {
1438627354357:dir.create("correlation_matrix")
1438627354358:setwd(paste0(fp, "/correlation_matrix"))
1438627354358:require(doParallel) # doMC ?
1438627354358:#require(ff)
1438627354358:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438627354359:nthreads <- detectCores() #make it a global var? or just register in beginning
1438627354359:}
1438627354359:registerDoParallel(cores = nthreads)
1438627354359:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438627354360:mem.est <- mem.avail / detectCores()
1438627354360:# prepare names
1438627354360:cols <- colnames(x)
1438627354361:# determine the largest chunk size (matrix / vector) for one thread
1438627354361:# for now assume:
1438627354361:max.size = 40000*12 / 12 #col / nthreads
1438627354361:max.ncol = floor(max.size / nrow(x))
1438627354362:ncolx <- as.numeric(ncol(x))
1438627354362:nchunks <- ceiling(ncolx / max.ncol)
1438627354362:# extend the matrix so it is divided into even chunks
1438627354363:add <- ncolx %% nchunks
1438627354363:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438627354363:ncolx <- ncol(x)
1438627354364:## split column numbers into 'nblocks' groups
1438627354364:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438627354365:## create all unique combinations of blocks
1438627354365:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438627354365:COMBS <- t(apply(COMBS, 1, sort))
1438627354366:COMBS <- unique(COMBS)
1438627354366:#cor.mat <- matrix(NA, ncolx, ncolx)
1438627354367:foreach(i = 1:nrow(COMBS)) %dopar% {
1438627354367:COMB <- COMBS[i, ]
1438627354368:print(COMB)
1438627354368:G1 <- groups[[COMB[1]]]
1438627354368:G2 <- groups[[COMB[2]]]
1438627354369:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438627354369:#flush.console()
1438627354369:cor.mat <- cor(x[, G1], x[, G2])
1438627354370:#print(head(cor.mat))
1438627354370:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "_", COMB[2], ".csv"))
1438627354370:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438627354371:#corMAT[G1, G2] <- COR
1438627354371:#corMAT[G2, G1] <- t(COR)
1438627354372:#cor.mat <- NULL
1438627354372:#return(cor.mat)
1438627354372:rm(cor.mat)
1438627354373:print(paste("done", COMB[1], COMB[2]))
1438627354373:gc(verbose=F)
1438627354373:}
1438627354374:setwd(fp)
1438627354374:#rm(COMBS, )
1438627354375:#gc()
1438627354375:#return(cor.mat)
1438627354376:# ffsave(cor.mat, file="cor_mat")
1438627354376:# ffload(file="cor_mat", overwrite=T)
1438627354377:}
1438627376780:cor.par(cnt.mat2)
1438627505916:setwd(paste0(fp, /correlation_matrix))
1438627511740:setwd(paste0(fp, "/correlation_matrix"))
1438627519619:list.files()
1438627565905:list.files(pattern="_1_")
1438628254609:write.csv(matrix(NA, nrow=max.ncol, ncol=ncolx), file=paste0("cor_mat_", i))
1438628584016:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438628593967:max.ncol=3000
1438628595355:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438628597730:View(hor_chunk)
1438628620311:View(cbind(hor_chunk, chunk))
1438628814343:setwd(fp)
1438628945740:for(i in (1:nchunks)) {
1438628945740:# prepare nchunks files
1438628945740:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438628945740:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438628945740:#read in matrices
1438628945741:chunk <- read.csv(file)
1438628945741:cbind(hor_chunk, chunk)
1438628945741:}
1438628945741:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438628945742:}
1438628953655:nchunks=10
1438628961909:for(i in (1:nchunks)) {
1438628961909:# prepare nchunks files
1438628961909:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438628961909:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438628961910:#read in matrices
1438628961910:chunk <- read.csv(file)
1438628961910:cbind(hor_chunk, chunk)
1438628961910:}
1438628961911:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438628961911:}
1438628967330:View(hor_chunk)
1438629009938:cor_par(cnt.mat2)
1438629025581:cor.par <- function(x, nthreads="all") {
1438629025581:dir.create("correlation_matrix")
1438629025581:setwd(paste0(fp, "/correlation_matrix"))
1438629025581:require(doParallel) # doMC ?
1438629025582:#require(ff)
1438629025582:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438629025582:nthreads <- detectCores() #make it a global var? or just register in beginning
1438629025582:}
1438629025583:registerDoParallel(cores = nthreads)
1438629025583:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438629025583:mem.est <- mem.avail / detectCores()
1438629025583:# prepare names
1438629025584:cols <- colnames(x)
1438629025584:# determine the largest chunk size (matrix / vector) for one thread
1438629025584:# for now assume:
1438629025585:max.size = 40000*12 / 12 #col / nthreads
1438629025585:max.ncol = floor(max.size / nrow(x))
1438629025585:ncolx <- as.numeric(ncol(x))
1438629025585:nchunks <- ceiling(ncolx / max.ncol)
1438629025586:nchunks = nchunks^2
1438629025586:# extend the matrix so it is divided into even chunks
1438629025586:add <- ncolx %% nchunks
1438629025587:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438629025587:ncolx <- ncol(x)
1438629025587:## split column numbers into 'nblocks' groups
1438629025588:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438629025588:## create all unique combinations of blocks
1438629025589:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438629025589:COMBS <- t(apply(COMBS, 1, sort))
1438629025589:COMBS <- unique(COMBS)
1438629025590:#cor.mat <- matrix(NA, ncolx, ncolx)
1438629025591:foreach(i = 1:nrow(COMBS)) %dopar% {
1438629025591:COMB <- COMBS[i, ]
1438629025591:print(COMB)
1438629025592:G1 <- groups[[COMB[1]]]
1438629025592:G2 <- groups[[COMB[2]]]
1438629025592:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438629025593:#flush.console()
1438629025593:cor.mat <- cor(x[, G1], x[, G2])
1438629025593:#print(head(cor.mat))
1438629025594:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "_", COMB[2], ".csv"))
1438629025594:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438629025595:#corMAT[G1, G2] <- COR
1438629025595:#corMAT[G2, G1] <- t(COR)
1438629025595:#cor.mat <- NULL
1438629025596:#return(cor.mat)
1438629025596:rm(cor.mat)
1438629025596:print(paste("done", COMB[1], COMB[2]))
1438629025597:gc(verbose=F)
1438629025597:}
1438629025598:rm(x)
1438629025599:#parallelise
1438629025599:for(i in (1:nchunks)) {
1438629025599:# prepare nchunks files
1438629025600:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438629025600:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438629025601:#read in matrices
1438629025601:chunk <- read.csv(file)
1438629025602:cbind(hor_chunk, chunk)
1438629025602:}
1438629025603:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438629025604:}
1438629025604:setwd(fp)
1438629025605:}
1438629032213:cor.par(cnt.mat2)
1438630152772:hor.ncol <- ncolx/nchunks
1438630163640:x <_ cnt.mat2
1438630167092:x <- cnt.mat2
1438630168827:hor.ncol <- ncolx/nchunks
1438630175978:ncolx <- ncol(x)
1438630177210:hor.ncol <- ncolx/nchunks
1438630200073:nchunks <- 100
1438630201474:hor.ncol <- ncolx/nchunks
1438630227429:#parallelise
1438630227429:for(i in (1:nchunks)) {
1438630227430:# prepare nchunks files
1438630227430:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438630227430:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438630227430:#read in matrices
1438630227431:chunk <- read.csv(file)
1438630227431:cbind(hor_chunk, chunk)
1438630227431:}
1438630227431:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438630227432:}
1438633283170:A <- read.csv(cor_mat_1.csv)
1438633290175:A <- read.csv("cor_mat_1.csv")
1438633301662:A <- read.table("cor_mat_1.csv")
1438633304053:View(A)
1438633343505:i=1
1438633347056:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438633402859:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438633404268:#read in matrices
1438633404481:chunk <- read.csv(file)
1438633404691:cbind(hor_chunk, chunk)
1438633404934:}
1438633484402:View(hor_chunk)
1438633521711:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438633532348:chunk <- read.csv(file)
1438633540749:View(chunk)
1438633628333:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438633636874:chunk <- read.csv(file)[,-1]
1438633641117:cbind(hor_chunk, chunk)
1438633651710:hor_chunk <- cbind(hor_chunk, chunk)
1438633664558:# prepare nchunks files
1438633664558:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438633664559:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438633664559:#read in matrices
1438633664559:chunk <- read.csv(file)[,-1]
1438633664559:hor_chunk <- cbind(hor_chunk, chunk)
1438633664559:}
1438633682467:View(hor_chunk)
1438633724145:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438633727560:chunk <- read.csv(file)[,-1]
1438633728093:hor_chunk <- cbind(hor_chunk, chunk)
1438633730018:View(hor_chunk)
1438633770614:?read.csv
1438633855861:?read.table
1438633875465:chunk <- read.csv(file, row.names=T)
1438634042468:chunk <- read.csv(file, row.names=1)
1438634045180:View(hor_chunk)
1438634065904:View(chunk)
1438634085604:for(i in (1:nchunks)) {
1438634085605:# prepare nchunks files
1438634085605:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438634085605:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438634085605:#read in matrices
1438634085605:chunk <- read.csv(file, row.names=1)
1438634085606:hor_chunk <- cbind(hor_chunk, chunk)
1438634085606:}
1438634115841:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438634115842:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438634115842:#read in matrices
1438634115842:chunk <- read.csv(file, row.names=1)
1438634115842:hor_chunk <- cbind(hor_chunk, chunk)
1438634115843:}
1438634123055:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438634191036:cnt.mat <- read.csv("count_matrix.csv", header=T)
1438634191423:rownames(cnt.mat) <- cnt.mat[,1]
1438634201372:cnt.mat <- read.csv("count_matrix.csv", header=T, row.names=1)
1438634204219:cnt.mat <- t(cnt.mat[,-1])
1438634210277:cnt.mat <- t(cnt.mat)
1438634212908:cnt.mat <- read.csv("count_matrix.csv", header=T, row.names=1)
1438634213921:cnt.mat <- t(cnt.mat)
1438634215538:cnt.mat2 <- cnt.mat[,1:30000]
1438634269719:require(doParallel) # doMC ?
1438634277445:nthreads <- detectCores() #make it a global var? or just register in beginning
1438634278419:registerDoParallel(cores = nthreads)
1438634281539:max.size = 40000*12 / 12 #col / nthreads
1438634281690:max.ncol = floor(max.size / nrow(x))
1438634281866:ncolx <- as.numeric(ncol(x))
1438634282003:nchunks <- ceiling(ncolx / max.ncol)
1438634282146:hor.ncol <- ncolx/nchunks
1438634282282:nchunks = nchunks^2
1438634287117:# extend the matrix so it is divided into even chunks
1438634287267:add <- ncolx %% nchunks
1438634287433:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438634287993:ncolx <- ncol(x)
1438634295609:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438634306466:x <-cnt.mat2
1438634310434:max.size = 40000*12 / 12 #col / nthreads
1438634310551:max.ncol = floor(max.size / nrow(x))
1438634310711:ncolx <- as.numeric(ncol(x))
1438634310863:nchunks <- ceiling(ncolx / max.ncol)
1438634311064:hor.ncol <- ncolx/nchunks
1438634311383:nchunks = nchunks^2
1438634312002:# extend the matrix so it is divided into even chunks
1438634312152:add <- ncolx %% nchunks
1438634312290:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438634312434:ncolx <- ncol(x)
1438634344001:hor_chunk <- matrix(NA, nrow=max.ncol, ncol=0)
1438634373595:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438634386486:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438634387211:#read in matrices
1438634387491:chunk <- read.csv(file, row.names=1)
1438634387916:hor_chunk <- cbind(hor_chunk, chunk)
1438634388250:}
1438634393729:i=1
1438634410700:chunk <- read.csv(file, row.names=1)
1438634414205:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438634414477:#read in matrices
1438634414666:chunk <- read.csv(file, row.names=1)
1438634414821:hor_chunk <- cbind(hor_chunk, chunk)
1438634415001:}
1438634419866:}
1438634425295:View(hor_chunk)
1438634459451:file="cor_mat_1.csv"
1438634476173:setwd("/mnt/DATAPART1/rnaseq/correlation_matrix")
1438634482491:chunk <- read.csv(file, row.names=1)
1438634525772:file="cor_mat_1_9.csv"
1438634529016:chunk <- read.csv(file, row.names=1)
1438634532255:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438634533655:hor_chunk <- cbind(hor_chunk, chunk)
1438634544320:View(hor_chunk)
1438634559572:file="cor_mat_1_3.csv"
1438634562924:chunk <- read.csv(file, row.names=1)
1438634565760:hor_chunk <- cbind(hor_chunk, chunk)
1438634569685:View(hor_chunk)
1438634994226:names <- colnames(x)
1438635067777:hor_chunk <- NULL # matrix(NA, nrow=hor.ncol, ncol=0, row.names=)
1438635070905:hor_chunk <- cbind(hor_chunk, chunk)
1438635127795:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0, row.names=)
1438635134072:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438635135375:chunk <- read.csv(file)[,-1]
1438635156095:hor_chunk <- cbind(chunk, hor_chunk)
1438635159605:View(hor_chunk)
1438635302233:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438635303191:chunk <- read.csv(file, row.names=1)
1438635303465:names <- row.names(chunk)
1438635304593:hor_chunk <- cbind(hor_chunk,chunk)
1438635308549:row.names(hor_chunk) <- names
1438635391052:nrow(hor_chunk)
1438635409834:View(hor_chunk)
1438635419663:dim(hor_chukn)
1438635422924:dim(hor_chunk)
1438635457448:hor.ncol <- ncolx/nchunks
1438635489926:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438635493617:chunk <- read.csv(file, row.names=1)
1438635494767:names <- row.names(chunk)
1438635495095:hor_chunk <- cbind(hor_chunk,chunk)
1438635495895:}
1438635498716:row.names(hor_chunk) <- names
1438635500749:View(hor_chunk)
1438635904952:for(i in 1:nchunks) {
1438635904953:# prepare nchunks files
1438635904953:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438635904953:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438635904953:#read in matrices
1438635904954:chunk <- read.csv(file, row.names=1)
1438635904954:names <- row.names(chunk) #waste
1438635904954:hor_chunk <- cbind(hor_chunk, chunk)
1438635904954:}
1438635904955:row.names(hor_chunk) <- names
1438635904955:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438635904955:}
1438636141860:View(hor_chunk)
1438636174140:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438636174140:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438636174141:#read in matrices
1438636174141:chunk <- read.csv(file, row.names=1)
1438636174141:names <- row.names(chunk) #waste
1438636174141:hor_chunk <- cbind(hor_chunk, chunk)
1438636174141:}
1438636174143:row.names(hor_chunk) <- names
1438636188030:chunk <- read.csv(file, row.names=1)
1438636200972:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438636207135:print(i)
1438636208051:}
1438636213691:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438636217963:print(file)
1438636219366:}
1438636231357:setwd("/mnt/DATAPART1/rnaseq/correlation_matrix")
1438636239369:for(file in list.files(pattern=paste0("_", i, "_"))) {
1438636241515:print(file)
1438636243579:}
1438636731319:i =7
1438636734052:for(file in list.files(pattern=paste0("_", i, "_"))) { #(i, "a")
1438636734052:#read in matrices
1438636734053:chunk <- read.csv(file, row.names=1)
1438636734053:names <- row.names(chunk) #waste
1438636734053:hor_chunk <- cbind(hor_chunk, chunk)
1438636734053:}
1438636743927:View(hor_chunk)
1438637174349:fp <- file.path(getwd())
1438637176455:library(doParallel)
1438637176724:registerDoParallel(cores = 11)
1438637192018:cor.par <- function(x, nthreads="all") {
1438637192018:dir.create("correlation_matrix")
1438637192019:setwd(paste0(fp, "/correlation_matrix"))
1438637192019:require(doParallel) # doMC ?
1438637192019:#require(ff)
1438637192019:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438637192020:nthreads <- detectCores() #make it a global var? or just register in beginning
1438637192020:}
1438637192020:registerDoParallel(cores = nthreads)
1438637192020:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438637192021:mem.est <- mem.avail / detectCores()
1438637192021:# prepare names
1438637192021:names <- colnames(x)
1438637192022:# determine the largest chunk size (matrix / vector) for one thread
1438637192022:# for now assume:
1438637192022:max.size = 40000*12 / 12 #col / nthreads
1438637192022:max.ncol = floor(max.size / nrow(x))
1438637192023:ncolx <- as.numeric(ncol(x))
1438637192023:nchunks <- ceiling(ncolx / max.ncol)
1438637192023:nchunks = nchunks^2
1438637192024:hor.ncol <- ncolx/nchunks
1438637192024:# extend the matrix so it is divided into even chunks
1438637192024:add <- ncolx %% nchunks
1438637192025:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438637192025:ncolx <- ncol(x)
1438637192026:## split column numbers into 'nblocks' groups
1438637192026:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438637192027:## create all unique combinations of blocks
1438637192027:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438637192027:COMBS <- t(apply(COMBS, 1, sort))
1438637192028:COMBS <- unique(COMBS)
1438637192028:#cor.mat <- matrix(NA, ncolx, ncolx)
1438637192029:foreach(i = 1:nrow(COMBS)) %dopar% {
1438637192030:COMB <- COMBS[i, ]
1438637192030:print(COMB)
1438637192031:G1 <- groups[[COMB[1]]]
1438637192031:G2 <- groups[[COMB[2]]]
1438637192031:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438637192032:#flush.console()
1438637192032:cor.mat <- cor(x[, G1], x[, G2])
1438637192033:#print(head(cor.mat))
1438637192033:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv"))
1438637192033:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438637192034:#corMAT[G1, G2] <- COR
1438637192034:#corMAT[G2, G1] <- t(COR)
1438637192034:#cor.mat <- NULL
1438637192035:#return(cor.mat)
1438637192035:rm(cor.mat)
1438637192036:print(paste("done", COMB[1], COMB[2]))
1438637192036:gc(verbose=F)
1438637192036:}
1438637192037:}
1438637215282:cor.par(x)
1438637707212:cor.par <- function(x, nthreads="all") {
1438637707212:dir.create("correlation_matrix")
1438637707213:setwd(paste0(fp, "/correlation_matrix"))
1438637707213:require(doParallel) # doMC ?
1438637707213:#require(ff)
1438637707214:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438637707214:nthreads <- detectCores() #make it a global var? or just register in beginning
1438637707214:}
1438637707214:registerDoParallel(cores = nthreads)
1438637707214:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438637707215:mem.est <- mem.avail / detectCores()
1438637707215:# prepare names
1438637707215:#names <- colnames(x)
1438637707216:# determine the largest chunk size (matrix / vector) for one thread
1438637707216:# for now assume:
1438637707216:max.size = 40000*12 / 12 #col / nthreads
1438637707217:max.ncol = floor(max.size / nrow(x))
1438637707217:ncolx <- as.numeric(ncol(x))
1438637707217:nchunks <- ceiling(ncolx / max.ncol)
1438637707217:nchunks = nchunks^2
1438637707218:hor.ncol <- ncolx/nchunks
1438637707218:# extend the matrix so it is divided into even chunks
1438637707218:add <- ncolx %% nchunks
1438637707219:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438637707219:ncolx <- ncol(x)
1438637707219:## split column numbers into 'nblocks' groups
1438637707220:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438637707220:## create all unique combinations of blocks
1438637707221:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438637707221:COMBS <- t(apply(COMBS, 1, sort))
1438637707221:COMBS <- unique(COMBS)
1438637707222:#cor.mat <- matrix(NA, ncolx, ncolx)
1438637707223:foreach(i = 1:nrow(COMBS)) %dopar% {
1438637707223:COMB <- COMBS[i, ]
1438637707223:print(COMB)
1438637707224:G1 <- groups[[COMB[1]]]
1438637707224:G2 <- groups[[COMB[2]]]
1438637707224:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438637707225:#flush.console()
1438637707225:cor.mat <- cor(x[, G1], x[, G2])
1438637707225:#print(head(cor.mat))
1438637707226:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv"))
1438637707226:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438637707227:#corMAT[G1, G2] <- COR
1438637707227:#corMAT[G2, G1] <- t(COR)
1438637707227:#cor.mat <- NULL
1438637707228:#return(cor.mat)
1438637707228:rm(cor.mat)
1438637707228:print(paste("done", COMB[1], COMB[2]))
1438637707229:gc(verbose=F)
1438637707229:}
1438637712505:}
1438637731679:cor.par(cnt.mat2)
1438637874093:dir.create("correlation_matrix")
1438637890721:setwd("/mnt/DATAPART1/rnaseq")
1438637896337:cor.par(cnt.mat2)
1438638558591:max.size = 40000*12 / 12 #col / nthreads
1438638558981:max.ncol = floor(max.size / nrow(x))
1438638559331:ncolx <- as.numeric(ncol(x))
1438638560041:nchunks <- ceiling(ncolx / max.ncol)
1438638560283:nchunks = nchunks^2
1438638561042:hor.ncol <- ncolx/nchunks
1438638807718:add <- ncolx %% nchunks
1438638865681:max.size = 40000*12 / 12 #col / nthreads
1438638866061:max.ncol = floor(max.size / nrow(x))
1438638866355:ncolx <- ncol(x)
1438638866939:nchunks <- ceiling(ncolx / max.ncol)
1438638867083:nchunks = nchunks^2
1438638867245:hor.ncol <- ncolx/nchunks
1438638892591:cor.par <- function(x, nthreads="all") {
1438638892592:dir.create("correlation_matrix")
1438638892592:setwd(paste0(fp, "/correlation_matrix"))
1438638892592:require(doParallel) # doMC ?
1438638892592:#require(ff)
1438638892593:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438638892593:nthreads <- detectCores() #make it a global var? or just register in beginning
1438638892593:}
1438638892593:registerDoParallel(cores = nthreads)
1438638892593:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438638892594:mem.est <- mem.avail / detectCores()
1438638892594:# prepare names
1438638892594:#names <- colnames(x)
1438638892595:# determine the largest chunk size (matrix / vector) for one thread
1438638892595:# for now assume:
1438638892595:max.size = 40000*12 / 12 #col / nthreads
1438638892596:max.ncol = floor(max.size / nrow(x))
1438638892596:ncolx <- ncol(x)
1438638892596:nchunks <- ceiling(ncolx / max.ncol)
1438638892596:nchunks = nchunks^2
1438638892597:hor.ncol <- ncolx/nchunks
1438638892597:# extend the matrix so it is divided into even chunks
1438638892597:add <- ncolx %% nchunks
1438638892598:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438638892598:## split column numbers into 'nblocks' groups
1438638892598:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438638892599:## create all unique combinations of blocks
1438638892599:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438638892600:COMBS <- t(apply(COMBS, 1, sort))
1438638892600:COMBS <- unique(COMBS)
1438638892601:#cor.mat <- matrix(NA, ncolx, ncolx)
1438638892601:foreach(i = 1:nrow(COMBS)) %dopar% {
1438638892602:COMB <- COMBS[i, ]
1438638892602:print(COMB)
1438638892602:G1 <- groups[[COMB[1]]]
1438638892603:G2 <- groups[[COMB[2]]]
1438638892603:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438638892603:#flush.console()
1438638892604:cor.mat <- cor(x[, G1], x[, G2])
1438638892604:#print(head(cor.mat))
1438638892605:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv"))
1438638892605:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438638892605:#corMAT[G1, G2] <- COR
1438638892606:#corMAT[G2, G1] <- t(COR)
1438638892606:#cor.mat <- NULL
1438638892606:#return(cor.mat)
1438638892607:rm(cor.mat)
1438638892607:print(paste("done", COMB[1], COMB[2]))
1438638892608:gc(verbose=F)
1438638892608:}
1438638892608:#}
1438638918380:}
1438638942466:ncolx <- ncol(x)
1438638943805:## split column numbers into 'nblocks' groups
1438638944013:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438638945506:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438638945706:COMBS <- t(apply(COMBS, 1, sort))
1438638946778:COMBS <- unique(COMBS)
1438638946873:#cor.mat <- matrix(NA, ncolx, ncolx)
1438638946921:foreach(i = 1:nrow(COMBS)) %dopar% {
1438638947110:COMB <- COMBS[i, ]
1438638947754:print(COMB)
1438638947915:G1 <- groups[[COMB[1]]]
1438638948099:G2 <- groups[[COMB[2]]]
1438638948253:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438638948401:#flush.console()
1438638948702:cor.mat <- cor(x[, G1], x[, G2])
1438638948845:#print(head(cor.mat))
1438638949206:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv"))
1438638949350:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438638949967:#corMAT[G1, G2] <- COR
1438638950307:#corMAT[G2, G1] <- t(COR)
1438638950589:#cor.mat <- NULL
1438638950835:#return(cor.mat)
1438638951220:rm(cor.mat)
1438638951651:print(paste("done", COMB[1], COMB[2]))
1438638952362:gc(verbose=F)
1438638953306:}
1438639034011:}
1438639383660:file=paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv")
1438639390160:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438639390340:COMBS <- t(apply(COMBS, 1, sort))
1438639391286:COMBS <- unique(COMBS)
1438639393667:COMB <- COMBS[i, ]
1438639403175:paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv")
1438639494002:cor.par <- function(x, nthreads="all") {
1438639494002:dir.create("correlation_matrix")
1438639494002:setwd(paste0(fp, "/correlation_matrix"))
1438639494002:require(doParallel) # doMC ?
1438639494003:#require(ff)
1438639494003:if(nthreads=="all") { #also check if nthreads is a proper value, i.e. integer, ...
1438639494003:nthreads <- detectCores() #make it a global var? or just register in beginning
1438639494003:}
1438639494004:registerDoParallel(cores = nthreads)
1438639494004:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1438639494004:mem.est <- mem.avail / detectCores()
1438639494004:# prepare names
1438639494005:#names <- colnames(x)
1438639494005:# determine the largest chunk size (matrix / vector) for one thread
1438639494005:# for now assume:
1438639494006:max.size = 40000*12 / 12 #col / nthreads
1438639494006:max.ncol = floor(max.size / nrow(x))
1438639494006:ncolx <- ncol(x)
1438639494006:nchunks <- ceiling(ncolx / max.ncol)
1438639494007:nchunks = nchunks^2
1438639494007:hor.ncol <- ncolx/nchunks
1438639494007:# extend the matrix so it is divided into even chunks
1438639494008:add <- ncolx %% nchunks
1438639494008:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438639494008:ncolx <- ncol(x)
1438639494009:## split column numbers into 'nblocks' groups
1438639494009:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438639494010:## create all unique combinations of blocks
1438639494010:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438639494010:COMBS <- t(apply(COMBS, 1, sort))
1438639494011:COMBS <- unique(COMBS)
1438639494011:#cor.mat <- matrix(NA, ncolx, ncolx)
1438639494012:foreach(i = 1:nrow(COMBS)) %dopar% {
1438639494012:COMB <- COMBS[i, ]
1438639494013:print(COMB)
1438639494013:G1 <- groups[[COMB[1]]]
1438639494013:G2 <- groups[[COMB[2]]]
1438639494014:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438639494014:#flush.console()
1438639494014:cor.mat <- cor(x[, G1], x[, G2])
1438639494015:#print(head(cor.mat))
1438639494015:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv"))
1438639494016:#ffsave(cor.mat, file=paste("cor_mat_", COMB[1], COMB[2], sep=""))
1438639494016:#corMAT[G1, G2] <- COR
1438639494016:#corMAT[G2, G1] <- t(COR)
1438639494017:#cor.mat <- NULL
1438639494017:#return(cor.mat)
1438639494017:rm(cor.mat)
1438639494018:print(paste("done", COMB[1], COMB[2]))
1438639494018:gc(verbose=F)
1438639494019:}
1438639498232:}
1438639516255:cor.par(cnt.mat2)
1438639635643:add <- ncolx %% nchunks
1438639635797:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1438639635963:ncolx <- ncol(x)
1438639636655:## split column numbers into 'nblocks' groups
1438639636809:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1438639636958:## create all unique combinations of blocks
1438639637116:COMBS <- expand.grid(1:length(groups), 1:length(groups))
1438639637266:COMBS <- t(apply(COMBS, 1, sort))
1438639638259:COMBS <- unique(COMBS)
1438639638328:#cor.mat <- matrix(NA, ncolx, ncolx)
1438639638850:COMB <- COMBS[i, ]
1438639639483:print(COMB)
1438639640171:G1 <- groups[[COMB[1]]]
1438639640793:G2 <- groups[[COMB[2]]]
1438639641330:# if (verbose) cat("Block", COMB[1], "with block", COMB[2], "\n")
1438639641825:#flush.console()
1438639642115:cor.mat <- cor(x[, G1], x[, G2])
1438639653641:#print(head(cor.mat))
1438639655409:write.csv(cor.mat, file=paste0("cor_mat_", COMB[1], "r", COMB[2], "c", ".csv"))
1438639730440:fp <- file.path(getwd())
1438639745857:fp <- file.path(getwd())
1438639762031:setwd("/mnt/DATAPART1/rnaseq")
1438639768106:fp <- file.path(getwd())
1438639782888:cor.par(cnt.mat2)
1438640005139:for(i in 1:nchunks) {
1438640005139:# prepare nchunks files
1438640005139:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438640005139:for(file in list.files(pattern=paste0("_", i, "_"))) { #(i, "r")
1438640005140:chunk <- read.csv(file, row.names=1)
1438640005140:names <- row.names(chunk) #waste
1438640005140:hor_chunk <- cbind(hor_chunk, chunk)
1438640005140:}
1438640005141:for(file in list.files(pattern=paste0(i, "c"))) {
1438640005141:chunk <- t(read.csv(file, row.names=1))
1438640005141:names <- row.names(chunk) #waste
1438640005141:hor_chunk <- cbind(hor_chunk, chunk)
1438640005142:}
1438640005142:row.names(hor_chunk) <- names
1438640005142:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438640005143:}
1438640038312:for(i in 1:nchunks) {
1438640038312:# prepare nchunks files
1438640038312:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438640038312:for(file in list.files(pattern=paste0(i, "r"))) { #(i, "r")
1438640038313:chunk <- read.csv(file, row.names=1)
1438640038313:names <- row.names(chunk) #waste
1438640038313:hor_chunk <- cbind(hor_chunk, chunk)
1438640038313:}
1438640038314:for(file in list.files(pattern=paste0(i, "c"))) {
1438640038314:chunk <- t(read.csv(file, row.names=1))
1438640038314:names <- row.names(chunk) #waste
1438640038314:hor_chunk <- cbind(hor_chunk, chunk)
1438640038315:}
1438640038315:row.names(hor_chunk) <- names
1438640038315:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438640038316:}
1438702386209:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438702386210:for(file in list.files(pattern=paste0(i, "r"))) {
1438702386211:chunk <- read.csv(file, row.names=1)
1438702386211:names <- row.names(chunk) #waste
1438702386211:hor_chunk <- cbind(hor_chunk, chunk)
1438702386211:}
1438702386212:for(file in list.files(pattern=paste0(i, "c"))) {
1438702386212:chunk <- t(read.csv(file, row.names=1))
1438702386212:names <- row.names(chunk) #waste
1438702386213:hor_chunk <- cbind(hor_chunk, chunk)
1438702386213:}
1438702386214:row.names(hor_chunk) <- names
1438702386214:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438702386219:}
1438702394753:for(file in list.files(pattern=paste0(i, "r"))) {
1438702394754:chunk <- read.csv(file, row.names=1)
1438702394754:names <- row.names(chunk) #waste
1438702394754:hor_chunk <- cbind(hor_chunk, chunk)
1438702394754:}
1438702394755:for(file in list.files(pattern=paste0(i, "c"))) {
1438702394756:chunk <- t(read.csv(file, row.names=1))
1438702394756:names <- row.names(chunk) #waste
1438702394756:hor_chunk <- cbind(hor_chunk, chunk)
1438702394756:}
1438702394757:row.names(hor_chunk) <- names
1438702394757:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438702539736:from.csv <- read.csv(paste0(fp, "correlation_matrix/cor_mat_1.csv")
1438702542234:)
1438702550168:from.csv <- read.csv(paste0(fp, "/correlation_matrix/cor_mat_1.csv"))
1438702768459:setwd(paste0(fp, "/correlation_matrix"))
1438702801838:from_csv <- read.table("cor_mat.csv", header=T, sep=",")
1438702806435:from_csv <- read.table("cor_mat_1.csv", header=T, sep=",")
1438703180690:setwd("~/corelation_matrix")
1438703786920:setwd(paste0(fp, "/corelation_matrix")
1438703788751:)
1438703794695:setwd("~/correlation_matrix")
1438703801318:setwd(paste0(fp, "/correlation_matrix")
1438703803118:)
1438703837779:read.csv(cor_mat_1r1c.csv)
1438703842094:read.csv("cor_mat_1r1c.csv")
1438703890417:i=7
1438703896032:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438703896033:for(file in list.files(pattern=paste0(i, "r"))) {
1438703896033:chunk <- read.csv(file, row.names=1)
1438703896033:names <- row.names(chunk) #waste
1438703896034:hor_chunk <- cbind(hor_chunk, chunk)
1438703896034:}
1438703943593:row.names(hor_chunk) <- names
1438703946201:View(hor_chunk)
1438704011522:list.files(pattern=paste0(i, "r"))
1438704043403:list.files(pattern=paste0("_", i, "r"))
1438704056482:length(list.files(pattern=paste0("_", i, "r")))
1438704088844:dim(read.csv("cor_mat_7r2c.csv"))
1438704096289:dim(read.csv("cor_mat_7r9c.csv"))
1438704111874:dim(read.csv("cor_mat_7r9c.csv", row.names=1))
1438704139458:for(file in list.files(pattern=paste0("_", i, "r"))) {
1438704139459:chunk <- read.csv(file, row.names=1)
1438704139459:names <- row.names(chunk) #waste
1438704139459:hor_chunk <- cbind(hor_chunk, chunk)
1438704139459:}
1438704145889:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438704146391:for(file in list.files(pattern=paste0("_", i, "r"))) {
1438704147064:chunk <- read.csv(file, row.names=1)
1438704147274:names <- row.names(chunk) #waste
1438704147511:hor_chunk <- cbind(hor_chunk, chunk)
1438704147770:}
1438704156343:row.names(hor_chunk) <- names
1438704158761:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438704263752:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438704263753:for(file in list.files(pattern=paste0("_", i, "r"))) {
1438704263753:chunk <- read.csv(file, row.names=1)
1438704263753:names <- row.names(chunk) #waste
1438704263753:hor_chunk <- cbind(hor_chunk, chunk)
1438704263754:}
1438704270865:for(file in list.files(pattern=paste0("r", i, "c"))) {
1438704270865:chunk <- t(read.csv(file, row.names=1))
1438704270865:names <- row.names(chunk) #waste
1438704270865:hor_chunk <- cbind(hor_chunk, chunk)
1438704270866:}
1438704428981:length(list.files(pattern=paste0("_", i, "r"))
1438704430594:)
1438704445397:length(list.files(pattern=paste0("r", i, "c")))
1438704454953:list.files(pattern=paste0("r", i, "c"))
1438704587967:?list.files
1438704761824:list.files(pattern=paste0("_", i, "r"))
1438704772475:length(list.files(pattern=paste0("_", i, "r"))
1438704783811:list.files(pattern=paste0("r", i, "c"))
1438704825294:list.files(pattern=paste0("r", i, "c"))[-i]
1438704971366:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438704971366:for(file in list.files(pattern=paste0("_", i, "r"))) {
1438704971367:chunk <- read.csv(file, row.names=1)
1438704971367:names <- row.names(chunk) #waste
1438704971367:hor_chunk <- cbind(hor_chunk, chunk)
1438704971367:}
1438704978389:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { #nieeleganckie
1438704978390:chunk <- t(read.csv(file, row.names=1))
1438704978390:names <- row.names(chunk) #waste
1438704978390:hor_chunk <- cbind(hor_chunk, chunk)
1438704978390:}
1438704978939:row.names(hor_chunk) <- names
1438704978940:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438705035679:for(i in 1:nchunks) {
1438705035679:# prepare nchunks files
1438705035679:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438705035680:for(file in list.files(pattern=paste0("_", i, "r"))) {
1438705035680:chunk <- read.csv(file, row.names=1)
1438705035680:names <- row.names(chunk) #waste
1438705035680:hor_chunk <- cbind(hor_chunk, chunk)
1438705035680:}
1438705035681:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { #nieeleganckie
1438705035681:chunk <- t(read.csv(file, row.names=1))
1438705035681:names <- row.names(chunk) #waste
1438705035682:hor_chunk <- cbind(hor_chunk, chunk)
1438705035682:}
1438705035683:row.names(hor_chunk) <- names
1438705035683:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438705035683:}
1438705506576:library(doParallel)
1438705506765:registerDoParallel(cores = 11)
1438705511749:registerDoParallel(cores = 10)
1438705519254:foreach(i = 1:nchunks) %dopar% {
1438705519254:# prepare nchunks files
1438705519255:hor_chunk <- matrix(NA, nrow=hor.ncol, ncol=0)
1438705519255:for(file in list.files(pattern=paste0("_", i, "r"))) {
1438705519255:chunk <- read.csv(file, row.names=1)
1438705519255:names <- row.names(chunk) #waste
1438705519256:hor_chunk <- cbind(hor_chunk, chunk)
1438705519256:}
1438705519256:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { #nieeleganckie
1438705519257:chunk <- t(read.csv(file, row.names=1))
1438705519257:names <- row.names(chunk) #waste
1438705519257:hor_chunk <- cbind(hor_chunk, chunk)
1438705519257:}
1438705519258:row.names(hor_chunk) <- names
1438705519258:write.csv(hor_chunk, file=paste0("cor_mat_", i, ".csv"))
1438705519259:}
1438706541870:from_csv <- read.csv("cor_mat1.csv")
1438706546791:from_csv <- read.csv("cor_mat_1.csv")
1438706610652:View(from_csv)
1438712155353:file="cor_mat_1_hor"
1438712170600:file="cor_mat_1hor.csv"
1438712173985:print(paste("Processing", file))
1438712180662:hor_chunk <- read.csv(file, row.names=1)
1438712244230:nrows <- nrow(hor_chunk)
1438712247631:i <- 1:nrows
1438712249966:res_pos <- lapply(i, function(i) {
1438712250208:row <- hor_chunk[i,-i]
1438712250453:row <- sort(row, decreasing=T, na.last=T)
1438712250757:})
1438712417112:data_pos <- data.frame()
1438712562699:dim(cnt.mat2)
1438715898754:for(i in i) {print(i)}
1438716271459:for(i in i) {
1438716272002:data_chunk <- cbind(c(rownames(hor_chunk)[i], recursive=T), t(res_pos[[i]]))
1438716272389:data_pos <- rbind(data_pos, data_chunk)
1438716273458:}
1438716278032:View(data_pos)
1438716322724:res.pos[1]
1438716326499:res_pos[1]
1438716336199:res_pos[2]
1438716351379:res_pos[[2]
1438716352907:]
1438716369474:res_pos[[,2]]
1438716373486:res_pos[[2,]]
1438716377404:res_pos[2,]
1438716391179:res_pos[2][1]
1438716595084:length(res_pos[2])
1438716599435:length(res_pos[[2])
1438716601859:length(res_pos[[2]])
1438716924382:rownames(hor_chunk)[i]
1438716979347:for(i in 1:nrows) {
1438716979537:data_chunk <- cbind(c(rownames(hor_chunk)[i], recursive=T), t(res_pos[[i]]))
1438716979768:data_pos <- rbind(data_pos, data_chunk)
1438716980904:}
1438716987329:i <- 1:nrows
1438716987583:res_pos <- lapply(i, function(i) {
1438716987920:row <- hor_chunk[i,-i]
1438716988092:row <- sort(row, decreasing=T, na.last=T)
1438716988481:})
1438717128696:data_pos <- data.frame()
1438717128697:for(i in 1:nrows) {
1438717128697:data_chunk <- cbind(c(rownames(hor_chunk)[i], recursive=T), t(res_pos[[i]]))
1438717128697:data_pos <- rbind(data_pos, data_chunk)
1438718854025:}
1438718861605:data_pos <- data.frame()
1438718863951:View(data_pos)
1438718878357:for(i in 1:nrows) {
1438718878512:data_chunk <- cbind(c(rownames(hor_chunk)[i], recursive=T), t(res_pos[[i]]))
1438718879478:data_pos <- rbind(data_pos, data_chunk)
1438718880363:}
1438723053150:?apply
1438723069038:res_neg <- apply(i, function(i) {
1438723069285:row <- hor_chunk[i,-i]
1438723069523:row <- sort(row, decreasing=F, na.last=T)
1438723069702:})
1438723079808:res_neg <- apply(i, FUN=function(i) {
1438723080056:row <- hor_chunk[i,-i]
1438723080215:row <- sort(row, decreasing=F, na.last=T)
1438723080376:})
1438723134658:res_neg <- apply(i, 1, FUN=function(i) {
1438723134934:print(i)
1438723135975:})
1438723817276:i <- 1:nrows
1438723818054:res_pos <- sapply(i, function(i) {
1438723818381:row <- hor_chunk[i,-i]
1438723818653:row <- sort(row, decreasing=T, na.last=T)
1438723818860:})
1438725026850:View(res_pos)
1438725120655:row <- hor_chunk[i,-i]
1438725129906:head(row)
1438725143337:View(row)
1438725164156:i=2
1438725167452:row <- hor_chunk[i,-i]
1438725176803:head(row)
1438725189150:class(row)
1438725196050:View(row)
1438725210227:i=1
1438725212225:row <- hor_chunk[i,-i]
1438725214682:View(row)
1438725232499:View(hor_chunk)
1438725232812:View(hor_chunk)
1438725253750:hor_chunk <- read.csv(file, row.names=1)
1438725317354:row <- hor_chunk[i,-i]
1438725332224:View(row)
1438725342275:View(hor_chunk)
1438725451637:sum(row==NA)
1438725465725:sum(row[1,]==NA)
1438725478750:sum(row[1,])
1438725487825:?sum
1438725494425:sum(row[1,], na.rm=T)
1438725533251:head(row[1,])
1438725550477:head(row[,1])
1438725556110:head(row[2,])
1438725569075:row[2,]
1438725583287:class(row)
1438725590436:class(row[1,])
1438725619349:class(row[1,1])
1438725631612:row[1,1]
1438725719975:row[5,]
1438725736874:View(row)
1438725752724:row[[2]]
1438725754702:row[[1]]
1438725774726:row[[1]][2]
1438725779751:row[[1]][2][3]
1438725812884:which(row[1]!="NA")
1438725816100:which(row[1]!=NA)
1438725823525:?which
1438725867775:row[1]!=NA
1438725874306:row[1,]!=NA
1438725914432:row[1,]!=ENSG00000102317
1438725920325:row[1,]!="ENSG00000102317"
1438725981132:row[1,]=="NA"
1438726050824:hor_chunk[i,-i]
1438726074174:i=2
1438726075150:hor_chunk[i,-i]
1438726085674:View(hor_chunk)
1438726104949:hor_chunk[2,]
1438726139310:hm <- as.matrix(hor_chunk)
1438726146452:hm[2,]
1438726184629:?read.table
1438726251403:hor_chunk <- read.table(file, header=T, row.names=1, sep=",")
1438726374947:class(hor_chunk)
1438726385058:View(hor_chunk)
1438726388880:View(hm)
1438726427603:hor_chynk <- as.matrix(hor_chunk)
1438726432478:hor_chunk <- as.matrix(hor_chunk)
1438726437435:rm(hor_chynk)
1438726442949:rm*hm)
1438726445379:rm(hm)
1438726450726:nrows <- nrow(hor_chunk)
1438726454005:row <- hor_chunk[i,-i]
1438726458785:row[2]
1438726463950:row[1,]
1438726502927:head(names(row))
1438726584325:1 || 0
1438726587307:1 | 0
1438726603386:c(1,1) | c(1,0)
1438726635433:row <- row[row>0.95 | row<-0.95]
1438726640389:row <- row[row>0.95 | row<0.95]
1438726654014:View(row)
1438726663400:row[1]
1438726666857:row[3]
1438726672060:row[100]
1438726677502:row <- hor_chunk[i,-i]
1438726682177:row[row>0.95 | row<0.95]
1438726703651:row[row>0.95 | row<(-0.95)]
1438726727350:sum(row[row>0.95 | row<(-0.95)], na.rm=T)
1438726821787:row>0.95
1438726832899:sum(row>0.95)
1438726838575:sum(row>0.95, na.rm=T)
1438726845350:sum(row<(-0.95), na.rm=T)
1438726850924:sum(row>0.90, na.rm=T)
1438727078217:row <- row[!is.na & (row>0.9 | row<(-0.9))] # set threshold
1438727086093:row <- row[!is.na(row) & (row>0.9 | row<(-0.9))] # set threshold
1438727095000:head(row)
1438727145892:row <- hor_chunk[i,-i]
1438727152827:row[2]
1438727178244:row <- hor_chunk[i,(nrows-i)]
1438727179499:row <- row[!is.na(row) & (row>0.9 | row<(-0.9))] # set threshold
1438727186578:head(row)
1438727194885:row <- hor_chunk[i,-(nrows-i)]
1438727195156:row <- row[!is.na(row) & (row>0.9 | row<(-0.9))] # set threshold
1438727197900:head(row)
1438727234685:row <- hor_chunk[i,]
1438727234909:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438727241125:row
1438727428876:row <- cbind(t(names(row), t(row[1])))
1438727443810:row <- cbind(t(names(row), t(row)))
1438727457030:row <- cbind(t(names(row)), t(row)))
1438727462307:row <- cbind(t(names(row)), t(row[1])))
1438727467402:row <- cbind(t(names(row)), t(row[1]))
1438727472100:View(row)
1438727483786:row <- cbind(names(row), row[1])
1438727487657:row <- hor_chunk[i,]
1438727487940:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438727488104:row <- cbind(names(row), row[1])
1438727490299:View(row)
1438727505039:res_pos <- sapply(i, function(i) {
1438727505039:row <- hor_chunk[i,]
1438727505040:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438727505040:row <- cbind(names(row), row[1])
1438727505040:}
1438727523924:}
1438727542475:res_pos <- sapply(i, function(i) {
1438727542475:row <- hor_chunk[i,]
1438727542475:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438727542476:row <- cbind(names(row), row[1])
1438727542476:)
1438727550606:res_pos <- sapply(i, function(i) {
1438727550606:row <- hor_chunk[i,]
1438727550606:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438727550606:row <- cbind(names(row), row[1])
1438727550607:)}
1438727559957:res_pos <- sapply(i, function(i) {
1438727559958:row <- hor_chunk[i,]
1438727559958:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438727559958:row <- cbind(names(row), row[1])
1438727559958:})
1438727563182:View(res_pos)
1438727588386:?sapply
1438786415922:View(res_pos)
1438786507983:res_pos <- sapply(i, function(i) {
1438786508175:row <- hor_chunk[i,]
1438786508341:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438786508501:row <- cbind(names(row), row[1])
1438786508718:})
1438786511326:View(row)
1438786545632:i=1:3
1438786548247:res_pos <- sapply(i, function(i) {
1438786548247:row <- hor_chunk[i,]
1438786548247:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438786548247:row <- cbind(names(row), row[1])
1438786548248:})
1438786672688:sapply(i)
1438786683007:sapply(i FUN=i*2)
1438786687976:sapply(i, FUN=i*2)
1438786695948:sapply(i, FUN=(i*2)
1438786698223:)
1438786703713:sapply(i, FUN=(i)
1438786705623:)
1438786719711:sapply(i, FUN=sum(i,1))
1438786782663:res_pos <- sapply(i, simplify="array", function(i) {
1438786782883:row <- hor_chunk[i,]
1438786783059:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438786783227:row <- cbind(names(row), row[1])
1438786783404:})
1438786926252:res_pos <- sapply(i, simplify="array", function(i) {
1438786926252:row <- hor_chunk[i,]
1438786926253:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438786926253:row <- cbind(names(row), row[1])
1438786926253:})
1438786934981:res_pos <- sapply(i, function(i) {
1438786934981:row <- hor_chunk[i,]
1438786934982:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438786934982:row <- cbind(names(row), row[1])
1438786934982:})
1438787223932:res_pos <- sapply(i, simplify="matrix", function(i) {
1438787224082:row <- hor_chunk[i,]
1438787224240:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438787224400:row <- cbind(names(row), row[1])
1438787224572:})
1438787384080:unlist(res_pos)
1438787394323:View(unlist(res_pos))
1438787412498:unls <- unlist(res_pos)
1438787581702:class(unls)
1438787608829:View(matrix(unls, ncol=2))
1438787655682:res.pos[1]
1438787658923:res_pos[1]
1438787666772:View(res_pos[1])
1438787695949:i=2
1438787699053:row <- hor_chunk[i,]
1438787699331:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438787699453:row <- cbind(names(row), row[1])
1438787702326:View(row)
1438787710248:View(hor_chunk)
1438787730339:hor_chunk <- as.matrix(read.csv(file, row.names=1))
1438787736423:setwd(paste0(fp, "/correlation_matrix"))
1438787738062:hor_chunk <- as.matrix(read.csv(file, row.names=1))
1438787795660:i=1
1438787834835:row <- hor_chunk[i,]
1438787835120:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438787835405:row <- cbind(names(row), row[1])
1438787841423:View(row)
1438787849352:row <- hor_chunk[i,]
1438787860354:row
1438787867757:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438787877004:row
1438787886874:row[1]
1438787898048:row[1,]
1438787906325:row <- cbind(names(row), row)
1438787908273:View(row)
1438787940762:row <- hor_chunk[i,]
1438787994843:tx_names <- row.names(hor_chunk)
1438788042723:tx_names[i]
1438788120905:row <- hor_chunk[i,]
1438788121196:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438788121449:row <- cbind(names(row), row)
1438788121696:row.names(row) <- tx_names[i]
1438788128828:row.names(row) <- c(tx_names[i])
1438788162250:row.names(row)
1438788194648:vector(tx_names(i), 10)
1438788212606:vector(tx_names[i], 10)
1438788222998:vector(as.character(tx_names[i]), 10)
1438788231506:matrix(as.character(tx_names[i]), 10)
1438788240234:matrix(tx_names[i], 10)
1438788266913:class(row.names)
1438788274348:class(row.names(row))
1438788301330:tx <- tx_names[i]
1438788306885:row.names(row) <- c(tx)
1438788331926:View(row)
1438788357748:?c
1438788366262:row.names(row) <- c(tx, recursive=T)
1438788401427:row.names(row) <- c(tx, recursive=t)
1438788408630:row.names(row) <- c(tx, recursive=T)
1438788469461:tx
1438788556404:?vector
1438788594965:row <- hor_chunk[i,]
1438788595246:row <- row[!is.na(row) & row!=1 & (row>0.9 | row<(-0.9))] # set threshold
1438788595419:row <- cbind(names(row), row)
1438788595905:row.names(row) <- vector(c(tx), nrow(row))
1438788603884:row.names(row) <- matrix(c(tx), nrow(row))
1438788608198:View(row)
1438788626281:row <- hor_chunk[i,]
1438788626566:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438788626581:row <- cbind(names(row), row)
1438788626743:row.names(row) <- matrix(c(tx), nrow(row))
1438788628975:View(row)
1438789024532:row <- hor_chunk[i,]
1438789024819:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789024830:row <- cbind(matrix(c(tx), nrow(row)), names(row), row)
1438789066185:row <- hor_chunk[i,]
1438789066473:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789066651:row <- cbind(matrix(c(tx_names[i]), nrow(row)), names(row), row)
1438789084624:row <- hor_chunk[i,]
1438789084904:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789085306:row <- cbind(matrix(c(tx_names[i]), nrow=nrow(row)), names(row), row)
1438789105864:matrix(c(tx_names[i]), nrow=nrow(row))
1438789119506:?"matrix"
1438789129238:row <- cbind(matrix(c(tx_names[i]), nrow=nrow(row), ncol=1), names(row), row)
1438789191156:class(tx_names[i])
1438789205886:row <- cbind(data.frame(c(tx_names[i]), nrow=nrow(row), ncol=1), names(row), row)
1438789222330:nrow(row)
1438789229135:row <- hor_chunk[i,]
1438789230109:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789245415:row <- cbind(data.frame(c(tx_names[i]), nrow=length(row)), names(row), row)
1438789254488:row <- hor_chunk[i,]
1438789254770:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789254924:row <- cbind(matrix(c(tx_names[i]), nrow=length(row)), names(row), row)
1438789257327:View(row)
1438789359644:i=1:3
1438789365761:res_pos <- data.frame()
1438789365761:for(i in 1:nrows) {
1438789365761:row <- hor_chunk[i,]
1438789365762:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789365762:row <- cbind(matrix(c(tx_names[i]), nrow=length(row)), names(row), row)
1438789365762:res_pos <- rbind(res_pos, row)
1438789365762:}
1438789384725:row <- hor_chunk[i,]
1438789385424:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789393598:i=1
1438789396006:row <- hor_chunk[i,]
1438789396923:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789404723:length(row)
1438789459702:rbind(c(tx_names[1]), names(row), row)
1438789480150:row <- hor_chunk[i,]
1438789480724:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789481423:row <- cbind(c(tx_names[i]), names(row), row)
1438789486748:View(row)
1438789498023:i <- 1:nrows
1438789498023:res_pos <- data.frame()
1438789498023:for(i in 1:nrows) {
1438789498024:row <- hor_chunk[i,]
1438789498024:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789498024:row <- cbind(c(tx_names[i]), names(row), row)
1438789498024:res_pos <- rbind(res_pos, row)
1438789498024:}
1438789524399:i=1:3
1438789528560:res_pos <- data.frame()
1438789530082:for(i in 1:nrows) {
1438789530315:row <- hor_chunk[i,]
1438789530529:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789530803:row <- cbind(c(tx_names[i]), names(row), row)
1438789531533:res_pos <- rbind(res_pos, row)
1438789532746:}
1438789546973:?data.frame\
1438789548923:?data.frame
1438789570876:res_pos <- matrix()
1438789572683:res_pos <- rbind(res_pos, row)
1438789575973:View(res_pos)
1438789586899:?"matrix"
1438789612057:res_pos <- matrix(nrow=0, ncol=3)
1438789617750:row <- hor_chunk[i,]
1438789618159:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789619060:row <- cbind(c(tx_names[i]), names(row), row)
1438789621333:res_pos <- rbind(res_pos, row)
1438789633257:dim(res_pos)
1438789638523:View(hor_chunk)
1438789639694:View(res_pos)
1438789648024:dim(row)
1438789655834:i=1
1438789659037:row <- hor_chunk[i,]
1438789659333:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789659588:row <- cbind(c(tx_names[i]), names(row), row)
1438789662823:dim(row)
1438789667009:res_pos <- rbind(res_pos, row)
1438789670098:View(res_pos)
1438789894990:res_pos <- matrix(nrow=0, ncol=3)
1438789894990:for(i in 1:nrows) {
1438789894990:row <- hor_chunk[i,]
1438789894991:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789894991:row <- cbind(c(tx_names[i]), names(row), row)
1438789894991:res_pos <- rbind(res_pos, row)
1438789894991:}
1438789918455:for(i in 1:nrows) {
1438789918456:row <- hor_chunk[i,]
1438789918456:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438789918456:row <- cbind(c(tx_names[i]), names(row), row)
1438789918457:head(row)
1438789926826:}
1438790530403:for(i in 1:nrows) {
1438790530559:row <- hor_chunk[i,]
1438790530717:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438790531014:row <- cbind(c(tx_names[i]), names(row), row)
1438790531459:print(head(row))
1438790532167:}
1438790542509:for(i in 1:nrows) {
1438790542657:row <- hor_chunk[i,]
1438790542804:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438790543323:row <- cbind(c(tx_names[i]), names(row), row)
1438790544498:print(dim(row))
1438790545106:}
1438790627647:for(i in 1:nrows) {
1438790629973:row <- hor_chunk[i,]
1438790630261:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438790631259:if(length(row)!=0) {
1438790632098:row <- cbind(c(tx_names[i]), names(row), row)
1438790632308:print(dim(row))
1438790635106:}
1438790635273:}
1438790643431:res_pos <- matrix(nrow=0, ncol=3)
1438790643431:for(i in 1:nrows) {
1438790643431:row <- hor_chunk[i,]
1438790643432:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438790643432:if(length(row)!=0) {
1438790643432:row <- cbind(c(tx_names[i]), names(row), row)
1438790643432:print(dim(row))
1438790643433:res_pos <- rbind(res_pos, row)
1438790643433:}
1438790643433:}
1438790654623:dim(res_pos)
1438790697529:head(res_pos)
1438790706998:View(res_pos)
1438790779260:colnames(res_pos) <- c("gene1", "gene2", "correlation")
1438790783123:head(res_pos)
1438790794887:rownames(res_pos <- NULL)
1438790810230:res_pos <- matrix(nrow=0, ncol=3)
1438790810231:for(i in 1:nrows) {
1438790810231:row <- hor_chunk[i,]
1438790810231:row <- row[!is.na(row) & row!=1 & (row>0.95 | row<(-0.95))] # set threshold
1438790810231:if(length(row)!=0) {
1438790810231:row <- cbind(c(tx_names[i]), names(row), row)
1438790810232:# print(dim(row))
1438790810232:res_pos <- rbind(res_pos, row)
1438790810232:}
1438790810232:}
1438790814405:colnames(res_pos) <- c("gene1", "gene2", "correlation")
1438790814598:rownames(res_pos) <- NULL
1438790819073:head(res_pos)
1438790874845:res_pos <- unique(res_pos)
1438790880458:dim(res_pos)
1438791333012:sum(res_pos$correlation < 0)
1438791346474:sum(res_pos[,3] < 0)
1438791383398:class(res_pos)
1438791465203:threshold=0.95
1438791480858:i <- 1
1438791483582:row <- hor_chunk[i,]
1438791485711:row <- row[!is.na(row) & row!=1 & (row>threshold | row<(-threshold))] # set threshold
1438791488156:row <- hor_chunk[i,]
1438791508407:sum(hor_chunk < (-0.95)
1438791510580:)
1438791551867:sum(!is.na(hor_chunk) & hor_chunk < (-0.95))
1438791557874:sum(!is.na(hor_chunk) & hor_chunk < (-0.1))
1438791560537:sum(!is.na(hor_chunk) & hor_chunk < (-0.5))
1438791562798:sum(!is.na(hor_chunk) & hor_chunk < (-0.9))
1438791888824:file.exists(file)
1438791901459:file.exists("cor_mat_1hor.csv")
1438791908929:file.exists("*.csv")
1438791920729:?grep
1438791928798:file.exists(grep(*.csv)
1438791934198:file.exists(grep(.csv)
1438791935873:)
1438791953973:?file.exists
1438792014978:file.exists(grep(.csv), list.files())
1438792022823:file.exists(grep(.csv), x=list.files())
1438792179965:file_list <- list.files(pattern="hor.csv")
1438792185998:setwd(..)
1438792189398:setwd("..")
1438792196433:file_list <- list.files(pattern="hor.csv")
1438792215906:file_list == NULL
1438792235074:empty(file_list)
1438792282264:file_list <- list.files(pattern="hor.csv")
1438792282808:if(length(file_list) == 0) {
1438792282949:break("specify folder")
1438792283102:}
1438792405141:if(length(file_list) == 0) {
1438792405326:print("specify folder")
1438792405677:stop()
1438792405877:}
1438792419983:if(length(file_list) == 0) {
1438792420159:stop("specify folder")
1438792420308:}
1438793013289:get.correlated <- function(folder="correlation_matrix", threshold=0.95) {
1438793013289:setwd(paste0(fp, "/", folder))
1438793013289:file_list <- list.files(pattern="hor.csv")
1438793013290:if(length(file_list) == 0) {
1438793013290:stop("specify folder")
1438793013290:}
1438793013290:# po chuj segregować
1438793013291:foreach(file = file_list) %dopar% {
1438793013291:print(paste("Processing", file))
1438793013291:hor_chunk <- as.matrix(read.csv(file, row.names=1))
1438793013291:nrows <- nrow(hor_chunk)
1438793013292:tx_names <- row.names(hor_chunk)
1438793013292:i <- 1:nrows
1438793013292:res <- matrix(nrow=0, ncol=3)
1438793013293:for(i in 1:nrows) {
1438793013293:row <- hor_chunk[i,]
1438793013293:row <- row[!is.na(row) & row!=1 & (row>threshold | row<(-threshold))] # set threshold
1438793013293:if(length(row)!=0) {
1438793013294:row <- cbind(c(tx_names[i]), names(row), row)
1438793013294:res <- rbind(res, row)
1438793013294:}
1438793013295:}
1438793013295:colnames(res) <- c("gene1_id", "gene2_id", "correlation")
1438793013295:rownames(res) <- NULL
1438793013296:write.csv(res, file="most_correlated.csv")
1438793013296:}
1438793013297:#there are duplicate entries - remove - or just leave for now
1438793013297:}
1438793052509:write.csv(res_pos, file=paste0(fp, "/most_correlated.csv")
1438793055402:)
1438793070423:write.csv(res_pos, file=paste0(fp, "/most_correlated1.csv"))
1438793087120:get.correlated <- function(folder="correlation_matrix", threshold=0.95) {
1438793087120:setwd(paste0(fp, "/", folder))
1438793087121:file_list <- list.files(pattern="hor.csv")
1438793087121:if(length(file_list) == 0) {
1438793087121:stop("specify folder")
1438793087121:}
1438793087122:# po chuj segregować
1438793087122:foreach(file = file_list) %dopar% {
1438793087122:print(paste("Processing", file))
1438793087122:hor_chunk <- as.matrix(read.csv(file, row.names=1))
1438793087123:nrows <- nrow(hor_chunk)
1438793087123:tx_names <- row.names(hor_chunk)
1438793087123:i <- 1:nrows
1438793087124:res <- matrix(nrow=0, ncol=3)
1438793087124:for(i in 1:nrows) {
1438793087124:row <- hor_chunk[i,]
1438793087124:row <- row[!is.na(row) & row!=1 & (row>threshold | row<(-threshold))] # set threshold
1438793087125:if(length(row)!=0) {
1438793087125:row <- cbind(c(tx_names[i]), names(row), row)
1438793087125:res <- rbind(res, row)
1438793087126:}
1438793087126:}
1438793087126:colnames(res) <- c("gene1_id", "gene2_id", "correlation")
1438793087127:rownames(res) <- NULL
1438793087127:write.csv(res, file=paste0(fp, "/most_correlated.csv"))
1438793087128:}
1438793087128:#there are duplicate entries - remove - or just leave for now
1438793087128:}
1438793116148:get_correlated()
1438793120548:get.correlated()
1438793128692:library(doParallel)
1438793128890:registerDoParallel(cores = 11)
1438793134851:get.correlated()
1438796526048:correlated_genes  <- read.csv("most_correlated.csdv")
1438796529098:correlated_genes  <- read.csv("most_correlated.csv")
1438796542148:setwd("..")
1438796543373:correlated_genes  <- read.csv("most_correlated.csv")
1438796545723:View(correlated_genes)
1438796558048:?write.csv
1438796664548:correlated_genes  <- correlated_genes[,-1]
1438796667948:View(correlated_genes)
1438796697658:plot(correlated_genes)
1438796717450:corgen <- correlated_genes
1438796728274:plot(correlated_genes[,3])
1438796815215:plot(correlated_genes[,3])
1438796833456:library(ggplot2)
1438796838071:qplot(correlated_genes[,3])
1438796882830:sum(corgen[,3]==1)
1438796887935:sum(corgen[,3]<0)
1438796913311:-threshold
1438797297754:which(corgen>0.999)
1438797311574:which(corgen[,3]>0.999)
1438797327124:which(corgen[,3]>0.9999)
1438797344449:length(which(corgen[,3]>0.999))
1438797360706:?which
1438797380223:length(which(corgen[,3]>0.999,arr.ind=F))
1438797386677:which(corgen[,3]>0.999,arr.ind=F)
1438797445923:length(corgen[,3]>0.999 & corgen[,3] <1)
1438797456273:length(corgen[,3]>0.999 && corgen[,3] <1)
1438797494402:(corgen[,3]>0.999 & corgen[,3] <1)
1438797520123:which(corgen[,3]>0.999 && corgen[,3] <1)
1438797552567:sum(corgen[,3]>0.999 && corgen[,3] <1)
1438797567098:sum(corgen[,3]>0.99 && corgen[,3] <1)
1438797574281:sum(corgen[,3]>0.99)
1438797584777:sum(corgen[,3]>0.99 & corgen<1)
1438797590177:sum(corgen[,3]>0.99 & corgen[,3]<1)
1438797710398:sum(corgen[,3]>0.999 & corgen[,3]<1)
1438797723573:sum(corgen[,3]>1)
1438797784699:sum(corgen[,3]<0)
1438797799148:min(corgen[,3])
1438797993948:corgen  <- read.csv("most_correlated.csv")
1438798009548:corgen <- corgen[,-1]
1438798039276:data <- corgen
1438798160387:mart <- read.csv("mart_export.txt", header=T)
1438798230736:mart <- read.csv("mart_export.txt", header=T)
1438798265298:names(mart)
1438798359447:class(data)
1438798411586:threshold = 0.95
1438799600085:names(mart)[1]
1438799609253:names(mart)[1] <- "Ensembl.Gene.ID.1"
1438799618377:names(mart)[1]
1438799642898:colnames(data) <- c("Ensembl.Gene.ID.0", "Ensembl.Gene.ID.1", "correlation")
1438799658876:threshold = 0.99
1438799664124:data_red <- data[data$correlation > threshold,]
1438799669156:features <- merge(data_red, mart, by="Ensembl.Gene.ID.1", all.y=F, sort=F)
1438799673098:View(features)
1438803375475:features[!is.na(features[,18])]
1438803398835:!is.na(features[18]
1438803401308:)
1438803413850:features(!is.na(features[18]))
1438803426923:features[!is.na(features[18])]
1438803432548:features[!is.na(features[18]),]
1438803452178:sum(!is.na(features[18]))
1438814130250:gene<- "ENSG00000100985"
1438814132905:gene_features <- features[features$Ensembl.Gene.ID.0==gene, -1]
1438814134773:View(gene_features)
1438814151076:gene_features <- features[features$Ensembl.Gene.ID.0==gene, -2]
1438814153023:View(gene_features)
1438874265208:View(features)
1438874311036:get_gene_cor <- function(gene) {
1438874311036:return(features[features$Ensembl.Gene.ID.0==gene, -2])
1438874311036:}
1438874326357:get_gene_cor(gene)
1438874451680:View(get_gene_cor(gene))
1438874651924:class(features$Ensembl.Gene.ID.1)
1439218072665:library(SRAdb)
1439218086065:?borwseVignettes
1439218091765:?browseVignettes
1439218112590:?borwseVignette
1439218120766:browseVignettes("SRAdb")
1439219246494:ls()
1439219256615:system("ls")
1439219600990:library(SRAdb)
1439219628891:sqlfile <<- getSRAdbFile()
1439220083665:con <- dbCOnnect(SQLite(), sqlfile)
1439220087790:con <- dbConnect(SQLite(), sqlfile)
1439220385315:dbListFields(con, "col_desc")
1439220476165:colDescriptions(con)[1:5,]
1439220511398:colDescriptions(con)[1:20,]
1439220613467:colDescriptions(con)[20:30,]
1439220691972:colDescriptions(con)[31:40,]
1439220778800:colDescriptions(con)[41:50]
1439220782435:colDescriptions(con)[41:50,]
1439220804564:colDescriptions(con)[,5]
1439220825172:colDescriptions(con)[,5:6]
1439221758597:?dbGetQuery
1439221993660:dbGetQuery(con, "select * from study where study_description = ")
1439222028122:dbDescriptions(con)[,20]
1439222036019:colDescriptions(con)[,20]
1439222052261:colDescriptions(con)[20,]
1439222073056:dbGetQuery(con, "select * from study where study_type = Metagenomics)
1439222075036:)
1439222079166:dbGetQuery(con, "select * from study where study_type = Metagenomics")
1439222095474:dbGetQuery(con, "select * from study where study_type = 'Metagenomics'")
1439222123395:dbGetQuery(con, "select study_accession from study where study_type = 'Metagenomics'")
1439222304135:dbGetQuery(con, "select study_accession from study where study_description like 'Metagenomics%'")[1:5,]
1439222318339:dbGetQuery(con, "select study_accession from study where study_description like 'Transcriptome%'")[1:5,]
1439225800907:dbGetQuery(con, select study_type, count(*) from 'study' group by study_type)
1439225812482:dbGetQuery(con, "select study_type, count(*) from 'study' group by study_type")
1439225874189:dbGetQuery(con, "select study_type, from 'study' group by study_type")
1439225883896:dbGetQuery(con, "select study_type, group by study_type")
1439225908467:dbGetQuery(con, "select study_type, count(*) from 'study'")
1439232461950:dbGetQuery(con, "select study_type, count(*) from 'experiment', group by library_strategy")
1439232474974:dbGetQuery(con, "select study_type, count(*) from 'experiment' group by library_strategy")
1439232492329:dbGetQuery(con, "select library_strategy, count(*) from 'experiment' group by library_strategy")
1439232711854:listDRAfile("SRX000122")
1439232718246:listSRAfile("SRX000122")
1439232724125:listSRAfile(con, "SRX000122")
1439232735486:listSRAfile(con, c("SRX000122"))
1439232751393:listSRAfile(c("SRX000122"), con)
1439232786026:c(listSRAfile(c("SRX000122"), con)[,5])
1439233112768:colDescriptions(con)
1439233128436:colDescriptions(con)[,5]
1439233162224:colDescriptions(con)[,c2,5)]
1439233165108:colDescriptions(con)[,c(2,5)]
1439233223122:descx <-colDescriptions(con)
1439233227368:desc <-colDescriptions(con)
1439233272917:desc[desc[2]=="submission",5]
1439233295459:desc[desc[2]=="submission",c(1,5)]
1439233299897:desc[desc[2]=="submission",c(3,5)]
1439235284993:dbGetQuery(con, "select library_strategy, count(*) from 'experiment' group by library_strategy")
1439235322641:dbGetQuery(con, "select study_type, count(*) from 'experiment' group by library_strategy")
1439235352962:dbGetQuery(con, select study_type, count(*) from 'study' group by study_type)
1439235390627:dbGetQuery(con, select "study_type, count(*) from 'experiment' group by study_type")
1439235406426:dbGetQuery(con, "select study_type, count(*) from 'experiment' group by study_type")
1439235485304:dbListTables
1439235487119:dbListTables()
1439235489303:dbListTables(con)
1439235549935:dbListFields(con, "study")
1439235589159:dbListFields(con, "experiment")
1439235679600:dbListFields(con, "metaInfo")
1439235743011:dbGetQuery(con, "select name, from 'metaData'")
1439235806548:desc[3]
1439235848221:desc[2]
1439235885745:dbGetQuery(con, "name, from 'metaData'
1439235885745:)
1439235890805:dbGetQuery(con, "name, from 'metaData'")
1439236869286:decs[1,]
1439236873884:desc[1,]
1439236926840:c(listSRAfile(c("SRX000122"), con)[,5])
1439236932454:listSRAfile(c("SRX000122"), con)[,5]
1439236936504:listSRAfile(c("SRX000122"), con)
1439237018753:system("prefetch SRX000122")
1439237127185:?getSRA
1439237379172:getSRA(search_terms='"rna-seq"', con, acc_only = T)
1439237392305:getSRA(search_terms='"rna-seq"', sra_con=con, acc_only = T)
1439237489547:lasit <_ getSRA(search_terms='"rna-seq"', sra_con=con, acc_only = T)
1439237496744:list <- getSRA(search_terms='"rna-seq"', sra_con=con, acc_only = T)
1439237515710:list <- list[1:100,]
1439237595809:getSRAinfo(c(list[,4]), sra_con=con, file_type = sraC)
1439237597969:getSRAinfo(c(list[,4]), sra_con=con, file_type = sra)
1439237602328:getSRAinfo(c(list[,4]), sra_con=con)
1439237767833:class(list[,4])
1439237777041:class(c(list[,4])
1439237784590:)
1439237801585:exp_list <- list[,4[]]
1439237804016:exp_list <- list[,4
1439237805586:]
1439237890282:exp_list <- list[1:5,4]
1439237905485:getSRAinfo(exp_list, sra_con=con)
1439237957565:exp_list <- list[1:50,4]
1439237958801:getSRAinfo(exp_list, sra_con=con)
1439238058596:exp_list <- list[1:900,4]
1439238061424:exp_list <- list[1:90,4]
1439238074665:getSRAinfo(exp_list, sra_con=con)
1439238228609:exp_list <- list[50:90,4]
1439238230039:getSRAinfo(exp_list, sra_con=con)
1439238981652:list_nc <- getSRA(search_terms='"ncrna"', sra_con=con, acc_only = T)
1439238999727:list <- getSRA(search_terms='"rna-seq"', sra_con=con, acc_only = T)
1439239015752:list_mi <- getSRA(search_terms='"mirna"', sra_con=con, acc_only = T)
1439239827851:exp_list_nc <- list_nc[,4]
1439239834977:getSRAinfo(exp_list_nc, sra_con=con)
1439239929499:exp_list <- list[50:60,4]
1439239933617:getSRAinfo(exp_list, sra_con=con)
1439240813751:head(list)
1439240836235:list_sub <- list[,1]
1439240862707:sub_list <- list[,1]
1439240867452:rm(list_sub)
1439240882790:getSRAinfo(sub_list[1:10], sra_con=con)
1439240994279:head(list_mi)
1439241064424:for(i in (nrow(list_mi)/10)) {}
1439241069191:for(i in (nrow(list_mi)/10)) {
1439241611820:?split
1439241669767:parts <- split(list, 10)
1439241676890:parts[1]
1439241690928:parts[[1]]
1439241710115:list_rna <- list
1439241718705:list <- list_nc
1439241826732:list <- list[,1]
1439241864330:parts <- split(list, 10)
1439241873772:parts <- split(list, 1:10)
1439241947131:nparts <- ceiling((nrow(list)/10))
1439241958067:nparts <- ceiling((length(list)/10))
1439241969047:parts <- split(list, 1:nparts)
1439242016469:lapply(parts, length)
1439242036472:list <- list_mi
1439242039016:nparts <- ceiling((length(list)/10))
1439242039176:parts <- split(list, 1:nparts)
1439242042666:list <- list_mi
1439242047422:lapply(parts, length)
1439242064503:nparts <- ceiling((length(list)/10))
1439242083884:list <- list[,1]
1439242084520:nparts <- ceiling((length(list)/10))
1439242084712:parts <- split(list, 1:nparts)
1439242091206:lapply(parts, length)
1439242169174:parts[i]
1439242214794:info <- getSRAinfo(list[parts[i]], sra_con=con)
1439242226065:?list
1439242236758:list[parts[i]]
1439242258919:info <- getSRAinfo(parts[i], sra_con=con)
1439242293569:head(list_mi)
1439242297166:head(list_nc)
1439242301632:head(list_rna)
1439242345073:parts[i]
1439242447884:info <- getSRAinfo(c(parts[i]), sra_con=con)
1439242454673:class(parts[i])
1439242463248:class(c(parts[i]))
1439242469965:class(as.vector(parts[i]))
1439242481640:class(parts[[i]])
1439242487823:info <- getSRAinfo(parts[[i]], sra_con=con)
1439242617643:info <- getSRAinfo(parts[[i]], sra_con=con)
1439244293916:part[[i]]
1439244297577:parts[[i]]
1439244313391:parts[[i-1]]
1439244324540:parts[[(i-1)]]
1439244339872:for(i in nparts)) {
1439244344168:for(i in nparts) {
1439244347965:}
1439244360233:parts[[nparts]]
1439244403441:parts[[(i-1)]]
1439244416915:parts[[(nparts-1)]]
1439244422219:nparts
1439244423641:nparts-1
1439244442185:parts[[(2263]]
1439244445042:parts[[2263]]
1439244448176:parts[[2264]]
1439244451691:parts[[2262]]
1439244462466:parts[[100]]
1439247273040:parts[[20]]
1439247296299:list <- unique(list[,1])
1439247318667:list <- list_nc
1439247321235:list <- unique(list[,1])
1439247329148:nparts <- ceiling((length(list)/10))
1439247332043:parts <- split(list, 1:nparts)
1439247335843:size <- 0
1439247344915:i=2
1439247347244:info <- getSRAinfo(parts[[i]], sra_con=con)
1439247438240:info <- getSRAinfo(list[1:5], sra_con=con)
1439247451721:info <- getSRAinfo(list[70:80], sra_con=con)
1439247483244:info <- getSRAinfo(list[70:75], sra_con=con)
1439304935949:list_nc[,1]
1439304998442:getSRAinfo(DRA000351)
1439305008713:library(SRAdb)
1439305013829:getSRAinfo(DRA000351)
1439305019052:getSRAinfo("DRA000351")
1439305025911:getSRAinfo(con, "DRA000351")
1439305041002:getSRAinfo(con, "SRA000351")
1439305075224:con <- dbConnect(SQLite(), sqlfile)
1439305077425:getSRAinfo(con, "SRA000351")
1439305087551:getSRAinfo(con, c("SRA000351"))
1439305112176:getSRAinfo(list("SRA000351"), sra_con=con)
1439305128374:getSRAinfo("SRA000351", sra_con=con)
1439305134474:getSRAinfo("DRA000351", sra_con=con)
1439305160415:getSRAinfo("SRA000351", sra_con=con)
1439305309314:list <- list_nc
1439305323308:length(list[,1])
1439305330800:length(unique(list[,1])
1439305332376:)
1439305344537:list <- unique(list[,1])
1439305346536:nparts <- ceiling((length(list)/10))
1439305347080:parts <- split(list, 1:nparts)
1439305354679:size <- 0
1439305356528:for(i in nparts) {
1439305356731:info <- getSRAinfo(parts[[i]], sra_con=con)
1439305356863:size <- size + sum(info[])
1439305357455:}
1439305570199:info
1439305574314:info <- getSRAinfo(parts[[i]], sra_con=con)
1439305727316:info <- getSRAinfo(parts[[1]], sra_con=con)
1439305749816:info <- getSRAinfo(parts[[1]], sra_con=con)
1439305866787:slass(list[[1]])
1439305870215:class(list[[1]])
1439305881375:class(list[[1]][]1)
1439305886024:class(list[[1]][1])
1439305891158:list[[1]][1]
1439305897552:info <- getSRAinfo(parts[[1]][1], sra_con=con)
1439305949373:info <- getSRAinfo(parts[[1]][6], sra_con=con)
1439305963724:View(info)
1439305986752:info <- getSRAinfo("DRA000345"), sra_con=con)
1439305990864:info <- getSRAinfo("DRA000345", sra_con=con)
1439306017508:View(info)
1439306390251:list[[1]][1]=="DRA000345"
1439306413105:info <- getSRAinfo(as.character(parts[[1]][6]), sra_con=con)
1439306428287:info <- getSRAinfo(as.character(parts[[1]]), sra_con=con)
1439306588224:info <- getSRAinfo(as.vector(parts[[1]]), sra_con=con)
1439306643186:parts[[1]] == as.vector(parts[[1]])
1439306665749:info <- getSRAinfo(c(parts[[1]]), sra_con=con)
1439306791107:info <- getSRAinfo(c(parts[[1]][1]), sra_con=con)
1439306804616:p <- parts[[1]]
1439306809983:info <- getSRAinfo(p, sra_con=con)
1439306821659:View(p)
1439306834324:Viewc(p)
1439306837575:View(c(p))
1439306849574:View(as.vector(p))
1439309797199:View(unname(p))
1439309810852:info <- getSRAinfo(unname(p), sra_con=con)
1439309910377:info <- getSRAinfo(c("DRA00345", "SRA000351"), sra_con=con)
1439309922832:info <- getSRAinfo(c("DRA000345", "SRA000351"), sra_con=con)
1439309978517:info
1439309996973:info <- getSRAinfo(c(SRA000351"), sra_con=con)
1439310002475:info <- getSRAinfo(c("SRA000351"), sra_con=con)
1439310017273:info <- getSRAinfo(SRA000351, sra_con=con)
1439310023615:info <- getSRAinfo("SRA000351", sra_con=con)
1439310137839:list <- list_nc[,2]
1439310158715:head(list_nc)
1439310166004:list <- list_nc[,5]
1439310197359:list <- unique(list[,1])
1439310197880:nparts <- ceiling((length(list)/10))
1439310198062:parts <- split(list, 1:nparts)
1439310216360:list <- unique(list)
1439310218984:nparts <- ceiling((length(list)/10))
1439310219127:parts <- split(list, 1:nparts)
1439310221931:info <- getSRAinfo(parts[[i]], sra_con=con)
1439310311802:info <- getSRAinfo(list[i], sra_con=con)
1439310341339:info
1439310367819:for(i in 1:length(list)) {
1439310367984:info <- getSRAinfo(list[i], sra_con=con)
1439310368199:size <- size + sum(as.numeric(info$size))
1439310368727:}
1439310927720:info <- getSRAinfo(list[i], sra_con=con)
1439310935149:i=3
1439310936511:info <- getSRAinfo(list[i], sra_con=con)
1439310952008:size <- 0
1439310953935:size <- size + sum(as.numeric(info$size))
1439310975305:sum(as.numeric(info$size)
1439310978713:)
1439311034800:info[,5]
1439311040811:info[,6]
1439311053415:as.numeric(info[,6])
1439311064999:delevel(info[,6])
1439311113835:drop.levels(info[,6])
1439311134959:droplevels(info[,6])
1439311198973:info$`size(KB)`
1439311217454:droplevels(info$`size(KB)`)
1439311368324:sum(info$`size(KB)`)
1439311388263:sum(as.numeric(droplevels(info$`size(KB)`)))
1439311402042:sum(as.numeric(info$`size(KB)`))
1439311410352:?droplevels
1439311503488:droplevels(info)$`size(KB)`
1439311542559:info[1,6]
1439311589400:c(info[1,6])
1439311605416:as.character(info[1,6])
1439311613175:as.numeric(as.character(info[1,6]))
1439311636128:size <- size + sum(as.numeric(as.character((info[,6]))
1439311639190:)
1439311650064:)
1439311656872:size <- size + sum(as.numeric(as.character(info[,6])))
1439311682808:for(i in 1:5) {
1439311682995:info <- getSRAinfo(list[i], sra_con=con)
1439311683151:size <- size + sum(as.numeric(as.character(info[,6])))
1439311685384:}
1439311704327:size <- 0
1439311704486:for(i in 1:length(list)) {
1439311704665:info <- getSRAinfo(list[i], sra_con=con)
1439311705007:size <- size + sum(as.numeric(as.character(info[,6])))
1439311705407:}
1439312090485:library(doParallel)
1439312149732:foreach(i = 1:length(list)) %dopar% {
1439312149907:info <- getSRAinfo(list[i], sra_con=con)
1439312150057:size <- size + sum(as.numeric(as.character(info[,6])))
1439312150375:}
1439312161498:registerDoParallel(10)
1439312164218:foreach(i = 1:length(list)) %dopar% {
1439312164409:info <- getSRAinfo(list[i], sra_con=con)
1439312164553:size <- size + sum(as.numeric(as.character(info[,6])))
1439312164831:}
1439312668188:size <- 0
1439312668904:foreach(i = 1:length(list)) %dopar% {
1439312669040:info <- getSRAinfo(list[i], sra_con=con)
1439312669185:size <- size + sum(as.numeric(as.character(info[,6])))
1439312669329:print(i)
1439312669455:}
1439314580937:for(i in 1:5) {
1439314581154:info <- getSRAinfo(list[i], sra_con=con)
1439314581327:print(i)
1439314583752:all <- data.frame()
1439314591884:all <- data.frame()
1439314593179:info <- getSRAinfo(list[i], sra_con=con)
1439314596883:for(i in 1:5) {
1439314597032:info <- getSRAinfo(list[i], sra_con=con)
1439314597184:print(i)
1439314598877:all <- rbind(all, info)
1439314599015:}
1439314612948:View(all)
1439314618432:for(i in 1:20) {
1439314618591:info <- getSRAinfo(list[i], sra_con=con)
1439314618749:print(i)
1439314618903:all <- rbind(all, info)
1439314619216:}
1439314676719:size <- sum(as.numeric(as.character(all[,6])))
1439314683748:View(all)
1439314702238:?sum
1439314705885:size <- sum(as.numeric(as.character(all[,6])), na.rm=T)
1439314723609:all <- data.frame()
1439314728634:for(i in 1:length(list)) {
1439314728852:info <- getSRAinfo(list[i], sra_con=con)
1439314729061:print(i)
1439314729263:all <- rbind(all, info)
1439314729607:}
1439314803209:all <- data.frame()
1439314803408:for(i in 1:length(list)) {
1439314803558:info <- getSRAinfo(list[i], sra_con=con)
1439314803712:if(i%10==0) {print(i)}
1439314803974:all <- rbind(all, info)
1439314804327:}
1439314814355:all <- data.frame()
1439314814503:for(i in 1:length(list)) {
1439314814655:info <- getSRAinfo(list[i], sra_con=con)
1439314814886:if(i%10==0) { print(i) }
1439314815102:all <- rbind(all, info)
1439314815357:}
1439314848054:?%%
1439314855349:i%10
1439314859274:i%%10
1439314867916:all <- data.frame()
1439314868095:for(i in 1:length(list)) {
1439314868263:info <- getSRAinfo(list[i], sra_con=con)
1439314868462:if(i%%10 == 0) { print(i) }
1439314868776:all <- rbind(all, info)
1439314869024:}
1439322274879:View(corgen)
1439322304590:library(SRAdb)
1439322500524:gc()
1439322509430:gc()
1439322599714:con <- dbConnect("SREmetadb.sqlite")
1439322654882:sqlfile <- "SRAmetadb.sqlite"
1439323781890:con <- dbConnect(SQLite(), sqlfile)
1439324216911:desc <- colDescriptions(con)
1439324217059:list_nc <- getSRA(search_terms='"ncrna"', sra_con=con, acc_only = T)
1439324217179:list_mi <- getSRA(search_terms='"mirna"', sra_con=con, acc_only = T)
1439324217546:list_rs <- getSRA(search_terms='"rna-seq"', sra_con=con, acc_only = T)
1439324536806:list <- unique(list[,1])
1439324538516:size <- 0
1439324538667:foreach(i = 1:length(list)) %dopar% {
1439324538800:info <- getSRAinfo(list[i], sra_con=con)
1439324539090:size <- size + sum(as.numeric(as.character(info[,6])))
1439324539576:}
1439324555123:for(i in 1:length(list)) {
1439324555618:info <- getSRAinfo(list[i], sra_con=con)
1439324555824:size <- size + sum(as.numeric(as.character(info[,6])))
1439324556250:}
1439324567985:list <- unique(list[,1])
1439324587158:list <- unique(list_nc[,1])
1439324589281:size <- 0
1439324589456:for(i in 1:length(list)) {
1439324589591:info <- getSRAinfo(list[i], sra_con=con)
1439324589943:size <- size + sum(as.numeric(as.character(info[,6])))
1439324590098:}
1439324893447:size <- 0
1439324894368:for(i in 1:length(list)) {
1439324894510:tryCatch({
1439324894800:info <- getSRAinfo(list[i], sra_con=con)
1439324895033:size <- size + sum(as.numeric(as.character(info[,6])))
1439324895367:})
1439324897737:}
1439325155900:list <- unique(list_nc[1:100,1])
1439325159107:size <- 0
1439325159623:for(i in 1:length(list)) {
1439325159791:tryCatch({
1439325159928:info <- getSRAinfo(list[i], sra_con=con)
1439325160077:size <- size + sum(as.numeric(as.character(info[,6])))
1439325160208:})
1439325160495:}
1439325165991:size <- 0
1439325166152:for(i in 1:length(list)) {
1439325166302:tryCatch({
1439325166468:info <- getSRAinfo(list[i], sra_con=con)
1439325166629:size <- size + sum(as.numeric(as.character(info[,6])))
1439325166787:})
1439325167310:}
1439325192343:head(list_nc)
1439325198766:list <- unique(list_nc[1:100,5])
1439325202831:size <- 0
1439325202965:for(i in 1:length(list)) {
1439325203100:tryCatch({
1439325203292:info <- getSRAinfo(list[i], sra_con=con)
1439325203574:size <- size + sum(as.numeric(as.character(info[,6])))
1439325204223:})
1439325204375:}
1439325319782:warnings()
1439326227400:size <- 0
1439326227401:for(i in 1:length(list)) {
1439326227401:tryCatch({
1439326227401:info <- getSRAinfo(list[i], sra_con=con)
1439326227401:size <- size + sum(as.numeric(as.character(info[,6])))
1439326227401:})
1439326227402:}
1439326724986:size <- 0
1439326724986:for(i in 1:length(list)) {
1439326724986:tryCatch({
1439326724987:info <- getSRAinfo(list[i], sra_con=con)
1439326724987:size <- size + sum(as.numeric(as.character(info[,6])))
1439326724987:})
1439326724987:}
1439326906467:for(i in 1:length(list)) {
1439326906670:tryCatch({
1439326906928:info <- getSRAinfo(list[i], sra_con=con)
1439326907164:}
1439326907317:error=function(e) NULL
1439326907562:)
1439326921005:tryCatch({
1439326921162:info <- getSRAinfo(list[i], sra_con=con)
1439326921310:},
1439326921503:error=function(e) NULL
1439326921727:)
1439326923356:size <- size + sum(as.numeric(as.character(info[,6])))
1439326940075:size <- 0
1439326944283:for(i in 1:length(list)) {
1439326944444:tryCatch({
1439326944606:info <- getSRAinfo(list[i], sra_con=con)
1439326944760:},
1439326944928:error=function(e) NULL
1439326945099:)
1439326946734:size <- size + sum(as.numeric(as.character(info[,6])))
1439326946858:}
1439327410251:size <- 0
1439327410416:for(i in 1:length(list)) {
1439327410586:tryCatch({
1439327410735:info <- getSRAinfo(list[i], sra_con=con)
1439327410890:},
1439327411027:error=function(e) NULL
1439327411178:)
1439327411301:print(size)
1439327411458:if(!is.null(size)) {
1439327411608:size <- size + sum(as.numeric(as.character(info[,6])))
1439327411749:}
1439327412085:}
1439327484518:size <- 0
1439327484518:for(i in 1:length(list)) {
1439327484519:tryCatch({
1439327484519:info <- getSRAinfo(list[i], sra_con=con)
1439327484519:},
1439327484519:error=function(e) NULL
1439327484519:)
1439327484520:print(size)
1439327484520:if(!is.na(size)) {
1439327484520:size <- size + sum(as.numeric(as.character(info[,6])))
1439327484520:}
1439327484520:}
1439327647454:all <-data.frame()
1439327702489:all <-data.frame()
1439327703502:for(i in 1:length(list)) {
1439327703778:tryCatch({
1439327703910:info <- getSRAinfo(list[i], sra_con=con)
1439327704055:},
1439327704439:error=function(e) NULL
1439327704627:)
1439327704851:print(all)
1439327705549:#if(dim(size)!=c(1,7)) {
1439327705724:#size <- size + sum(as.numeric(as.character(info[,6])))
1439327705842:#}
1439327706076:all <- rbind(all, info)
1439327706349:}
1439327896782:how.heavy <- function(list) {
1439327896782:list <- unique(list[1:100,5])
1439327896782:# nparts <- ceiling((length(list)/10))
1439327896782:# parts <- split(list, 1:nparts)
1439327896783:all <-data.frame()
1439327896783:size <- 0
1439327896783:for(i in 1:length(list)) {
1439327896783:tryCatch({
1439327896784:info <- getSRAinfo(list[i], sra_con=con)
1439327896784:},
1439327896784:error=function(e) NULL
1439327896784:)
1439327896785:all <- rbind(all, info)
1439327896785:}
1439327896785:return(sum(as.numeric(as.character(all[,6])), na.rm=T))
1439327896785:}
1439327906102:how.heavy(list_nc)
1439327961854:how.heavy(list_nc[1:50,])
1439328078079:approx.size <- function(list) {
1439328078079:list <- unique(list[1:100,5])
1439328078080:# nparts <- ceiling((length(list)/10))
1439328078080:# parts <- split(list, 1:nparts)
1439328078080:all <-data.frame()
1439328078080:size <- 0
1439328078080:for(i in 1:length(list)) {
1439328078081:tryCatch({
1439328078081:info <- getSRAinfo(list[i], sra_con=con)
1439328078081:},
1439328078081:error=function(e) NULL
1439328078082:)
1439328078082:all <- rbind(all, info)
1439328078082:}
1439328078082:return(sum(as.numeric(as.character(all[,6])), na.rm=T))
1439328078083:}
1439328112974:desc
1439328120303:head(desc)
1439393123533:library(doParallel)
1439393123748:library(SRAdb)
1439393346832:desc[desc[,1]=="submission",]
1439393363135:head(desc[,1])
1439393373604:desc[desc[,2]=="submission",]
1439393403794:desc[,3]
1439393565616:dbGetQuery(con, "DRX000468")
1439393603416:con <- dbConnect(SQLite, sqlfile)
1439393613069:con <- dbConnect(SQLite(), sqlfile)
1439393616401:dbGetQuery(con, "DRX000468")
1439393624623:dbGetQuery(con, list("DRX000468")
1439393626659:)
1439393844490:?getSRA
1439395496920:desc[,6]
1439395819082:dbListFields(con)
1439395829973:dbListFields(sra_con=con)
1439395840308:dbListFields(con, "submission")
1439395853324:dbListTables(con)
1439396167206:desc[,3]
1439396240702:dbGetQuery(con, select taxon_id, count(*) from experiment)
1439396248782:dbGetQuery(con, "select taxon_id, count(*) from experiment")
1439396262894:desc[,2:3]
1439396352126:dbGetQuery(con, "select taxon_id, count(*) from sample")
1439396394365:dbGetQuery(con, "select taxon_id, count(*) from sample, group by taxon_id")
1439396402604:dbGetQuery(con, "select taxon_id, count(*) from sample group by taxon_id")
1439396441372:View(desc[,c(2,3,6)]
1439396443179:)
1439396454494:View(desc)
1439396458483:rm(descx)
1439406537020:dbGetQuery(con, "select common_name, count(*) from sample group by common_name")
1439407066603:dbGetQuery(con, "select common_name, count(*) from sample where "common name like 'Homo%' group by common_name")
1439407077948:dbGetQuery(con, "select common_name, count(*) from sample where common name like 'Homo%' group by common_name")
1439407088555:dbGetQuery(con, "select common_name, count(*) from sample where common name like 'Homo%'")
1439407125120:dbGetQuery(con, "select common_name, from sample where common name like 'Homo%'")
1439407130637:dbGetQuery(con, "select common_name from sample where common name like 'Homo%'")
1439407143170:dbGetQuery(con, "select common_name, count(*) from sample where common_name like 'Homo%' group by common_name")
1439407155668:dbGetQuery(con, "select common_name, count(*) from sample where common_name like 'Human%' group by common_name")
1439407697969:dbGetQuery(con, "select taxon_id, count(*) from sample where taxon_id like 9606 group by taxon_id")
1439407892344:dbGetQuery(con, "select taxon_id, count(*) from sample where taxon_id like 9606 group by common_name")
1439407915705:dbGetQuery(con, "select common_name, count(*) from sample where taxon_id like 9606 group by common_name")
1439408232635:dbGetQuery(con, "select abstract, from sample where common_name like SO.410F")
1439408238931:dbGetQuery(con, "select abstract from sample where common_name like SO.410F")
1439408256719:dbGetQuery(con, "select abstract from sample where common_name like 'ESO.410F'")
1439408269378:dbGetQuery(con, "select abstract from study where common_name like 'ESO.410F'")
1439408306594:dbGetQuery(con, "select study_abstract from study where common_name like 'ESO.410F'")
1439408320828:dbGetQuery(con, "select study_abstract from study where common_name like 'ESO.410F' from sample")
1439408337445:dbGetQuery(con, "select study_abstract from study where common_name from sample like 'ESO.410F'")
1439408343357:dbGetQuery(con, "select study_abstract from study, where common_name from sample like 'ESO.410F'")
1439409096572:dbGetQuery(con, "select taxon_id, count(*) from sample group by taxon_id")
1439409120795:dbGetQuery(con, "select taxon_id, count(*) from sample where taxon_id like 9606")
1439409943944:dbGetQuery(con, "select scientific_name, count(*) from sample where scientific_name like 'Homo sapiens'")
1439409972603:dbGetQuery(con, "select scientific_name, count(*) from sample where scientific_name like 'Homo sapiens' group by scientific_name")
1439410529679:rs <- getSRA(search_terms='Organism: Homo sapiens', out_types=c('study'))
1439410539500:rs <- getSRA(con, search_terms='Organism: Homo sapiens', out_types=c('study'))
1439410553284:ehad(rs)
1439410557171:head(rs)
1439410561927:View(rs)
1439410670727:rs <- getSRA(con, search_terms='scientific_name: Homo sapiens', out_types=c('study'))
1439411380219:rs <- getSRA(con, search_terms='scientific_name:Homo sapiens', out_types=c('study'))
1439411602352:rs <- getSRA(con, search_terms='Homo sapiens', out_types=c('study'))
1439411769722:rs <- getSRA(con, search_terms='taxon_id: 9606', out_types=c('study'))
1439412318159:hs <-dbGetQuery(con, "select scientific_name from sample where scientific_name like 'Homo sapiens'")
1439412327080:head(hs)
1439412374044:hs <-dbGetQuery(con, "select from sample where scientific_name like 'Homo sapiens'")
1439412379902:hs <-dbGetQuery(con, "from sample where scientific_name like 'Homo sapiens'")
1439412388769:hs <-dbGetQuery(con, "select (*) from sample where scientific_name like 'Homo sapiens'")
1439412393631:hs <-dbGetQuery(con, "select * from sample where scientific_name like 'Homo sapiens'")
1439412404854:View(hs)
1439412486999:sum(hs$taxon_id=="9606")
1439412521583:View(hs[which(hs$taxon_id!="9606")])
1439412526246:View(hs[which(hs$taxon_id!="9606",)])
1439412535220:View(hs[which(hs$taxon_id!="9606"),])
1439412708620:hs <-dbGetQuery(con, "select * from sample where scientific_name like 'Homo sapiens' where taxoin_id like 9606")
1439412720850:hs <-dbGetQuery(con, "select * from sample where scientific_name like 'Homo sapiens', taxoin_id like 9606")
1439412835035:orgnsm <-'Homo sapiens'
1439412837347:hs <-dbGetQuery(con, "select * from sample where scientific_name like orgnsm")
1439412912412:organism <-'Homo sapiens'
1439412919845:hs <-dbGetQuery(con, paste("select * from sample where scientific_name like '", organism, "'"))
1439412936434:hs <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439413576844:View(hs[grepl(9606, hs),])
1439414053753:sqlfile <- "SRAmetadb.sqlite"
1439414053915:con <- dbConnect(SQLite(), sqlfile)
1439414056546:library(SRAdb)
1439414471464:organism <-'Homo sapiens'
1439414477991:hs <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439414621403:View(hs[grepl("9606", hs$taxon_id), ])
1439414629762:nrow(hs[grepl("9606", hs$taxon_id), ])
1439414738559:View(hs[grepl("Meta|meta", hs$taxon_id), ])
1439414769847:View(hs[grepl("Meta|meta", hs$description), ])
1439414793178:View(hs[grepl("Metagenomic|metagenomic", hs$description), ])
1439414848901:hs <- hs[-grepl("Metagenomic|metagenomic", hs$description), ]
1439414859523:hs <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439414873329:hs <- hs[-grepl("Metagenomic|metagenomic", hs$description), ]
1439414875888:hs <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439414908438:grepl("Metagenomic|metagenomic", hs$description)
1439414914400:hs <- hs[!(grepl("Metagenomic|metagenomic", hs$description)), ]
1439414934444:View(list_nc)
1439415619359:View(hs)
1439415714985:getSRAinfo("SRS594728")
1439415720845:getSRAinfo("SRS594728", sra_con=con)
1439415779245:View(list_mi)
1439415789208:getSRAinfo("DRR000561", sra_con=con)
1439416592127:getSRAinfo("DRS000011", sra_con=con)
1439416611272:getSRAinfo("SRS470890", sra_con=con)
1439416653897:getSRAinfo("SRS469369", sra_con=con)
1439482442188:library(SRAdb)
1439483240722:organism <-'Homo sapiens'
1439483258963:sqlfile <- SRAmetadb.sqlite
1439483262929:sqlfile <- "SRAmetadb.sqlite"
1439483277010:con <- dbConnect(SQLite(), sqlfile)
1439483344775:hs <- dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439483365907:hs <- hs[!(grepl("Metagenomic|metagenomic", hs$description)), ]
1439483369475:View(hs)
1439483381847:save.image("/mnt/DATAPART1/rnaseq/0.RData")
1439483468408:View(hs[!(grepl("reference", hs$description)), ])
1439483592025:View(hs[(grepl("reference", hs$description)), ])
1439483629699:View(hs[(grepl("rna|Rna|RNA", hs$description)), ])
1439484348871:hs <- dbGetQuery(con, paste0("select * from sample natural join experiment where scientific_name like '", organism, "'"))
1439484380594:hs <- dbGetQuery(con, paste0("select * from sample natural join where scientific_name like '", organism, "'"))
1439484392840:hs <- dbGetQuery(con, paste0("select * from sample join experiment where scientific_name like '", organism, "'"))
1439487546613:load("/mnt/DATAPART1/rnaseq/0.RData")
1439487561713:load("/mnt/DATAPART1/rnaseq/0.RData")
1439487568783:library(SRAdb)
1439487569910:sqlfile <- "SRAmetadb.sqlite"
1439487570004:con <- dbConnect(SQLite(), sqlfile)
1439487685216:hs <-dbGetQuery(con, paste0("select * from sample cross join experiment))
1439487687801:)
1439487693261:hs <-dbGetQuery(con, paste0("select * from sample cross join experiment"))
1439488238529:save.image("/mnt/DATAPART1/rnaseq/.RData")
1439488243081:sqlfile <- "SRAmetadb.sqlite"
1439488243222:con <- dbConnect(SQLite(), sqlfile)
1439488247422:desc <- colDescriptions(con)
1439488254749:library(SRAdb)
1439488258546:desc <- colDescriptions(con)
1439488280661:dbListTables(con)
1439488307631:dbListFields(con, "study")
1439488326423:dbListFields(con, "experiment")
1439488358252:dbListFields(con, "experiment") %in% dbListFields(con,"study")
1439488550232:dbListFields(con, "experiment") %in% dbListFields(con,"sample")
1439488662185:hs <- dbGetQuery(con, "select * from sample cross join experiment on submission_accession")
1439488683628:hs <- dbGetQuery(con, "select * from sample cross join experiment on sample.submission_accession = experiment.submission_accession")
1439489894570:library(SRAdb)
1439489896722:sqlfile <- "SRAmetadb.sqlite"
1439489896875:con <- dbConnect(SQLite(), sqlfile)
1439489897905:desc <- colDescriptions(con)
1439489907318:save.image("/mnt/DATAPART1/rnaseq/.RData")
1439489917682:exper <- dbGetQuery(con, "select * from experiment")
1439489971485:organism <-'Homo sapiens' #human, mouse...
1439489973667:hs <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439489984171:View(exper)
1439489988958:View(hs)
1439490145143:?merge
1439490398694:hs <- merge(hs_all, exper, by=submission_accession, sort=F)
1439490400706:hs_all <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439490405073:hs_all <- hs_all[!(grepl("Metagenomic|metagenomic", hs$description)), ] # also?: reference (no),
1439490408723:hs <- merge(hs_all, exper, by=submission_accession, sort=F)
1439490422216:hs <- merge(hs_all, exper, by="submission_accession", sort=F)
1439491116243:exper <- dbGetQuery(con, "select * from experiment")
1439491116886:sampl <- dbGetQuery(con, "select * from sample")
1439491119649:library(SRAdb)
1439491121537:sqlfile <- "SRAmetadb.sqlite"
1439491121656:con <- dbConnect(SQLite(), sqlfile)
1439491123011:desc <- colDescriptions(con)
1439491124072:exper <- dbGetQuery(con, "select * from experiment")
1439491153163:sampl <- dbGetQuery(con, "select * from sample")
1439491175240:sum(exper$submission_accession == sampl$submission_accession)
1439491285782:View(exper)
1439491286619:View(sampl)
1439491430325:hs_all <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439491434465:organism <-'Homo sapiens' #human, mouse...
1439491438225:hs_all <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439491440714:hs_all <- hs_all[!(grepl("Metagenomic|metagenomic", hs$description)), ] # also?: reference (no),
1439491452290:hs_all <- hs_all[!(grepl("Metagenomic|metagenomic", hs_all$description)), ] # also?: reference (no),
1439491500342:exper <- exper[exper$submission_accession %in% hs$submission_accession, ]
1439491508549:exper <- exper[exper$submission_accession %in% hs_all$submission_accession, ]
1439491534409:save.image("/mnt/DATAPART1/rnaseq/.RData")
1439491558696:hs <- merge(hs_all, exper, by="submission_accession", sort=F)
1439492147464:library(SRAdb)
1439492150005:library(doParallel)
1439492150728:registerDoParallel(10)
1439492224947:?split
1439492258737:hs_spl <- split(hs, 100)
1439492263621:hs_spl <- split(hs_all, 100)
1439492280748:head(hs[[1]])
1439492284772:head(hs_spl[[1]])
1439492294064:View(hs_spl[[1]])
1439492427908:?split
1439492550385:x <- hs_all[1:100, 5]
1439492555199:x <- hs_all[1:100, 6]
1439492565293:split(x, 10)
1439492591774:split(x, 1:10)
1439492596532:hs_spl <- split(hs_all, 1:100)
1439492606038:hs_spl[[1]]
1439492785787:View(hs_spl[[1]])
1439492921567:lapply parallel
1439493102592:hs <- data.frame()
1439493649247:library(SRAdb)
1439493692281:hs <- data.frame()
1439493693627:mclapply(hs_spl, function(x) {
1439493693868:x <- merge(x, exper, by="submission_accession", sort=F)
1439493694026:hs <- rbind(hs, x)
1439493694416:})
1439493704038:library(doParallel)
1439493705040:registerDoParallel(10)
1439493777315:mclapply(hs_spl, function(x) {print(x[1,])})
1439493796856:hs <- data.frame()
1439493796856:mclapply(hs_spl, function(x) {
1439493796856:x <- merge(x, exper, by="submission_accession", sort=F)
1439493796857:hs <- rbind(hs, x)
1439493796857:})
1439494006448:##
1439494006448:library(doParallel)
1439494006551:library(SRAdb)
1439494007697:regi
1439494042695:hs <- merge(hs_all[[1]], exper, by="submission_accession", sort=F)
1439494054048:hs <- merge(hs_spl[[1]], exper, by="submission_accession", sort=F)
1439494079558:View(hs)
1439494099880:?merge
1439494202859:getOption("mc.cores", 2L)
1439494297793:hs_spl <-hs_spl[1:10]
1439494302937:hs <- data.frame()
1439494303583:mclapply(hs_spl, mc.cores=10, function(x) {
1439494303769:x <- merge(x, exper, by="submission_accession", sort=F)
1439494303935:hs <- rbind(hs, x) #accessing at the same time...?
1439494304252:})
1439495657172:library(doParallel)
1439495657278:library(SRAdb)
1439495658421:registerDoParallel(10)
1439495658474:sqlfile <- "SRAmetadb.sqlite"
1439495658602:con <- dbConnect(SQLite(), sqlfile)
1439495662465:organism <-'Homo sapiens' #human, mouse...
1439496594936:?rand
1439496597527:?randn
1439563801298:system.time(merge(hs_spl[[1]], exper, by="submission_accession", sort=F)
1439563804323:)
1439563834852:nrow(hs_split[[1]])
1439563838136:nrow(hs_spl[[1]])
1439563995328:for(i in 1:2000)
1439564000397:?rep
1439564061817:?seq
1439564098791:for(i in seq(1, 2000, 1000) {}
1439564104511:for(i in seq(1, 2000, 1000) {print(i_)}
1439564106461:for(i in seq(1, 2000, 1000) {print(i)}
1439564114947:for(i in seq(1, 2000, 1000)) { print(i) }
1439564126536:for(i in seq(1, 2000, 1000)) {
1439564133987:times <- NULL
1439564219298:for(i in seq(1, 2000, 1000)) {
1439564219298:times <- rbind(times, system.time(hs_spl[[1]][1:i]))
1439564230236:times <- NULL
1439564277807:for(i in seq(1, 2000, 1000)) {
1439564277807:times <- rbind(times, system.time(merge(hs_spl[[1]][1:i], exper, by="submission_accesion", sort=F))
1439564279619:}
1439564286214:for(i in seq(1, 2000, 1000)) {
1439564286214:times <- rbind(times, system.time(merge(hs_spl[[1]][1:i], exper, by="submission_accesion", sort=F)))
1439564286215:}
1439564315909:hs_spl[[1]][1:10]
1439564322448:hs_spl[[1]][1:10,]
1439564329785:for(i in seq(1, 2000, 1000)) {
1439564329785:times <- rbind(times, system.time(merge(hs_spl[[1]][1:i,], exper, by="submission_accesion", sort=F)))
1439564329785:}
1439564337202:for(i in seq(1, 2000, 1000)) {
1439564337202:times <- rbind(times, system.time(merge(hs_spl[[1]][1:i,], exper, by="submission_accession", sort=F)))
1439564337202:}
1439564357663:sequ <- seq(1, 2000, 1000)
1439564366038:plot(sequ, times)
1439564369383:View(times)
1439564381955:for(i in seq(1, 2000, 10)) {
1439564381956:times <- rbind(times, system.time(merge(hs_spl[[1]][1:i,], exper, by="submission_accession", sort=F)))
1439564381956:}
1439564755414:?sample
1439565018523:plot(sequ, times[,1])
1439565053225:plot(seq(1, 2000, 10), times[,1])
1439565071688:sequ <- seq(1,2000,10)
1439565085723:times <- times[,-1]
1439565102055:times <- times[-1,]
1439565104948:times <- times[-1,]
1439565111131:View(times)
1439565115898:times <- times[,2]
1439565128310:plot(sequ, times)
1439565149482:library(ggplot2)
1439565162814:qplot(sequ, times)
1439565284095:hs <- mclapply(hs_spl, mc.cores=10, function(x) {
1439565284095:x <- merge(x, exper, by="submission_accession", sort=F)
1439565284096:})
1439565287711:library(doParallel)
1439565287830:library(SRAdb)
1439565288917:registerDoParallel(10)
1439565294775:hs <- mclapply(hs_spl, mc.cores=10, function(x) {
1439565294775:x <- merge(x, exper, by="submission_accession", sort=F)
1439565294775:})
1439566458578:library(doParallel)
1439566458735:library(SRAdb)
1439566459874:registerDoParallel(10)
1439566645653:list_nc <- getSRA(search_terms='"ncrna"', sra_con=con, acc_only = T)
1439566651734:sqlfile <- "SRAmetadb.sqlite"
1439566651983:con <- dbConnect(SQLite(), sqlfile)
1439566652319:desc <- colDescriptions(con)
1439566657400:list_nc <- getSRA(search_terms='"ncrna"', sra_con=con, acc_only = T)
1439566665910:View(list_nc)
1439566711570:View(exper)
1439566712988:View(sampl)
1439566897215:?"dbGetQuery"
1439567068256:x<- exper[exper$submission_accession %in% hs_all[[1]],]
1439573465053:x<- exper[exper$submission_accession %in% hs_all[[1]]$submission_accession,]
1439830847314:View(hs_all)
1439830962953:list_rna <- unique(rbind(list_nc, list_mi, list_rs))
1439830968917:list_nc <- getSRA(search_terms='"ncrna"', sra_con=con, acc_only = T) #runs
1439830969147:list_mi <- getSRA(search_terms='"mirna"', sra_con=con, acc_only = T)
1439830969466:list_rs <- getSRA(search_terms='"rna-seq"', sra_con=con, acc_only = T)
1439830974060:library(doParallel)
1439830974221:library(SRAdb)
1439830975278:registerDoParallel(10)
1439830978795:sqlfile <- "SRAmetadb.sqlite"
1439830978953:con <- dbConnect(SQLite(), sqlfile)
1439830981103:desc <- colDescriptions(con)
1439830983944:hs_all <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439830990057:hs_all <- hs_all[!(grepl("Metagenomic|metagenomic", hs_all$description)), ] # also?: reference (no),
1439830990441:exper <- dbGetQuery(con, "select * from experiment")
1439831013482:exper <- exper[exper$submission_accession %in% hs_all$submission_accession, ]
1439831015271:list_nc <- getSRA(search_terms='"ncrna"', sra_con=con, acc_only = T) #runs
1439831018127:list_mi <- getSRA(search_terms='"mirna"', sra_con=con, acc_only = T)
1439831036105:list_rs <- getSRA(search_terms='"rna-seq"', sra_con=con, acc_only = T)
1439831112146:list_rna <- unique(rbind(list_nc, list_mi, list_rs))
1439831112734:list_rna <- unique(rbind(list_nc, list_mi, list_rs))
1439831159170:View(hs_all)
1439831167253:View(list_rna)
1439831182500:View(hs_all)
1439831408561:hs <- hs_all[hs_all$sample_accession %in% list_rna$accession]
1439831410841:View(hs)
1439833526107:hs <- hs_all$sample_accession %in% list_rna$accession
1439833547209:hs <- hs$sample_accessions[hs_all$sample_accession %in% list_rna$accession]
1439833555657:hs <- hs_all$sample_accessions[hs_all$sample_accession %in% list_rna$accession]
1439833569971:hs <- hs_all$sample_accession[hs_all$sample_accession %in% list_rna$accession]
1439833581543:hs <- hs_all$sample_accession
1439833611232:hs <- [hs %in% list_rna$accession]
1439833617105:hs <- hs[hs %in% list_rna$accession]
1439833628191:sum(hs %in% list_rna$accession)
1439833697628:hs <- hs[hs %in% list_rna$sample]
1439833710969:hs <- hs_all$sample_accession
1439833747095:sum(hs %in% list_rna$sample)
1439833755641:hs(hs %in% list_rna$sample)
1439833762070:hs{(hs %in% list_rna$sample)}
1439833771743:hs[hs %in% list_rna$sample]
1439833790398:hs <- hs[hs %in% list_rna$sample]
1439833846566:hs_subset <- sample(nrow(hs), size=20)
1439833861641:hs_subset <- sample(hs, size=20)
1439834240318:approx.size <- function(list) {
1439834240318:list <- unique(list[1:100,5])
1439834240319:# nparts <- ceiling((length(list)/10))
1439834240319:# parts <- split(list, 1:nparts)
1439834240319:all <-data.frame()
1439834240320:size <- 0
1439834240320:for(i in 1:length(list)) {
1439834240320:tryCatch({
1439834240320:info <- getSRAinfo(list[i], sra_con=con)
1439834240320:},
1439834240321:error=function(e) NULL
1439834240321:)
1439834240321:all <- rbind(all, info)
1439834240321:}
1439834240322:return(sum(as.numeric(as.character(all[,6])), na.rm=T))
1439834240322:}
1439834254966:approx.size(hs_subset)
1439834273826:# get approximaete size list is a vecotr of accession numbers
1439834273826:approx.size <- function(list) {
1439834273826:# list <- unique(list[1:100,5])
1439834273826:# nparts <- ceiling((length(list)/10))
1439834273826:# parts <- split(list, 1:nparts)
1439834273827:all <-data.frame()
1439834273827:size <- 0
1439834273827:for(i in 1:length(list)) {
1439834273827:tryCatch({
1439834273828:info <- getSRAinfo(list[i], sra_con=con)
1439834273828:},
1439834273828:error=function(e) NULL
1439834273828:)
1439834273828:all <- rbind(all, info)
1439834273829:}
1439834273829:return(sum(as.numeric(as.character(all[,6])), na.rm=T))
1439834273829:}
1439834278016:approx.size(hs_subset)
1439834309193:# get approximaete size list is a vecotr of accession numbers
1439834309193:approx.size <- function(list) {
1439834309193:# list <- unique(list[1:100,5])
1439834309194:# nparts <- ceiling((length(list)/10))
1439834309194:# parts <- split(list, 1:nparts)
1439834309194:all <-data.frame()
1439834309194:size <- 0
1439834309195:for(i in 1:length(list)) {
1439834309195:tryCatch({
1439834309195:info <<- getSRAinfo(list[i], sra_con=con)
1439834309195:},
1439834309195:error=function(e) NULL
1439834309196:)
1439834309196:all <- rbind(all, info)
1439834309196:}
1439834309196:return(sum(as.numeric(as.character(all[,6])), na.rm=T))
1439834309197:}
1439834333061:approx.size <- function(list) {
1439834333061:# list <- unique(list[1:100,5])
1439834333061:# nparts <- ceiling((length(list)/10))
1439834333062:# parts <- split(list, 1:nparts)
1439834333062:all <-data.frame()
1439834333062:size <- 0
1439834333062:for(i in 1:length(list)) {
1439834333063:tryCatch({
1439834333063:info <- getSRAinfo(list[i], sra_con=con)
1439834333063:all <- rbind(all, info)
1439834333063:},
1439834333063:error=function(e) NULL
1439834333064:)
1439834333064:}
1439834333064:return(sum(as.numeric(as.character(all[,6])), na.rm=T))
1439834333064:}
1439834337191:approx.size(hs_subset)
1439834628852:View(exper)
1439834984843:list_pa <- getSRA(search_terms='poly(A) OR polyadenylation OR polyadenylated', sra_con=con, acc_only = T) #runs
1439834994201:View(list_pa)
1439835003441:View(exper)
1439835003518:View(exper)
1439835064991:list_pa <- list_pa$experiment
1439835161531:list_pa <- exper[exper$experiment_accession %in% list_pa]
1439835165476:list_pa <- getSRA(search_terms='poly(A) OR polyadenylation OR polyadenylated', sra_con=con, acc_only = T)
1439835165947:list_pa <- list_pa$experiment
1439835169998:list_pa <- exper[exper$experiment_accession %in% list_pa,]
1439835173241:View(list_pa)
1439835173343:View(list_pa)
1439835641431:list_pa <- getSRA(search_terms='"poly(A)" OR polyadenylation OR polyadenylated', sra_con=con, acc_only = T)
1439835641952:list_pa <- list_pa$experiment
1439835642497:list_pa <- exper[exper$experiment_accession %in% list_pa,]
1439835803193:list_pa <- getSRA(search_terms='"poly(A)" OR "poly-A" OR polyadenylation OR polyadenylated', sra_con=con, out_types=c("experiment"))
1439835806674:View(list_pa)
1439835962898:list_pa <- getSRA(search_terms='strand', sra_con=con, out_types=c("experiment"))
1439835969851:View(list_pa)
1439836032768:list_pa <- list_pa[list_pa %in% hs]
1439836074972:list_pa <- getSRA(search_terms='"poly(A)" OR "poly-A" OR polyadenylation OR polyadenylated', sra_con=con, out_types=c("experiment"))
1439836076769:list_pa <- list_pa$experiment
1439836080268:list_pa <- list_pa[list_pa %in% hs]
1439836094519:list_pa <- getSRA(search_terms='"poly(A)" OR "poly-A" OR polyadenylation OR polyadenylated', sra_con=con, out_types=c("experiment"))
1439836103603:list_pa <- list_pa$sample
1439836104543:list_pa <- list_pa[list_pa %in% hs]
1439836109453:list_pa <- getSRA(search_terms='"poly(A)" OR "poly-A" OR polyadenylation OR polyadenylated', sra_con=con, out_types=c("experiment"))
1439836110410:list_pa <- list_pa$sample
1439836121691:head(list_pa)
1439836127066:head(hs)
1439836147083:sum(hs %in% list_pa)
1439836168092:sum(list_pa %in% hs)
1439836240492:list_pa <- getSRA(search_terms='("poly(A)" OR "poly-A" OR polyadenylation OR polyadenylated) AND rna', sra_con=con, out_types=c("experiment"))
1439836249098:View(list_pa)
1439836579566:rm(exper)
1439836584996:rm(x)
1439836793619:dbGetQuery(con, "select (*) from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq'")
1439836805676:dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq'")
1439836857820:lib_strat <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq'")
1439836888316:View(lib_strat)
1439837145120:hs_lib_stat <- lib_strat[lib_strat$sample_accession %in% hs, ]
1439837154766:View(hs_lib_stat)
1439837573977:hs_lib_strat <- lib_strat[lib_strat$sample_accession %in% hs, ]
1439837582416:rm(hs_lib_stat)
1439837604316:View(hs_lib_strat)
1439837674227:hs_lib_strat[grepl("strand", hs_lib_strat)]
1439837908350:View(hs_lib_strat[grepl("strand", hs_lib_strat)])
1439838181628:View(hs_lib_strat[grepl("strand", hs_lib_strat),])
1439838383615:levels(exper$db_updated)
1439838400543:exper <- dbGetQuery(con, "select * from experiment")
1439838426419:levels(exper$db_updated)
1439838443766:unique(exper$db_updated)
1439838459572:unique(exper$sradb_updated)
1439838607112:list_hs <- hs_all$sample_accession
1439838890523:View(lib_strat)
1439839010871:tail(unique(exper$sradb_updated))
1439839113100:subset <- sample(hs_lib_strat, size=200)
1439839129141:0
1439839136929:View(hs_lib_strat)
1439839168547:subset <- sample(unique(hs_lib_strat$sample_accession), size=200)
1439839184366:approx.size(subset)
1439839412444:# get approximaete size list is a vecotr of accession numbers
1439839412444:approx.size <- function(list) {
1439839412444:# list <- unique(list[1:100,5])
1439839412444:# nparts <- ceiling((length(list)/10))
1439839412445:# parts <- split(list, 1:nparts)
1439839412445:all <-data.frame()
1439839412445:size <- 0
1439839412445:nfiles <- 0
1439839412445:for(i in 1:length(list)) {
1439839412446:nfiles <- nfiles+1
1439839412446:tryCatch({
1439839412446:info <- getSRAinfo(list[i], sra_con=con)
1439839412446:all <- rbind(all, info)
1439839412447:},
1439839412447:error=function(e) NULL
1439839412447:)
1439839412447:}
1439839412448:return(c(sum(as.numeric(as.character(all[,6])), na.rm=T)), nfiles)
1439839412448:}
1439839418190:approx.size(subset)
1439839457733:# get approximaete size list is a vecotr of accession numbers
1439839457734:approx.size <- function(list) {
1439839457734:# list <- unique(list[1:100,5])
1439839457734:# nparts <- ceiling((length(list)/10))
1439839457734:# parts <- split(list, 1:nparts)
1439839457734:all <-data.frame()
1439839457735:size <- 0
1439839457735:for(i in 1:length(list)) {
1439839457735:tryCatch({
1439839457735:info <- getSRAinfo(list[i], sra_con=con)
1439839457735:all <- rbind(all, info)
1439839457736:},
1439839457736:error=function(e) NULL
1439839457736:)
1439839457736:}
1439839457737:return(c(sum(as.numeric(as.character(all[,6])), na.rm=T)), nrow(all))
1439839457737:}
1439839461867:approx.size(subset)
1439839691604:subset2 <- sample(unique(hs_lib_strat$sample_accession), size=20)
1439839696991:approx.size(subset2)
1439839706899:approx.size <- function(list) {
1439839706899:# list <- unique(list[1:100,5])
1439839706899:# nparts <- ceiling((length(list)/10))
1439839706899:# parts <- split(list, 1:nparts)
1439839706900:all <-data.frame()
1439839706900:size <- 0
1439839706900:for(i in 1:length(list)) {
1439839706900:tryCatch({
1439839706901:info <- getSRAinfo(list[i], sra_con=con)
1439839706901:all <- rbind(all, info)
1439839706901:},
1439839706901:error=function(e) NULL
1439839706901:)
1439839706902:}
1439839706902:return(data.frame(sum(as.numeric(as.character(all[,6])), na.rm=T)), nrow(all))
1439839706902:}
1439839710619:approx.size(subset2)
1439839788396:# get approximaete size list is a vecotr of accession numbers
1439839788396:approx.size <- function(list) {
1439839788396:# list <- unique(list[1:100,5])
1439839788396:# nparts <- ceiling((length(list)/10))
1439839788396:# parts <- split(list, 1:nparts)
1439839788397:all <-data.frame()
1439839788397:size <- 0
1439839788397:for(i in 1:length(list)) {
1439839788397:tryCatch({
1439839788398:info <- getSRAinfo(list[i], sra_con=con)
1439839788398:all <- rbind(all, info)
1439839788398:},
1439839788398:error=function(e) NULL
1439839788398:)
1439839788399:}
1439839788399:res <- data.frame(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)
1439839788399:return(res)
1439839788400:}
1439839800079:# get approximaete size list is a vecotr of accession numbers
1439839800079:approx.size <- function(list) {
1439839800079:# list <- unique(list[1:100,5])
1439839800080:# nparts <- ceiling((length(list)/10))
1439839800080:# parts <- split(list, 1:nparts)
1439839800080:all <-data.frame()
1439839800080:size <- 0
1439839800081:for(i in 1:length(list)) {
1439839800081:tryCatch({
1439839800081:info <- getSRAinfo(list[i], sra_con=con)
1439839800081:all <- rbind(all, info)
1439839800081:},
1439839800082:error=function(e) NULL
1439839800082:)
1439839800082:}
1439839800083:res <- data.frame(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all))
1439839800083:return(res)
1439839800083:}
1439839802239:# get approximaete size list is a vecotr of accession numbers
1439839802239:approx.size <- function(list) {
1439839802240:# list <- unique(list[1:100,5])
1439839802240:# nparts <- ceiling((length(list)/10))
1439839802240:# parts <- split(list, 1:nparts)
1439839802240:all <-data.frame()
1439839802240:size <- 0
1439839802241:for(i in 1:length(list)) {
1439839802241:tryCatch({
1439839802241:info <- getSRAinfo(list[i], sra_con=con)
1439839802241:all <- rbind(all, info)
1439839802242:},
1439839802242:error=function(e) NULL
1439839802242:)
1439839802242:}
1439839802243:res <- data.frame(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all))
1439839802243:return(res)
1439839802243:}
1439839811591:approx.size(subset2)
1439839868242:approx.size <- function(list) {
1439839868242:# list <- unique(list[1:100,5])
1439839868242:# nparts <- ceiling((length(list)/10))
1439839868243:# parts <- split(list, 1:nparts)
1439839868243:all <-data.frame()
1439839868243:size <- 0
1439839868243:for(i in 1:length(list)) {
1439839868244:tryCatch({
1439839868244:info <- getSRAinfo(list[i], sra_con=con)
1439839868244:all <- rbind(all, info)
1439839868244:},
1439839868244:error=function(e) NULL
1439839868245:)
1439839868245:}
1439839868245:res <- matrix(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all))
1439839868245:return(res)
1439839868246:}
1439839874566:approx.size(subset2)
1439839920876:# get approximaete size list is a vecotr of accession numbers
1439839920877:approx.size <- function(list) {
1439839920877:# list <- unique(list[1:100,5])
1439839920877:# nparts <- ceiling((length(list)/10))
1439839920877:# parts <- split(list, 1:nparts)
1439839920877:all <-data.frame()
1439839920878:size <- 0
1439839920878:for(i in 1:length(list)) {
1439839920878:tryCatch({
1439839920878:info <- getSRAinfo(list[i], sra_con=con)
1439839920878:all <- rbind(all, info)
1439839920879:},
1439839920879:error=function(e) NULL
1439839920879:)
1439839920880:}
1439839920880:res <- matrix(c(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)))
1439839920880:return(res)
1439839920880:}
1439839924366:approx.size(subset2)
1439839961097:list <- subset2
1439839964424:all <-data.frame()
1439839964726:size <- 0
1439839965995:for(i in 1:length(list)) {
1439839966173:tryCatch({
1439839966324:info <- getSRAinfo(list[i], sra_con=con)
1439839966500:all <- rbind(all, info)
1439839966816:},
1439839966973:error=function(e) NULL
1439839967126:)
1439839967293:}
1439839974619:res <- matrix(c(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)))
1439839990567:View(all)
1439839996301:all <-data.frame()
1439840002655:for(i in 1:length(list)) {
1439840002876:tryCatch({
1439840003093:info <- getSRAinfo(list[i], sra_con=con)
1439840008142:all <- rbind(all, info)
1439840008416:},
1439840009166:error=function(e) NULL
1439840009423:)
1439840010373:}
1439840047397:View(all)
1439840089924:getSRAinfo(list[i], con)
1439840097275:getSRAinfo(list[i], con)
1439840100027:getSRAinfo(list[i], con)
1439840102418:getSRAinfo(list[i], con)
1439840166004:View(all)
1439840171474:res <- matrix(c(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)))
1439840186292:approx.size <- function(list) {
1439840186292:# list <- unique(list[1:100,5])
1439840186292:# nparts <- ceiling((length(list)/10))
1439840186292:# parts <- split(list, 1:nparts)
1439840186293:all <-data.frame()
1439840186293:size <- 0
1439840186293:for(i in 1:length(list)) {
1439840186293:tryCatch({
1439840186294:info <- getSRAinfo(list[i], sra_con=con)
1439840186294:all <- rbind(all, info)
1439840186294:},
1439840186294:error=function(e) NULL
1439840186294:)
1439840186295:}
1439840186295:res <- matrix(c(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)))
1439840186295:return(res)
1439840186295:}
1439840199666:approx.size(subset2)
1439840231966:approx.size(subset2)
1439840264054:approx.size(subset)
1439840486702:subset <- sample(hs_lib_strat, size=200)
1439840502717:?sample\
1439840504418:?sample
1439840686687:subset_data <- hs_lib_strat[hs_lib_strat$sample_accession %in% subset,]
1439840690968:View(subset_data)
1439841135997:lib_sel <- dbGetQuery(con, "select * from experiment where library_strategy not like 'cDNA'")
1439841149616:lib_sel <- dbGetQuery(con, "select * from experiment where library_selection not like 'cDNA'")
1439841175872:View(lib_sel)
1439841207361:hs_lib_sel <- lib_sel[lib_sel$sample_accession %in% hs, ]
1439841210041:View(hs_lib_sel)
1439841271976:hs_lib <- unique(rbind(hs_lib_sel, hs_lib_strat))
1439841277766:View(hs_lib)
1439841573935:organism <-'Homo sapiens' #human, mouse...
1439841574786:library(doParallel)
1439841574924:library(SRAdb)
1439841576382:registerDoParallel(10)
1439841576383:sqlfile <- "SRAmetadb.sqlite"
1439841576384:con <- dbConnect(SQLite(), sqlfile)
1439841576387:desc <- colDescriptions(con)
1439841579876:exper <- dbGetQuery(con, "select * from experiment")
1439841595691:exper <- exper[exper$submission_accession %in% hs_all$submission_accession, ]
1439841598350:hs_all <-dbGetQuery(con, paste0("select * from sample where scientific_name like '", organism, "'"))
1439841601204:hs_all <- hs_all[!(grepl("Metagenomic|metagenomic", hs_all$description)), ] # also?: reference (no),
1439841601533:list_hs <- hs_all$sample_accession
1439841602126:lib_strat <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq'")
1439841605000:hs_lib_strat <- lib_strat[lib_strat$sample_accession %in% hs, ]
1439841605001:list_pa <- getSRA(search_terms='"poly(A)" OR "poly-A" OR polyadenylation OR polyadenylated', sra_con=con, out_types=c("experiment"))
1439841605906:list_pa <- list_pa$sample
1439841605910:list_pa <- list_pa[list_pa %in% hs]
1439841605910:list_pa <- getSRA(search_terms='strand', sra_con=con, out_types=c("experiment"))
1439841607004:lib_sel <- dbGetQuery(con, "select * from experiment where library_selection not like 'cDNA'")
1439841620134:hs_lib_sel <- lib_sel[lib_sel$sample_accession %in% hs, ]
1439841628106:hs <- hs_all$sample_accession
1439841633162:lib_strat <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq'")
1439841635835:hs_lib_strat <- lib_strat[lib_strat$sample_accession %in% hs, ]
1439841654215:lib_sel <- dbGetQuery(con, "select * from experiment where library_selection not like 'cDNA'")
1439841666968:hs_lib_sel <- lib_sel[lib_sel$sample_accession %in% hs, ]
1439841669386:hs_lib <- hs_lib_sel[hs_lib_sel$sample_accession %in% hs_lib_strat$sample_accession,]
1439841670756:subset <- sample(unique(hs_lib_strat$sample_accession), size=200)
1439841671042:subset2 <- sample(unique(hs_lib_strat$sample_accession), size=20)
1439841676404:View(hs_lib)
1439841771484:subset <- sample(unique(hs_lib$sample_accession), size=200)
1439841772886:subset2 <- sample(unique(hs_lib$sample_accession), size=20)
1439841783021:subset_data <- hs_lib[hs_lib$sample_accession %in% subset,]
1439841787031:subset_data <- hs_lib[hs_lib$sample_accession %in% subset2,]
1439841789061:View(subset_data)
1439841820203:?sample
1439841875848:subset2 <- sample(unique(hs_lib$sample_accession), size=20)
1439841879782:subset_data <- hs_lib[hs_lib$sample_accession %in% subset2,]
1439841883182:View(subset_data)
1439841915618:?randint
1439841919179:?rand.int
1439841966249:??randint
1439842053753:runif(1, 1, nrow(subset_data))
1439842103958:floor(runif(1, 1, (nrow(subset_data)+1)))
1439842119722:floor(runif(1, 1, (nrow(subset_data)+1)))
1439842120335:floor(runif(1, 1, (nrow(subset_data)+1)))
1439842120797:floor(runif(1, 1, (nrow(subset_data)+1)))
1439842121286:floor(runif(1, 1, (nrow(subset_data)+1)))
1439842121757:floor(runif(1, 1, (nrow(subset_data)+1)))
1439842172024:rep(floor(runif(1, 1, (nrow(subset_data)+1))), 2)
1439842175060:rep(floor(runif(1, 1, (nrow(subset_data)+1))), 6)
1439842220508:rand <- c()
1439842226225:nsamples <- 20
1439842243361:x <- floor(runif(1, 1, (nrow(subset_data)+1)))
1439842258996:?seed
1439842261756:?set.seed
1439842275962:set.seed(99)
1439842276793:rand <- c()
1439842277325:nsamples <- 20
1439842277584:for(n in 1:nsamples) {
1439842277792:x <- floor(runif(1, 1, (nrow(subset_data)+1)))
1439842278018:rand <- append(rand, x)
1439842278309:}
1439842317836:subset_data <- hs_lib[x,]
1439842326308:subset_data <- hs_lib[rand,]
1439842332496:View(subset_data)
1439842356485:set.seed(99)
1439842356628:rand <- c()
1439842356749:nsamples <- 20
1439842356908:for(n in 1:nsamples) {
1439842357061:x <- floor(runif(1, 1, (nrow(hs_lib)+1)))
1439842357204:rand <- append(rand, x)
1439842357345:}
1439842357644:subset_data <- hs_lib[rand,]
1439842360467:View(subset_data)
1439842381995:?runif
1439842419853:?r()
1439842422461:?rand()
1439842424733:?random()
1439842466015:set.seed(99)
1439842470430:subset2 <- sample(unique(hs_lib$sample_accession), size=20)
1439842473475:subset_data <- hs_lib[hs_lib$sample_accession %in% subset2,]
1439842578220:View(subset_data)
1439842616799:View(exper)
1439843039837:listSRAfile(subset_data,dbcon)
1439843053316:subset_data <- hs_lib[hs_lib$sample_accession %in% subset2,]
1439843063464:listSRAfile(subset2,dbcon)
1439843069343:listSRAfile(subset2,con)
1439843079638:sample_files <- listSRAfile(subset2,con)
1439843082449:View(sample_files)
1439843109049:View(hs_lib)
1439843170101:subset2 <- sample(unique(hs_lib$experiment_accession), size=20)
1439843181530:subset_data <- hs_lib[hs_lib$experiment_accession %in% subset2,]
1439843184809:sample_files <- listSRAfile(subset2,con)
1439843188566:View(subset_data)
1439843191921:View(sample_files)
1439843278515:dbFields(con, "read")
1439843282025:dbListFields(con, "read")
1439843289866:dbListTables(con)
1439843297416:dbListFields(con, "run")
1439843403812:runs <- dbGetQuery(con, "select * from run")
1439843435342:run_list <- runs[runs$experiment_accession %in% subset2,]
1439843447526:View(run_list)
1439843571771:subset <- sample(unique(hs_lib$experiment_accession), size=200)
1439843575820:subset_data <- hs_lib[hs_lib$experiment_accession %in% subset,]
1439843580623:run_list <- runs[runs$experiment_accession %in% subset,]
1439843585716:View(run_list)
1439843645005:sample_files <- listSRAfile(subset,con)
1439843648177:View(sample_files)
1439848639033:write.tsv(run_list, "run_list.tsv", header=T)
1439848658568:write.csv(run_list, "run_list.csv", header=T)
1439848663223:write.csv(run_list, "run_list.csv")
1439848701793:rl <- read.table("run_list.csv", header=T)
1439848707922:rl <- read.table("run_list.csv")
1439848766909:write.csv(sample_files, "sample_files.csv")
1439848768578:rl<- read.table("run_list.csv", header=T)
1439848783543:rl<- read.table("sample_files.csv", header=T)
1439848787802:View(sample_files)
1439849301733:sample_files_list <- sample_files[,4]
1439849307814:write.csv(sample_files_list, "sample_files.csv")
1439849308849:rl<- read.table("sample_files.csv", header=T)
1439849311743:rl
1439849413851:sample_files_list <- unname(sample_files[,4])
1439849418418:write.csv(sample_files_list, "sample_files.csv")
1439849418607:rl<- read.table("sample_files.csv", header=T)
1439849421842:View(rl)
1439849442807:rl<- read.csv("sample_files.csv", header=T)
1439849449816:sample_files_list <- unname(sample_files[,4])
1439849466494:class(sample_files_list)
1439849490347:write.csv(sample_files_list, "sample_files.csv", colnames=F, rownames=F)
1439849498766:?write.csv
1439849506125:write.csv(sample_files_list, "sample_files.csv", col.names=F, row.names=F)
1439849518033:sample_files <- listSRAfile(subset2,con)
1439849525708:sample_files_list <- sample_files[,4]
1439849527751:write.csv(sample_files_list, "sample_files.csv", col.names=F, row.names=F)
1439849530197:rl<- read.csv("sample_files.csv", header=T)
1439849532191:rl
1439849551527:set.seed(99)
1439849552078:subset <- sample(unique(hs_lib$experiment_accession), size=100)
1439849556302:subset_data <- hs_lib[hs_lib$experiment_accession %in% subset,]
1439849559646:run_list <- runs[runs$experiment_accession %in% subset,]
1439849561328:sample_files <- listSRAfile(subset,con)
1439849564541:sample_files_list <- sample_files[,4]
1439849565694:write.csv(sample_files_list, "sample_files.csv", col.names=F, row.names=F)
1439849565891:rl<- read.csv("sample_files.csv", header=T)
1439849568808:rl
1439914963952:library(SRAdb)
1439915036811:sqlfile <- "SRAmetadb.sqlite"
1439915036979:con <- dbConnect(SQLite(), sqlfile)
1439915037650:desc <- colDescriptions(con)
1439915252898:dbGetQuery(con, "select library_strategy count (*) from sample where scientific_name like 'Homo sapiens' group by library_strategy)
1439915254441:)
1439915258849:dbGetQuery(con, "select library_strategy count (*) from sample where scientific_name like 'Homo sapiens' group by library_strategy")
1439915279258:dbGetQuery(con, "select library_strategy, count (*) from sample where scientific_name like 'Homo sapiens' group by library_strategy")
1439915304647:dbListFields(con, "sample")
1439915625718:dbGetQuery(con, "select library_strategy, count (*) from experiment where scientific_name like 'Homo sapiens' group by library_strategy")
1439915633355:dbListFields(con, "experiment")
1439916074230:dbGetQuery(con, "select library_strategy, count (*) from dual where scientific_name like 'Homo sapiens' group by library_strategy")
1439916573870:?count
1439916586453:??ftabels
1439916589669:??ftables
1439916599612:?xtab
1439916604277:??xtab
1439916608091:?xtabs
1439919457133:hist(exper$library_strategy)
1439919515908:?hist
1439919819731:xt <- xtabs(~library_strategy, exper )
1439919822739:xt
1439919830469:hist(xt)
1439919861415:library(ggplot2)
1439919862820:hist(xt)
1439919868298:qplot(xt)
1439919910836:q(xt) + geom_histogram()
1439919919010:q(xt) + geom_histogram()
1439919925226:qplot(xt) + geom_histogram()
1439919950553:qplot(xt)
1439919974669:View(xt)
1439919998196:qplot(xt, aes(library_strategy)) + geom_histogram()
1439920004674:qplot(xt, aes(library_strategy))
1439920032557:qplot(xt, aes(library_strategy)) + geom_bar
1439920036577:qplot(xt, aes(library_strategy)) + geom_bar()
1439920048558:class(library_strategy)
1439920054880:class(xt$library_strategy)
1439920063445:class(xt)
1439920072275:xt[1,]
1439920088150:qplot(as.data.frame(xt), aes(library_strategy)) + geom_bar()
1439920099162:as.data.frame(xt)[1,]
1439920204030:plot(as.data.frame(xt)[1,], family="serif")
1439920210427:plot(as.data.frame(xt)[1,], family="sans")
1439920226402:plot(as.data.frame(xt)[1,], family="Arial Black")
1439920242540:qplot(as.data.frame(xt)[1,])
1439920263254:xt <- as.data.frame(xt)
1439920268731:class(xt)
1439920276495:qplot(xt)
1439920287394:qplot(xt, aes(library_strategy))
1439920310596:qplot(xt, aes(Freq))
1439920318730:qplot(xt, aes(xt$Freq))
1439920359957:xt <- xt[sort(xt$Freq),]
1439920373748:xt <- xtabs(~library_strategy, exper )
1439920478897:clean()
1439920528444:head(hs)
1439920549744:head(exper$sample_accession)
1439920580705:exper_hs <- exper[exper$sample_accession %in% hs, ]
1439920603081:xt <- xtabs(~library_strategy, exper_hs )
1439920796619:172 + 96
1439921135285:xt_lib_strat <- xtabs(~library_strategy, exper_hs )
1439921155244:View(dbListFields(con, "experiment"))
1439921316166:xt_lib_sel <- xtabs(~library_selection, exper_hs )
1439921316346:xt_lib_prot <- xtabs(~library_construction_protocol, exper_hs )
1439921316492:xt_lib_sel <- xtabs(~library_selection, exper_hs )
1439921365779:View(xt_lib_prot)
1439921389398:View(xt_lib_sel)
1439921474398:xt_lib_source <- xtabs(~library_source, exper_hs )
1439921523580:xt_lib_layout <- xtabs(~library_layout, exper_hs )
1439921533705:View(xt_lib_source)
1439921585762:View(xt_lib_strat)
1439922987645:View(xt_lib_prot)
1439923009844:View(xt_lib_layout)
1439930367999:View(hs_lib_strat)
1439930563309:exper_hs_rna <- exper[exper$sample_accession %in% hs_lib_strat$sample_accession, ]
1439930564141:View(hs_lib)
1439930596971:xt_lib_strat <- xtabs(~library_strategy, lib_strat )
1439930613970:View(xt_lib_strat)
1439930803351:xt_lib_tabs <- xtabs(~library_selection, lib_strat)
1439930806495:View(xt_lib_strat)
1439930825396:View(hs_lib_strat)
1439930855046:?all
1439930932127:xt_lib_tabs <- xtabs(~library_selection, lib_strat)
1439930944069:xt_lib_strat <- xtabs(~library_selection, lib_strat)
1439930947199:View(hs_lib_strat)
1439930955669:View(xt_lib_strat)
1439933299645:View(exper_hs_rna)
1439933316454:xt_lib_strat <- xtabs(~library_strategy, exper_hs_rna )
1439933330246:View(xt_lib_strat)
1439933383094:View(xt_lib_strat)
1439933425295:View(xtabs(~library_strategy, exper_hs_rna ))
1439933439894:View(xtabs(~library_selection, exper_hs_rna ))
1440011999264:list_strand <- getSRA(search_terms='strand', sra_con=con, out_types=c("experiment"))
1440012005452:library(doParallel)
1440012006328:library(SRAdb)
1440012007098:registerDoParallel(10)
1440012016688:list_strand <- getSRA(search_terms='strand', sra_con=con, out_types=c("experiment"))
1440012024993:sqlfile <- "SRAmetadb.sqlite"
1440012025200:con <- dbConnect(SQLite(), sqlfile)
1440012031656:desc <- colDescriptions(con)
1440012033175:exper <- dbGetQuery(con, "select * from experiment")
1440012051315:runs <- dbGetQuery(con, "select * from run")
1440012058367:list_strand <- getSRA(search_terms='strand', sra_con=con, out_types=c("experiment"))
1440012316691:View(hs_lib_sel)
1440012855580:dim(getSRA(search_terms='controlled', sra_con=con, out_types=c("experiment")))
1440012878041:dim(getSRA(search_terms='controled', sra_con=con, out_types=c("experiment")))
1440013154046:dbListFields(con, "experiment")
1440013487596:dbListFields(con, "sample")
1440013658593:hs_all <- hs_all[(grepl("9606", hs$taxon_id)), ]
1440013800392:tax_id <- "9606"
1440013803996:hs_all <- dbGetQUery(con, paste0("select * from sample where taxon_id like '", tax_id, "'"))
1440013818080:hs_all <- dbGetQuery(con, paste0("select * from sample where taxon_id like '", tax_id, "'"))
1440013832526:hs_all <- hs_all[!(grepl("Metagenomic|metagenomic", hs_all$description)), ] # also?: reference (no),
1440013889480:View(hs_lib)
1440013911596:hs_all[(grepl("Metagenomic|metagenomic", hs_all$description)), ]
1440014036737:hs_all[(grepl("Metagenomic|metagenomic")), ]
1440014046502:hs_all[(grepl("Metagenomic|metagenomic"), hs_all), ]
1440014057175:hs_all[(grepl("Metagenomic|metagenomic"), hs_all) ]
1440014066184:hs_all[(grepl("Metagenomic|metagenomic", hs_all), ]
1440014077943:hs_all[(grepl("Metagenomic|metagenomic", hs_all)), ]
1440015203444:organism <-'Homo sapiens' #human, mouse...
1440015203602:tax_id <- "9606"
1440015204786:library(doParallel)
1440015204963:library(SRAdb)
1440015205742:registerDoParallel(10)
1440015341849:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq' or 'RIP-Seq' and library_selection like 'polyA' or 'Oligo-dT'")
1440015366481:dbCOnnect(SQLite(), sqlfile)
1440015369488:dbCnnect(SQLite(), sqlfile)
1440015372926:dbConnect(SQLite(), sqlfile)
1440015379579:con <- dbConnect(SQLite(), sqlfile)
1440015382262:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq' or 'RIP-Seq' and library_selection like 'polyA' or 'Oligo-dT'")
1440015402749:head(polya)
1440015437415:unique(polya$library_strategy)
1440015452514:unique(polya$library_selection)
1440015475509:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq' or 'RIP-Seq'")
1440015481253:unique(polya$library_strategy)
1440015508033:polya <- dbGetQuery(con, "select * from experiment where library_strategy like ('RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq' or 'RIP-Seq')")
1440015517017:unique(polya$library_strategy)
1440015918524:polya <- dbGetQuery(con, "select * from experiment where library_strategy like "'RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq' or 'RIP-Seq'"")
1440015935241:polya <- dbGetQuery(con, "select * from experiment where library_strategy like ''RNA-Seq' or 'miRNA-Seq' or 'ncRNA-Seq' or 'RIP-Seq''")
1440015954125:polya <- dbGetQuery(con, "select * from experiment where library_strategy like ''RNA-Seq or miRNA-Seq or ncRNA-Seq or RIP-Seq'")
1440015958153:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq or miRNA-Seq or ncRNA-Seq or RIP-Seq'")
1440015976281:unique(polya$library_strategy)
1440016006456:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA or RIP'")
1440016008640:unique(polya$library_strategy)
1440016015298:polya <- dbGetQuery(con, "select * from experiment where library_strategy like RNA or RIP")
1440016030887:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA' or 'RIP'")
1440016046841:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA* or RIP*'")
1440016056732:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA*")
1440016059108:polya <- dbGetQuery(con, "select * from experiment where library_strategy like RNA*")
1440016064049:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA*'")
1440016078151:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq'")
1440016096449:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq' OR 'RIP-Seq'")
1440016108049:polya <- dbGetQuery(con, "select * from experiment where library_strategy like RIP-Seq'")
1440016110584:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RIP-Seq'")
1440016135764:polya <- dbGetQuery(con, "select * from experiment where library_strategy match 'RNA* or RIP*'")
1440016178104:polya <- dbGetQuery(con, "select * from experiment where library_strategy match 'RNA-Seq or RIP-Seq")
1440016182535:polya <- dbGetQuery(con, "select * from experiment where library_strategy match 'RNA-Seq or RIP-Seq'")
1440016262609:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq or RIP-Seq'")
1440016281874:polya <- dbGetQuery(con, "select * from experiment where library_strategy match 'RNA or RIP'")
1440016515772:polya <- dbGetQuery(con, "select * from experiment where library_strategy match RNA-Seq")
1440016521814:polya <- dbGetQuery(con, "select * from experiment where library_strategy match 'RNA-Seq'")
1440016549929:polya <- dbGetQuery(con, "select * from experiment where library_strategy like RNA")
1440016566906:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA'")
1440016586149:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq'")
1440016856673:polya <- dbGetQuery(con, "select * from experiment where library_strategy like RNA-Seq")
1440016860709:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq'")
1440016889042:polya <- dbGetQuery(con, "select * from experiment where library_strategy like 'RNA-Seq'  UNION select * from experiment where library_strategy like 'RIP-Seq'")
1440016915780:polya <- dbGetQuery(con, "select * from experiment where library_strategy like '*RNA*'  UNION select * from experiment where library_strategy like 'RIP-Seq'")
1440016949390:polya <- dbGetQuery(con, "select * from experiment where library_strategy like '%RNA%'  UNION select * from experiment where library_strategy like 'RIP-Seq'")
1440017098086:polya <- dbGetQuery(con, paste0("select * from experiment where library_strategy like '%RNA%'
1440017098086:UNION select * from experiment where library_strategy like 'RIP-Seq'
1440017098086:UNION select * from sample where taxon_id like '", tax_id, "'")
1440017107979:)
1440017177406:dbListFields(con, "experiment")
1440017918149:dbGetQuery(con, "select * from experiment where submission_accession like 'SRX1156594'")
1440017945613:dbGetQuery(con, "select * from experiment where experiment_accession like 'SRX1156594'")
1440018053478:dbGetQuery(con, "select * from experiment where experiment_accession like SRX1156594")
1440018067651:View(sample_files)
1440018089524:dbGetQuery(con, "select * from experiment where experiment_accession like 'SRX194257'")
1440018292551:getSRA(search_terms="cell line", out_types=c(sra), con)
1440018299150:getSRA(search_terms="cell line", out_types=c(experiment), con)
1440018308988:getSRA(search_terms="cell line", out_types=c("sra"), con)
1440018435673:cell_line <- getSRA(search_terms="cell line", out_types=c("experiment"), con)
1440018444827:dim(cell_line)
1440018497853:cell_line <- cell_line$experiment
1440018505052:head(cell_line)
1440018517852:class(cell_line)
1440018696690:filter.by.ex <- function(data, by) {
1440018696691:res <- data[data$experiment_accession %in% by]
1440018696691:return(res)
1440018696691:}
1440018724453:filter.by.ex(lib_strat, hs)
1440018744124:filter.by.ex <- function(data, by) {
1440018744124:res <- data[data$experiment_accession %in% by,]
1440018744124:return(res)
1440018751556:}
1440018756899:filter.by.ex(lib_strat, hs)
1440018773849:filter.by.ex(lib_strat, cell_line)
1440019204550:dim(lib_strat)
1440019301859:list_strand <- getSRA(search_terms='strand', sra_con=con, out_types=c("experiment"))
1440019310884:dim(list_strand)
1440019617101:x <- getSRA(search_terms='controlled', out_types=c("sra"), con)
1440019624373:dim(x)
1440019660974:names(x)
1440019691957:dbListTables(con)
1440019897134:head(dbGetQuery(con, select experiment_name from sra))
1440019908725:head(dbGetQuery(con, "select experiment_name from sra))
1440019918901:head(dbGetQuery(con, "select experiment_name from sra"))
1440020151333:head(dbGetQuery(con, "select spots from sra"))
1440020183124:dbListFields(con, "metaInfo")
1440020202828:head(dbGetQuery(con, "select name from sra"))
1440020215237:head(dbGetQuery(con, "select name from metaInfo"))
1440020231076:head(dbGetQuery(con, "select value from metaInfo"))
1440020363733:library(doParallel)
1440020365058:library(SRAdb)
1440020365059:registerDoParallel(10)
1440020367554:sqlfile <- "SRAmetadb.sqlite"
1440020367555:con <- dbConnect(SQLite(), sqlfile)
1440020371142:approx.size <- function(list) {
1440020379931:# get approximaete size list is a vecotr of accession numbers
1440020379931:approx.size <- function(list) {
1440020379932:# list <- unique(list[1:100,5])
1440020379932:# nparts <- ceiling((length(list)/10))
1440020379932:# parts <- split(list, 1:nparts)
1440020379932:all <-data.frame()
1440020379932:size <- 0
1440020379933:for(i in 1:length(list)) {
1440020379933:tryCatch({
1440020379933:info <- getSRAinfo(list[i], sra_con=con)
1440020379933:all <- rbind(all, info)
1440020379934:},
1440020379934:error=function(e) NULL
1440020379934:)
1440020379934:}
1440020379934:res <- matrix(c(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)))
1440020379935:return(res)
1440020379935:}
1440020379936:filter.by.ex <- function(data, by) {
1440020379936:res <- data[data$experiment_accession %in% by,] # or sample_accession
1440020379936:return(res)
1440020379936:}
1440020618492:hs_all <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id, "'"))
1440020635080:organism <-'Homo sapiens' #human, mouse...
1440020636425:tax_id <- "9606"
1440020636427:##
1440020643259:hs_all <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id, "'"))
1440020700337:View(hs_all)
1440020880876:head(dbGetQuery(con, "select broker_name from sample"))
1440020921432:head(dbGetQuery(con, "select broker_name from sample")[!is.na(dbGetQuery(con, "select broker_name from sample")])
1440020940524:head(dbGetQuery(con, "select broker_name from sample"), 30
1440020942035:)
1440020965149:dbGetQuery(con, "select broker_name from sample")[1000:1007]
1440020973211:dbGetQuery(con, "select broker_name from sample")[1000:1007,]
1440020981578:dbGetQuery(con, "select broker_name from sample")[,1000:1007]
1440021002949:View(dbGetQuery(con, "select broker_name from sample"))
1440021051528:sum(is.na(dbGetQuery(con, "select broker_name from sample")))
1440021059955:sum(!is.na(dbGetQuery(con, "select broker_name from sample")))
1440021081799:head(dbGetQuery(con, "select broker_name from sample")[!is.na(dbGetQuery(con, "select broker_name from sample"),])
1440021096874:dbGetQuery(con, "select broker_name from sample")[!is.na(dbGetQuery(con, "select broker_name from sample"),])
1440021111599:dbGetQuery(con, "select broker_name from sample")[!is.na(dbGetQuery(con, "select broker_name from sample"),]
1440021125399:broker <- dbGetQuery(con, "select broker_name from sample")
1440021149613:View(broker[!is.na(broker)])
1440021157149:View(broker[!is.na(broker),])
1440021203404:View(broker[,!is.na(broker)])
1440021242140:broker <- matrix(broker)
1440021247374:View(broker[!is.na(broker),])
1440021268085:broker <- dbGetQuery(con, "select broker_name from sample")
1440021281764:View(broker[!is.na(broker)])
1440021305762:sort(broker, na.last=T)
1440021318012:broker[sort(broker, na.last=T),]
1440021337406:View(order(broker, na.last=T))
1440021566874:broker[sort(broker[,1], na.last=T),]
1440022531803:contr <- read.csv("SraAccList_controlled.txt")
1440022564568:contr <- read.table("SraAccList_controlled.txt")
1440022570824:View(contr)
1440022588722:contr <- read.table("SraAccList_controlled.txt")[,1]
1440022624278:organism <-'Homo sapiens' #human, mouse...
1440022624414:tax_id <- "9606"
1440022624548:contr <- read.table("SraAccList_controlled.txt")[,1]
1440022626371:##
1440022626371:library(doParallel)
1440022626470:library(SRAdb)
1440022627184:registerDoParallel(10)
1440022627184:sqlfile <- "SRAmetadb.sqlite"
1440022627185:con <- dbConnect(SQLite(), sqlfile)
1440022627380:###
1440022630272:# get approximaete size list is a vecotr of accession numbers
1440022630272:approx.size <- function(list) {
1440022630272:# list <- unique(list[1:100,5])
1440022630272:# nparts <- ceiling((length(list)/10))
1440022630273:# parts <- split(list, 1:nparts)
1440022630273:all <-data.frame()
1440022630273:size <- 0
1440022630273:for(i in 1:length(list)) {
1440022630274:tryCatch({
1440022630274:info <- getSRAinfo(list[i], sra_con=con)
1440022630274:all <- rbind(all, info)
1440022630274:},
1440022630274:error=function(e) NULL
1440022630275:)
1440022630275:}
1440022630275:res <- matrix(c(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)))
1440022630276:return(res)
1440022630276:}
1440022630276:filter.by.ex <- function(data, by) {
1440022630277:res <- data[data$experiment_accession %in% by,] # or sample_accession
1440022630277:return(res)
1440022630277:}
1440022633724:###
1440022633867:desc <- colDescriptions(con)
1440022634027:exper <- dbGetQuery(con, "select * from experiment")
1440022646614:runs <- dbGetQuery(con, "select * from run")
1440022657743:save.image("/mnt/DATAPART1/rnaseq/.RData")
1440022694025:hs_all <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id, "'"))
1440022705618:View(hs_all)
1440022805950:hs <- hs_all$run_accession
1440022808015:strand <- getSRA(search_terms='strand', sra_con=con, out_types=c("sra"))
1440022810506:strand <- strand$run_accession
1440022810507:cell_line <- getSRA(search_terms="cell line", out_types=c("sra"), con)
1440022816227:cell_line <- cell_line$run_accession
1440022816228:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440022816228:UNION select * from sra where library_strategy like 'RIP-Seq'")) #validation?
1440022830973:lib_strat <- lib_strat[lib_strat$run_accession %in% hs, ]
1440022950976:sum(lib_strat$run_accession %in% contr)
1440024181910:xt_lib_sel <- xtabs(~library_selection, exper )
1440024201201:View(xt_lib_sel)
1440024655842:head(dbGetQuery(con, "select taxon_id from sra where scientific_name like Mus musculus"))
1440024668370:head(dbGetQuery(con, "select taxon_id from sra where scientific_name like 'Mus musculus'"))
1440024716949:head(dbGetQuery(con, "select taxon_id from sample where scientific_name like 'Mus musculus'"))
1440024746174:head(dbGetQuery(con, "select taxon_id from sample where scientific_name like 'Rattus'"))
1440024774228:head(dbGetQuery(con, "select taxon_id from sample where scientific_name like 'Danio'"))
1440024780324:head(dbGetQuery(con, "select taxon_id from sample where scientific_name like 'Danio rerio'"))
1440024797899:head(dbGetQuery(con, "select taxon_id from sample where scientific_name like 'Rattus norvegicus'"))
1440024830889:organism <- c('Homo sapiens', 'Mus musculus', 'Rattus norvegicus', 'Danio rerio') #human, mouse...
1440024831029:tax_id <- c("9606", "10090", "10116", "7955")
1440024904949:rna <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[1], "'"))
1440025169960:desc
1440025196324:desc[c(3,5),]
1440025201099:desc[,c(3,5)]
1440025251001:View(desc[,c(3,5)])
1440026091549:dbListFields(con, "run")
1440026574099:View(hs_all)
1440027214711:lib_strat <- lib_strat[lib_strat$run_accession %in% hs, ]
1440027222705:nrow(lib_strat)
1440027403884:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[2], "'"))
1440027408514:f_tax <- rna$run_accession
1440027409931:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440027410401:UNION select * from sra where library_strategy like 'RIP-Seq'")) #validation?
1440027467477:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440027482979:sum(lib_strat_tax$run_accession %in% contr)
1440027534442:sum(lib_strat_tax$run_accession %in% contr)
1440027558484:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[2], "'"))
1440027562716:f_tax <- rna$run_accession
1440027562716:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440027569133:nrow(lib_strat_tax)
1440027582586:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[2], "'"))
1440027599999:View(hs_all)
1440027604526:View(f_tax)
1440027619762:f_tax <- rna$run_accession
1440027628386:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440027628683:UNION select * from sra where library_strategy like 'RIP-Seq'")) #validation?
1440027649458:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[2], "'"))
1440027653609:f_tax <- f_tax$run_accession
1440027659206:rm(rna)
1440027665008:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440027670710:nrow(lib_strat_tax)
1440027672950:xt_lib_sel <- xtabs(~library_selection, lib_strat_tax)
1440027682575:t
1440027685996:sum(lib_strat_tax$run_accession %in% contr)
1440027881705:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[3], "'"))
1440027883950:f_tax <- f_tax$run_accession
1440027889082:sum(lib_strat_tax$run_accession %in% contr)
1440027894724:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440027896856:sum(lib_strat_tax$run_accession %in% contr)
1440027899524:nrow(lib_strat_tax)
1440027919506:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[3], "'"))
1440027921712:f_tax <- f_tax$run_accession
1440027923751:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440027926999:nrow(lib_strat_tax)
1440027933784:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[4], "'"))
1440027936222:f_tax <- f_tax$run_accession
1440027937302:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440027938352:nrow(lib_strat_tax)
1440027983930:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[1], "'"))
1440027995416:f_tax <- f_tax$run_accession
1440027995434:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440027995555:xt_lib_sel <- xtabs(~library_selection, lib_strat_tax)
1440028012126:View(xt_lib_sel)
1440030425649:f_tax <- dbGetQuery(con, paste0("select library_selection from sra where library_strategy like 'nc-RNA-Seq'"))
1440030436679:rm(f_tax)
1440030442774:x <- dbGetQuery(con, paste0("select library_selection from sra where library_strategy like 'nc-RNA-Seq'"))
1440030466702:x
1440030475524:x <- dbGetQuery(con, paste0("select library_selection from sra where library_strategy like 'ncRNA-Seq'"))
1440030497303:xtabs(~library_selection, x)
1440030621000:sum(xtabs(~library_selection, x))
1440030628699:843/sum(xtabs(~library_selection, x))
1440030699699:x <- dbGetQuery(con, paste0("select library_selection from sra where library_strategy like 'miRNA-Seq'"))
1440030704524:xtabs(~library_selection, x)
1440030717927:3903/sum(xtabs(~library_selection, x))
1440030899124:sum(xtabs(~library_selection, x))
1440031013874:x <- dbGetQuery(con, paste0("select library_selection from sra where library_strategy like 'RIP-Seq'"))
1440031018080:xtabs(~library_selection, x)
1440189567297:organism <- c('Homo sapiens', 'Mus musculus', 'Rattus norvegicus', 'Danio rerio') #human, mouse...
1440189567414:tax_id <- c("9606", "10090", "10116", "7955")
1440189567553:contr <- read.table("SraAccList_controlled.txt")[,1]
1440189569131:library(doParallel)
1440189569236:library(SRAdb)
1440189570366:registerDoParallel(10)
1440189570727:sqlfile <- "SRAmetadb.sqlite"
1440189570865:con <- dbConnect(SQLite(), sqlfile)
1440189578105:get approximaete size as a vecotr of accession numbers
1440189578105:approx.size <- function(list) {
1440189578105:# list <- unique(list[1:100,5])
1440189578106:# nparts <- ceiling((length(list)/10))
1440189578106:# parts <- split(list, 1:nparts)
1440189578106:all <-data.frame()
1440189578106:size <- 0
1440189578106:for(i in 1:length(list)) {
1440189578107:tryCatch({
1440189578107:info <- getSRAinfo(list[i], sra_con=con)
1440189578107:all <- rbind(all, info)
1440189578107:},
1440189578108:error=function(e) NULL
1440189578108:)
1440189578108:}
1440189578108:res <- matrix(c(sum(as.numeric(as.character(all[,6])), na.rm=T), nrow(all)))
1440189578109:return(res)
1440189578109:}
1440189578109:filter.by.ex <- function(data, by) {
1440189578110:res <- data[data$experiment_accession %in% by,] # or sample_accession
1440189578110:return(res)
1440189578110:}
1440189638478:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440189639156:UNION select * from sra where library_strategy like 'RIP-Seq'")) #validation?
1440189692159:tx_id[1]
1440189695031:tax_id[1]
1440189698595:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[1], "'"))
1440189719344:f_tax <- f_tax$run_accession
1440189798685:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440189798685:UNION select * from sra where library_strategy like 'RIP-Seq'
1440189798686:UNION select * from sra where tax_id like 9606"))
1440189803490:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440189803491:UNION select * from sra where library_strategy like 'RIP-Seq'
1440189803491:UNION select * from sra where taxo_id like 9606"))
1440189807123:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440189807123:UNION select * from sra where library_strategy like 'RIP-Seq'
1440189807124:UNION select * from sra where taxon_id like 9606"))
1440189850875:View(lib_strat)
1440189968341:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440189968342:UNION select * from sra where library_strategy like 'RIP-Seq'
1440189968342:UNION select * from sra where library_selection like RANDOM
1440189968342:UNION select * from sra where taxon_id like 9606"))
1440189982280:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440189982280:UNION select * from sra where library_strategy like 'RIP-Seq'
1440189982280:UNION select * from sra where library_selection like 'RANDOM'
1440189982281:UNION select * from sra where taxon_id like 9606"))
1440190070000:View(lib_strat)
1440190199319:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440190199319:UNION select * from sra where library_strategy like 'RIP-Seq'"))
1440190275124:f_tax <- f_tax$run_accession
1440190396502:?"dbGetQuery"
1440190434357:f_lib_sel <- dbGetQuery(con, paste0("select * from sra where library_selection like 'RANDOM'"))
1440190451091:f_lib_sel <- f_lib_sel$run_accession
1440190478469:View(lib_strat)
1440190505469:xtabs(~library_selection, lib_strat)
1440190519694:xtabs(~library_strategy, lib_strat)
1440190558593:filter.by.ex <- function(data, by) {
1440190558594:res <- data[data$run_accession %in% by,] # or sample_accession
1440190558594:return(res)
1440190558594:}
1440190583072:filter.by <- function(data, by) {
1440190583072:res <- data[data$run_accession %in% by,] # or sample_accession
1440190583073:return(res)
1440190583073:}
1440190634359:LIB <- filter.by(lib_strat, f_tax)
1440190648194:xtabs(~taxon_id, lib_strat)
1440190655745:xtabs(~taxon_id, LIB)
1440190668494:xtabs(~library_startegy, LIB)
1440190672419:xtabs(~library_strategy, LIB)
1440190680569:xtabs(~library_selectipon, LIB)
1440190683644:xtabs(~library_selection, LIB)
1440190717419:LIB <- filter.by(LIB, f_lib_sel)
1440191117205:approx.size(LIB)
1440191604425:all <-data.frame()
1440191604632:size <- 0
1440191635002:approx.size(LIB$run_accession)
1440437231575:mem.avail <- as.numeric(system("awk '/MemAvailable/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1440437247984:mem.avail <- as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1440438075599:?substr
1440438363084:?exists
1440438374898:exists(mem.avail)
1440438391702:exists(x)
1440438400726:exists(x)
1440438408324:exists("mem.avail")
1440438411699:exists("mem.ava")
1440453163663:organism <- c('Homo sapiens', 'Mus musculus', 'Rattus norvegicus', 'Danio rerio') #human, mouse...
1440453164894:tax_id <- c("9606", "10090", "10116", "7955")
1440453167001:contr <- read.table("SraAccList_controlled.txt")[,1]
1440453174856:library(SRAdb)
1440453176919:sqlfile <- "SRAmetadb.sqlite"
1440453177081:con <- dbConnect(SQLite(), sqlfile)
1440453193387:filter.by <- function(data, filter) {
1440453193387:res <- data[data$run_accession %in% by,] # or sample_accession
1440453193387:return(res)
1440453193388:}
1440453211254:f_tax <- dbGetQuery(con, paste0("select * from sra where taxon_id like '", tax_id[1], "'"))
1440453251702:f_tax <- f_tax$run_accession
1440453251721:f_lib_sel <- dbGetQuery(con, paste0("select * from sra where library_selection like 'RANDOM'"))
1440453268195:f_lib_sel <- f_lib_sel$run_accession
1440453296872:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440453299687:lib_strat <- dbGetQuery(con, paste0("select * from sra where library_strategy like '%RNA%'
1440453299830:UNION select * from sra where library_strategy like 'RIP-Seq'")) #validation?
1440453319475:lib_strat_tax <- lib_strat[lib_strat$run_accession %in% f_tax, ]
1440453342876:View(lib_strat_tax)
1440453392414:sum(lib_strat_tax$taxon_id != tax_id[1])
1440453396726:sum(lib_strat_tax$taxon_id == tax_id[1])
1440453424810:sum(lib_strat_tax$library_strategy == "RNA-Seq")
1440453674202:qry <- dbGetQuery(con, 'SELECT sra.run_accession
1440453674203:FROM sra
1440453674203:WHERE
1440453674203:library_strategy="RNA-Seq""
1440453674203:AND library_source="TRANSCRIPTOMIC"
1440453674203:AND library_selection="RANDOM"
1440453674204:AND library_layout LIKE "PAIRED%"
1440453674204:AND taxon_id=9606')
1440453690238:qry <- dbGetQuery(con, 'SELECT sra.run_accession
1440453690238:FROM sra
1440453690239:WHERE
1440453690239:library_strategy="RNA-Seq"
1440453690239:AND library_source="TRANSCRIPTOMIC"
1440453690239:AND library_selection="RANDOM"
1440453690239:AND library_layout LIKE "PAIRED%"
1440453690240:AND taxon_id=9606')
1440453700935:View(qry)
1440453731568:qry_subset <- sample(qry, 50)
1440453747221:?sample
1440453775758:qry_subset <- sample(c(qry), 50)
1440453798765:length(qry)
1440453816765:length(c(qry))
1440453831155:length(qry[,1])
1440453840121:qry_subset <- sample(qry[,1], 50)
1440453850000:qry_subset
1440453860351:qry_subset <- sample(qry[,1], 500)
1440453869993:set.seed(99)
1440453870223:qry_subset <- sample(qry[,1], 500)
1440453912744:qry <- dbGetQuery(con, 'SELECT *
1440453912986:FROM sra
1440453913127:WHERE
1440453913264:library_strategy="RNA-Seq"
1440453913407:AND library_source="TRANSCRIPTOMIC"
1440453913554:AND library_selection="RANDOM"
1440453913679:AND library_layout LIKE "PAIRED%"
1440453913968:AND taxon_id=9606')
1440453931053:qry_subset <- sample(qry$sra_accession, 500)
1440453932284:set.seed(99)
1440453937229:qry$sra_accession
1440453946977:names(qry)
1440453974209:qry_subset <- sample(qry$run_accession, 500)
1440454008551:xtabs(~library_selection, qry)
1440454019052:xtabs(~library_layout, qry)
1440455202034:names(qry)
1440455214117:xtabs(~submission_date, qry)
1440455799024:print(as.numeric(commandArgs(trailingOnly=T)[2])*3)
1440537513190:install.packages("DESeq2")
1440540585199:?rlog
1440540590044:??rlog
1440540610282:?VarianceStabilizingTRansformation
1440540616360:??VarianceStabilizingTransformation
1440541510051:library("BiocLite")
1440541524494:library("BiocLite()")
1440541530878:library("Bioconductor")
1440541551546:BiocLite(vsn)
1440541556000:??BiocLite
1440541567595:library(vsn)
1440541575074:install.libraries(vsn)
1440541582233:install.packages(vsn)
1440541585895:install.packages("vsn")
1440541664094:biocLite()
1440541680294:source("http://bioconductor.org/biocLite.R")
1440541680470:biocLite()
1440541832623:biocLite(c(DESeq2))
1440541839523:biocLite(c("DESeq2"))
1440774212507:library(doParallel)
1440774212701:library(SRAdb)
1440774216116:registerDoParallel(10)
1440774218946:sqlfile <- "SRAmetadb.sqlite"
1440774220037:con <- dbConnect(SQLite(), sqlfile)
1440774238228:filter.by <- function(data, filter) {
1440774238228:res <- data[data$run_accession %in% by,] # or sample_accession
1440774238228:return(res)
1440774238228:}
1440774339322:qry <- dbGetQuery(con, 'SELECT * FROM sra where taxon_id=9606 AND ')
1440774499236:qry <- getSRA(search_terms="autis", out_types=c("sra"), con)
1440774517088:?getSRA
1440774612158:qry <- getSRA(search_terms="autis*", out_types=c("sra"), con)
1440774649241:qry <- qry[qry$taxon_id==9606,]
1440776222651:View(qry)
1440776275621:xtabs(~library_strategy, qry)
1440776300316:xtabs(~., qry)
1440776316407:xtabs(~library_selection, qry)
1440794988583:system("ls")
1440795009997:system("mkdir gsea")
1440795021220:system("cd gsea")
1440795077652:library(SeqGSEA)
1440795123970:source("https://bioconductor.org/biocLite.R")
1440795136557:biocLite(c("SeqGSEA)"))
1440795233069:biocLite(c("SeqGSEA"))
1440795384108:library(SeqGSEA)
1440795852661:read.csv("/mnt/DATAPART1/ph525/count_matrix.csv")
1440795858940:cm <_ read.csv("/mnt/DATAPART1/ph525/count_matrix.csv")
1440795862940:cm <- read.csv("/mnt/DATAPART1/ph525/count_matrix.csv")
1440795922878:library(biomaRt)
1440795999541:names(cm)
1440796145477:geneCounts <- getGeneCount(cm)
1440796174629:head(cm[1,])
1440796178349:head(cm[,1])
1440796197460:cm <- read.csv("/mnt/DATAPART1/ph525/count_matrix.csv", -1)
1440796214158:?read.csv
1440796263608:cm <- read.csv("/mnt/DATAPART1/ph525/count_matrix.csv", row.names=1)
1440796285057:geneCounts <- getGeneCount(cm)
1440796386247:RCS <- newReadCountSet(cm)
1440796592239:RCS_example
1440796613559:data(RCS_example, package="SeqGSEA")
1440796628047:RCS_example
1440796649333:RCS_example[1,]
1440796664005:View(RCS_example)
1440797183631:methods(ts)
1440797185980:methods(t)
1440797373355:showMethods(newReadCountSet)
1440797381892:newReadCountSet
1440870814128:source("https://bioconductor.org/biocLite.R")
1440870832169:biocLite("EBImage")
1440870964172:install.packages(tiff)
1440870967578:install.packages("tiff")
1440871037258:biocLite("tiff")
1440871045205:biocLite("tiff")
1440871179565:biocLite("tiff")
1440871192988:install.packages("tiff")
1440871222274:biocLite("EBImage")
1440871499652:biocLiteUpdatePackages()
1440871516285:biocUpdatePackages()
1440871559597:biocLite()
1440871667687:biocLite()
1440871692749:library(EBImage)
1440871733051:update.default()
1440871737739:update.packages()
1440872100964:install.packages("fftwtools")
1440872216570:install.packages("fftwtools")
1440872405973:install.packages("fftwtools")
1440872429354:biocLite("EBImage")
1440872453217:biocLite("EBImage")
1440872552091:library(EBImage)
1440872720880:f <- system.file("Sasi/40.lsm")
1440872735859:im <- readImage(f)
1440872754065:f <- system.file("/mnt/DATAPART1Sasi/40.lsm")
1440872757883:f <- system.file("/mnt/DATAPART1/Sasi/40.lsm")
1440872766650:f <- "/mnt/DATAPART1/Sasi/40.lsm"
1440872788987:system(paste("ls", f"" )
1440872793466:system(paste("ls", f)
1440872795032:)
1440872814369:system("ls")
1440872847992:system(paste('"', "ls", f, '"')
1440872849160:)
1440872857091:system(paste('"', "ls", f, '"'))
1440872883768:f<- "/mnt/DATAPART1/Sasi"
1440872888931:system(paste('"', "ls", f, '"'))
1440872950970:f <- file.path("/mnt/DATAPART1/Sasi")
1440872953575:system(paste('"', "ls", f, '"'))
1440872963337:f <- file.path("/mnt/DATAPART1/Sasi/40.lsm")
1440872970706:readImage(f)
1440978086317:pth <- get.path()
1440978100725:??get.path
1440978208293:pth <- "/mnt/DATAPART1/Sasi"
1440978209466:file_list <- list.files(paste0(pth, "colocalisation"))
1440978218939:?list.files
1440978228553:file_list <- list.files(paste0(pth, "/colocalisation"))
1440978265188:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=.tsv)
1440978269514:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1440978275842:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1440978280585:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern="*.tsv")
1440978288513:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1440978354148:coloc_data <- NULL
1440978354338:for(file in file_list_coloc) {
1440978354489:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978354637:}
1440978380374:coloc_data <- NULL
1440978380555:for(file in file_list_coloc) {
1440978380695:coloc_data <- rbind(coloc_data, read.csv(expand.path(file), sep="\t"))
1440978380843:}
1440978389166:?expand.path
1440978407042:coloc_data <- NULL
1440978407203:for(file in file_list_coloc) {
1440978407363:coloc_data <- rbind(coloc_data, read.csv(path.expand(file), sep="\t"))
1440978407523:}
1440978431531:path.expand(file)
1440978488412:path.expand(file_list[1])
1440978530877:setwd(paste0(pth, colocalisation))
1440978542571:setwd(paste0(pth, "/colocalisation"))
1440978543113:file_list_coloc <- list.files(pattern=".tsv")
1440978543915:coloc_data <- NULL
1440978544921:for(file in file_list_coloc) {
1440978545081:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978545218:}
1440978558066:coloc_data <- data.frame
1440978558329:for(file in file_list_coloc) {
1440978558466:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978558595:}
1440978582573:dim(read.csv(file, sep="\t"))
1440978616677:coloc_data <- data.frame(NULL)
1440978617292:for(file in file_list_coloc) {
1440978617485:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978617605:}
1440978630516:coloc_data <- data.frame(NA, 0, 14)
1440978631230:for(file in file_list_coloc) {
1440978631525:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978631724:}
1440978645269:coloc_data <- data.frame(NA, 0, 14)
1440978654285:dim(coloc_data)
1440978662101:View(coloc_data)
1440978678827:?"data.frame"
1440978697641:coloc_data <- NULL
1440978697932:for(file in file_list_coloc) {
1440978698075:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978698469:}
1440978749835:coloc_data <- matrix(NULL, 1,14)
1440978750041:for(file in file_list_coloc) {
1440978750194:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978750361:}
1440978767411:coloc_data <- matrix(NULL, 0,14)
1440978772906:coloc_data <- matrix(NA, 0,14)
1440978785068:?matrix()
1440978797828:coloc_data <- matrix(NA, 0,14)
1440978798258:for(file in file_list_coloc) {
1440978798434:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978798564:}
1440978806009:read.csv(file, sep="\t")
1440978837938:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440978838348:for(file in file_list_coloc) {
1440978838492:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978838620:}
1440978854907:ncol(read.csv(file, sep="\t"))
1440978877738:coloc_data <- data.frame(matrix(NA, 0, ncol(read.csv(file, sep="\t"))))
1440978878219:for(file in file_list_coloc) {
1440978878418:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978878570:}
1440978965828:?rbind
1440978978840:detach("package:Biobase", unload=TRUE)
1440978979174:detach("package:BiocGenerics", unload=TRUE)
1440978980649:detach("package:DESeq", unload=TRUE)
1440978985848:detach("package:SeqGSEA", unload=TRUE)
1440978992302:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440978992502:for(file in file_list_coloc) {
1440978992690:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440978992829:}
1440979006574:dim(coloc_data)
1440979020400:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440979036903:coloc_data <- matrix(NA, 1, ncol(read.csv(file, sep="\t")))
1440979043854:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440979046561:for(file in file_list_coloc) {
1440979052785:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440979053058:}
1440979058923:View(coloc_data)
1440979068075:dim(coloc_data)
1440979074870:coloc_data <- matrix(NA, 0, 14)
1440979074999:for(file in file_list_coloc) {
1440979075150:coloc_data <- rbind(coloc_data, read.csv(file, sep="\t"))
1440979075306:}
1440979144977:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440979145147:for(file in file_list_coloc) {
1440979145296:coloc_data <- rbind(coloc_data, read.csv(file, header=F, sep="\t"))
1440979145407:}
1440979166405:for(file in file_list_coloc) {
1440979166632:read.csv(file, header=F, sep="\t")
1440979166980:}
1440979180123:for(file in file_list_coloc) {
1440979180273:View(read.csv(file, header=F, sep="\t"))
1440979180374:}
1440979226999:?merge
1440979249044:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440979249180:for(file in file_list_coloc) {
1440979249338:coloc_data <- merge(coloc_data, read.csv(file, header=F, sep="\t"), all=T)
1440979249455:}
1440979279777:pth <- "/mnt/DATAPART1/Sasi"
1440979280612:setwd(paste0(pth, "/colocalisation"))
1440979280807:file_list_coloc <- list.files(pattern=".tsv")
1440979281405:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440979281563:for(file in file_list_coloc) {
1440979281701:coloc_data <- merge(coloc_data, read.csv(file, header=F, sep="\t"), all=T)
1440979282005:}
1440979289028:coloc_data <- matrix(NA, 0, ncol(read.csv(file, sep="\t")))
1440979316060:coloc_data <- matrix(NA)
1440979317077:for(file in file_list_coloc) {
1440979317299:coloc_data <- merge(coloc_data, read.csv(file, header=F, sep="\t"), all=T)
1440979317469:}
1440979320137:View(coloc_data)
1440979337891:coloc_data <- matrix(NA)
1440979338026:for(file in file_list_coloc) {
1440979338147:coloc_data <- merge(coloc_data, read.csv(file, header=T, sep="\t"), all=T)
1440979338275:}
1440979340178:View(coloc_data)
1441043731678:?file.path
1441043860133:pth <- "/mnt/DATAPART1/Sasi"
1441043862164:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441043862330:file_count <- list.files(paste0(pth, "/count"), pattern=".tsv")[1]
1441043865618:coloc_data <- matrix(NA)
1441043865827:for(file in file_list_coloc) {
1441043865985:coloc_data <- merge(coloc_data, read.csv(file, header=T, sep="\t"), all=T)
1441043866178:}
1441043866595:count_data <- read.csv(file_count, header=T, sep="\t")
1441043952895:coloc_data <- matrix(NA)
1441043953081:for(file in file_list_coloc) {
1441043953245:coloc_data <- merge(coloc_data, read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), all=T)
1441043953810:}
1441043954554:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441044068544:count <- count[count$Area < 99]
1441044078836:count <- count_data[count_data$Area < 99]
1441044082114:count <- count_data[count_data$Area < 99,]
1441044088403:View(count_data)
1441044107988:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441044118867:count <- count_data[count_data$Area > 99,]
1441044128567:count <- xtabs(~Label, count)
1441044142179:count
1441044151483:View(count)
1441044187550:View(coloc_data)
1441044355030:coloc_data <- matrix(NA)
1441044355218:for(file in file_list_coloc) {
1441044355602:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), c(as.character(file)))
1441044355787:coloc_data <- merge(coloc_data, new, all=T)
1441044355913:}
1441044359374:View(coloc_data)
1441044448973:coloc <- coloc_data[coloc_data$parameter == "area fraction"]
1441044451624:View(coloc)
1441044464634:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441044468748:View(coloc)
1441044499066:View(coloc)
1441044499649:View(new)
1441044512819:count <- as.data.frame(xtabs(~Label, count))
1441044515328:View(count_data)
1441044518182:View(count)
1441044531739:count <- count_data[count_data$Area > 99,]
1441044532162:count <- as.data.frame(xtabs(~Label, count))
1441044533999:View(count)
1441044585077:?substr
1441044649943:coloc_data <- matrix(NA)
1441044650081:for(file in file_list_coloc) {
1441044650196:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), c(gsub("_coloc.tsv", "", as.character(file)))
1441044650339:coloc_data <- merge(coloc_data, new, all=T)
1441044650649:}
1441044660385:coloc_data <- matrix(NA)
1441044660513:for(file in file_list_coloc) {
1441044660658:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), c(gsub("_coloc.tsv", "", as.character(file))))
1441044660802:coloc_data <- merge(coloc_data, new, all=T)
1441044660969:}
1441044665784:View(coloc_data)
1441044669298:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441044669521:#
1441044669801:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441044670098:count <- count_data[count_data$Area > 99,]
1441044670234:count <- as.data.frame(xtabs(~Label, count))
1441044670372:#
1441044670457:res <- merge
1441046671086:names(coloc)
1441046708733:coloc_data <- matrix(NA)
1441046708878:for(file in file_list_coloc) {
1441046708988:Label <- c(gsub("_coloc.tsv", "", as.character(file)))
1441046709114:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441046709258:coloc_data <- merge(coloc_data, new, all=T)
1441046709644:}
1441046709873:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441046715419:names(coloc)
1441046721057:res <- merge(coloc, count, by="Label")
1441046724163:res
1441046750868:names(coloc) %in% names(count)
1441046761407:res <- merge(coloc, count, by.x="Label")
1441046766907:?merge
1441046801679:res <- merge(coloc, count, by=Label)
1441046818484:res <- merge(coloc, count)
1441046824995:res <- merge(coloc, count)
1441046856426:res <- merge(coloc, count, all=T)
1441046860164:View(res)
1441047065937:count$Label <- gsub(as.character(count$Label), "C3-", "")
1441047094228:?apply
1441047153468:gsub
1441047156885:count$Label <- apply(as.character(count$Label), 1, gsub("C3-", "")
1441047169780:)
1441047199919:count$Label <- apply(as.character(count$Label), gsub("C3-", ""))
1441047214621:count$Label <- lapply(as.character(count$Label), 1, gsub("C3-", ""))
1441047220094:?lapply
1441047239066:count$Label <- lapply(as.character(count$Label), gsub, "C3-", "")
1441047245980:count
1441047255571:count <- count_data[count_data$Area > 99,]
1441047255740:count <- as.data.frame(xtabs(~Label, count))
1441047255908:count$Label <- lapply(as.character(count$Label), gsub, "C3-", "")
1441047258549:count
1441047271580:count <- count_data[count_data$Area > 99,]
1441047271779:count <- as.data.frame(xtabs(~Label, count))
1441047275024:View(count)
1441047284211:count$Label <- lapply(as.character(count$Label), gsub, "C3-", "")
1441047289274:View(count)
1441047341683:count$Label <- lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} )
1441047343483:count <- count_data[count_data$Area > 99,]
1441047343651:count <- as.data.frame(xtabs(~Label, count))
1441047343810:count$Label <- lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} )
1441047346363:count
1441047356722:res <- merge(coloc, count)
1441047385723:class(count$Label)
1441047400027:class(unlistcount$Label))
1441047402939:class(unlist(count$Label))
1441047411180:count <- count_data[count_data$Area > 99,]
1441047411316:count <- as.data.frame(xtabs(~Label, count))
1441047411455:count$Label <- unliost(lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} ))
1441047418651:count <- count_data[count_data$Area > 99,]
1441047418787:count <- as.data.frame(xtabs(~Label, count))
1441047418924:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} ))
1441047421955:#
1441047422155:res <- merge(coloc, count)
1441047430712:class(count$Label)
1441047434532:class(coloc$Label)
1441047448601:count$Label <- factor(lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} ))
1441047450858:count <- count_data[count_data$Area > 99,]
1441047451035:count <- as.data.frame(xtabs(~Label, count))
1441047451210:count$Label <- factor(lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} ))
1441047494933:coloc$Label <- as.character(coloc$Label)
1441047498188:count <- count_data[count_data$Area > 99,]
1441047498314:count <- as.data.frame(xtabs(~Label, count))
1441047498494:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} ))
1441047499604:res <- merge(coloc, count)
1441047502788:coloc_data <- matrix(NA)
1441047502923:for(file in file_list_coloc) {
1441047503051:Label <- c(gsub(gsub("_coloc.tsv", "", as.character(file)), "C1-", ""))
1441047503195:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441047503331:coloc_data <- merge(coloc_data, new, all=T)
1441047503465:}
1441047503620:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441047503738:coloc$Label <- as.character(coloc$Label)
1441047503914:#
1441047504026:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441047504178:count <- count_data[count_data$Area > 99,]
1441047504323:count <- as.data.frame(xtabs(~Label, count))
1441047504459:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub("C3-", "", x)} ))
1441047504601:#
1441047505036:res <- merge(coloc, count)
1441047528378:coloc_data <- matrix(NA)
1441047528536:for(file in file_list_coloc) {
1441047528849:Label <- c(gsub(gsub("_coloc.tsv", "", as.character(file)), "C1-", ""))
1441047529010:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441047529162:coloc_data <- merge(coloc_data, new, all=T)
1441047529441:}
1441047531403:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441047536480:View(coloc)
1441047579095:coloc_data <- matrix(NA)
1441047579257:for(file in file_list_coloc) {
1441047579435:Label <- c(gsub("C1-", "", gsub("_coloc.tsv", "", as.character(file))))
1441047579604:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441047579755:coloc_data <- merge(coloc_data, new, all=T)
1441047580083:}
1441047580763:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441047583562:View(coloc)
1441047638424:coloc_data <- matrix(NA)
1441047638584:for(file in file_list_coloc) {
1441047638706:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441047638843:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441047638989:coloc_data <- merge(coloc_data, new, all=T)
1441047639171:}
1441047639426:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441047639715:#
1441047639979:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441047640130:count <- count_data[count_data$Area > 99,]
1441047640260:count <- as.data.frame(xtabs(~Label, count))
1441047640609:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441047642930:#
1441047643074:res <- merge(coloc, count)
1441047654999:View(res)
1441047686645:res
1441047720118:res <- res[, c(1,3,4,5,7)]
1441047723412:res
1441047816296:names(res) <- c("file", "red", "green", "red_AND_green", "cell_count")
1441047819125:View(res)
1441047830036:names(res) <- c("image", "red", "green", "red_AND_green", "cell_count")
1441047897950:path()
1441047902549:getwd()
1441047975369:View(res)
1441048560620:res$green / res$cell_count
1441048608650:res$green_per_cell <- res$green / res$cell_count
1441048608924:res$red_AND_green_per_cell <- res$red_AND_green / res$cell_count
1441048611755:View(res)
1441048634177:?round
1441048667496:res$green_per_cell <- round(res$green / res$cell_count, 5)
1441048667725:res$red_AND_green_per_cell <- round(res$red_AND_green / res$cell_count, 5)
1441048670035:View(res)
1441048796893:write.table("measurements.tsv", res, sep="\t")
1441048803157:write.csv("measurements.tsv", res, sep="\t")
1441048833996:?write.table
1441048843387:write.csv(res, "measurements.tsv", sep="\t")
1441048880879:write.csv(res, "measurements.tsv", sep="\t", eol="\nr")
1441048897749:write.csv(res, "measurements.tsv", eol="\nr")
1441048922381:View(read.table("measurements.tsv"))
1441048930021:write.csv(res, "measurements.tsv")
1441048932134:View(read.table("measurements.tsv"))
1441048955348:write.csv(res, "measurements.tsv", sep="\t")
1441048983684:write.csv(res, "measurements.tsv")
1441048987765:View(read.table("measurements.tsv"))
1441048996024:View(read.table("measurements.tsv", sep="\t"))
1441049010009:View(read.csv("measurements.tsv"))
1441049025628:system(ls)
1441049030468:system("ls")
1441049040709:system("rm measurements.tsv")
1441049152847:res_stat <- scale(res)
1441049171605:?apply()
1441049187461:apply(res, 2, class)
1441049272059:res[,-1] <- as.numeric(res[-1])
1441049350882:res_stat <- (apply(as.numeric(res[-1], scale)
1441049353580:)
1441049360094:)
1441049370366:res_stat <- (apply(as.numeric(res[-1], 2, scale)))
1441049381708:res_stat <- (apply(as.numeric(res[-1], 2, scale())))
1441049431752:res_stat[,-1] <- scale(as.numeric(res_stat[,-1]))
1441049437148:res_stat[,-1] <- scale(as.numeric(res[,-1]))
1441049446427:as.numeric(res[,-1]
1441049449077:)
1441049455124:res[,-1]
1441049511451:res_stat <- res
1441049577224:res_stat <- res[,c(1,6,7)]
1441049580735:View(res_stat)
1441049672046:res$green_per_cell_norm <- scale(as.numeric(res$green_per_cell))
1441049672247:res$red_AND_green_per_cell <- scale(as.numeric(res$red_AND_green_per_cell))
1441049674803:View(res)
1441049925967:pth<- "/mnt/DATAPART1/Sasi"
1441049932381:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441049933428:file_count <- list.files(paste0(pth, "/count"), pattern=".tsv")[1]
1441049933845:coloc_data <- matrix(NA)
1441049934188:for(file in file_list_coloc) {
1441049934396:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441049934679:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441049934909:coloc_data <- merge(coloc_data, new, all=T)
1441049935204:}
1441049935455:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441049935699:#
1441049935931:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441049936179:count <- count_data[count_data$Area > 99,]
1441049936419:count <- as.data.frame(xtabs(~Label, count))
1441049936636:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441049936859:### MERGE TABLES
1441049937099:res <- merge(coloc, count)
1441049937291:res <- res[, c(1,3,4,5,7)]
1441049937523:names(res) <- c("image", "red", "green", "red_AND_green", "cell_count")
1441049937763:res$green_per_cell <- round(res$green / res$cell_count, 5)
1441049937979:res$red_AND_green_per_cell <- round(res$red_AND_green / res$cell_count, 5)
1441049938186:### STATISTICS
1441049938411:res$green_per_cell_norm <- scale(as.numeric(res$green_per_cell))
1441049938634:res$red_AND_green_per_cell <- scale(as.numeric(res$red_AND_green_per_cell))
1441049938867:### SAVE AWAY
1441049939235:write.csv(res, "measurements.csv")
1441049976024:detach("package:Biobase", unload=TRUE)
1441049976274:detach("package:BiocGenerics", unload=TRUE)
1441049978377:detach("package:DESeq", unload=TRUE)
1441049986449:detach("package:doParallel", unload=TRUE)
1441049987557:detach("package:foreach", unload=TRUE)
1441049989473:detach("package:iterators", unload=TRUE)
1441049991924:library("iterators", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.2")
1441049994199:detach("package:SeqGSEA", unload=TRUE)
1441049995424:detach("package:RevoUtilsMath", unload=TRUE)
1441049996958:library("RevoUtilsMath", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.2")
1441050011851:detach("package:BiocGenerics", unload=TRUE)
1441050012282:detach("package:Biobase", unload=TRUE)
1441050014749:detach("package:DESeq", unload=TRUE)
1441050018483:detach("package:doParallel", unload=TRUE)
1441050019250:detach("package:foreach", unload=TRUE)
1441050040899:pth<- "/mnt/DATAPART1/Sasi"
1441050044205:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441050044328:file_count <- list.files(paste0(pth, "/count"), pattern=".tsv")[1]
1441050044534:coloc_data <- matrix(NA)
1441050045308:for(file in file_list_coloc) {
1441050045507:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441050045656:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441050045839:coloc_data <- merge(coloc_data, new, all=T)
1441050045968:}
1441050046135:coloc <- coloc_data[coloc_data$parameter == "area fraction",]
1441050046281:#
1441050046429:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441050046577:count <- count_data[count_data$Area > 99,]
1441050046879:count <- as.data.frame(xtabs(~Label, count))
1441050047053:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441050047183:### MERGE TABLES
1441050047363:res <- merge(coloc, count)
1441050047533:res <- res[, c(1,3,4,5,7)]
1441050047826:names(res) <- c("image", "red", "green", "red_AND_green", "cell_count")
1441050047974:res$green_per_cell <- round(res$green / res$cell_count, 5)
1441050048101:res$red_AND_green_per_cell <- round(res$red_AND_green / res$cell_count, 5)
1441050048253:### STATISTICS
1441050048381:res$green_per_cell_norm <- scale(as.numeric(res$green_per_cell))
1441050048524:res$red_AND_green_per_cell <- scale(as.numeric(res$red_AND_green_per_cell))
1441050048678:### SAVE AWAY
1441050048826:write.csv(res, "measurements.csv")
1441055270588:setwd("/mnt/DATAPART1/Sasi/output")
1441055286549:View(read.csv("measurements.csv"))
1441150882726:pth <- /mnt/DATAPART1/Sasi
1441150888895:pth <- "/mnt/DATAPART1/Sasi"
1441150891504:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441150891728:file_count <- list.files(paste0(pth, "/count"), pattern=".tsv")[1]
1441150891981:coloc_data <- matrix(NA)
1441150892183:for(file in file_list_coloc) {
1441150892381:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441150892631:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441150892871:coloc_data <- merge(coloc_data, new, all=T)
1441150893084:}
1441150893962:coloc <- coloc_data
1441151260523:View(coloc_data)
1441151459974:coloc <- cast(coloc_data, parameter~red)
1441151466248:library(reshape2)
1441151467983:coloc <- cast(coloc_data, parameter~red)
1441151504878:coloc <- dcast(coloc_data, parameter~red)
1441151516857:View(coloc)
1441151560177:coloc <- coloc_data
1441151738098:coloc <- melt(coloc_data)
1441151743024:View(coloc)
1441151814474:coloc <- acast(coloc_data, parameter~variable)
1441151817849:coloc <- acast(coloc_data, parameter)
1441151833326:coloc <- acast(coloc_data, parameter ~ red ~ green)
1441151847325:coloc <- acast(coloc_data, parameter ~ red)
1441151849848:View(coloc)
1441151849973:View(coloc)
1441151969374:coloc <- acast(coloc_data[,-1], parameter ~ red)
1441151988023:coloc <- coloc_data[,-1]
1441151989973:View(coloc)
1441151993399:View(coloc_data)
1441151996874:View(coloc)
1441152016285:coloc <- coloc_data[,-6]
1441152017624:View(coloc_data)
1441152018256:View(coloc)
1441152026518:coloc_data <- coloc_data[,-6]
1441152037849:coloc <- acast(coloc_data, parameter ~ red)
1441152050423:coloc <- acast(coloc_data, parameter)
1441152092498:coloc <- melt(coloc_data)
1441152094649:View(coloc)
1441152147274:x <- t(coloc_data[,1:4])
1441152149702:dim(x)
1441152154823:View(x)
1441152212262:coloc <- t(coloc_data)
1441152213481:names(coloc) <- coloc[1,]
1441152217928:View(coloc)
1441152397928:?apply
1441152637511:coloc <- aggregate(formula= . ~parameter, data=coloc_data)
1441152649048:coloc <- aggregate(formula= . ~parameter, data=coloc_data, FUN=sum())
1441152651573:coloc <- aggregate(formula= . ~parameter, data=coloc_data, FUN=sum
1441152653374:)
1441152656581:View(coloc)
1441152768260:unique(coloc_data$parameter)
1441152799109:coloc_data <- coloc_data[,-6]
1441152799329:coloc_area <- coloc[,coloc$parameter=="area_fraction"]
1441152799504:coloc_mean <- coloc[,coloc$parameter=="mean"]
1441152799681:coloc_stdev <- coloc[,coloc$parameter=="st. dev."]
1441152808580:View(coloc_mean)
1441152818353:coloc <- coloc_data[,-6]
1441152818859:coloc_area <- coloc[,coloc$parameter=="area_fraction"]
1441152819009:coloc_mean <- coloc[,coloc$parameter=="mean"]
1441152819186:coloc_stdev <- coloc[,coloc$parameter=="st. dev."]
1441152823509:coloc_mean <- coloc[,coloc$parameter=="mean"]
1441152846430:coloc[,coloc$parameter=="mean"]
1441152937254:View(coloc_data)
1441152938949:View(coloc_area)
1441152961149:coloc_area <- coloc[,coloc$parameter=="area_fraction"]
1441152974649:coloc_area <- coloc[coloc$parameter=="area_fraction",]
1441152976802:View(coloc_area)
1441153002653:coloc_area <- coloc[,coloc_data$parameter=="area_fraction"]
1441153007198:coloc_area <- coloc_data[,coloc_data$parameter=="area_fraction"]
1441153019470:coloc_area <- coloc_data[,coloc_data$parameter=="area_fraction"]
1441153075753:coloc_data <- coloc_data[,-6]
1441153075939:coloc_data$parameter <- as.character(coloc_data$parameter)
1441153078426:coloc_area <- coloc_data[,coloc_data$parameter=="area_fraction"]
1441153086023:coloc_area <- coloc_data[,coloc_data$parameter=="area fraction"]
1441153119473:unique(coloc_data$parameter)
1441153147948:sum(coloc_data$parameter == "area fraction")
1441153169606:coloc_area <- coloc_data[,coloc_data$parameter == "area fraction"]
1441153177471:coloc_area <- coloc_data[coloc_data$parameter == "area fraction"]
1441153183082:coloc_area <- coloc_data[coloc_data$parameter == "area fraction",]
1441153186229:View(coloc_area)
1441153245047:coloc_mean <- coloc_data[coloc_data$parameter == "mean",]
1441153245207:coloc_stdev <- coloc_data[coloc_data$parameter == "st. dev.",]
1441153257557:View(coloc_mean)
1441153311742:for( i in unique(coloc_data$parameter)) {
1441153313015:}
1441153323850:coloc_stdev <- coloc_data[coloc_data$parameter == "st. dev",]
1441153393824:sum(coloc_data == i)
1441153663506:coloc <- matrix(NA)
1441153663978:for( i in unique(coloc_data$parameter)) {
1441153664148:new <- coloc_data[coloc_data$parameter == i,]
1441153664299:new <- new[,-1]
1441153664452:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441153664602:coloc <- merge(coloc, new)
1441153664775:}
1441153669100:View(coloc)
1441208960790:pth <- "/mnt/DATAPART1/Sasi"
1441208961908:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441208962068:file_count <- list.files(paste0(pth, "/count"), pattern=".tsv")[1]
1441208962235:coloc_data <- matrix(NA)
1441208962425:for(file in file_list_coloc) {
1441208962595:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441208962763:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441208962922:coloc_data <- merge(coloc_data, new, all=T)
1441208963089:}
1441208964010:coloc_data <- coloc_data[,-6]
1441208964010:coloc_data$parameter <- as.character(coloc_data$parameter)
1441208964011:coloc <- matrix(NA)
1441208964011:for( i in unique(coloc_data$parameter)) {
1441208964011:new <- coloc_data[coloc_data$parameter == i,]
1441208964148:new <- new[,-1]
1441208964293:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441208964433:coloc <- merge(coloc, new)
1441208964608:}
1441208964791:#
1441208964960:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441208965137:count <- count_data[count_data$Area > 99,]
1441208965325:count <- as.data.frame(xtabs(~Label, count))
1441208965474:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441209010011:paste0(pth, "/count/", file_count)
1441209038863:file_count <- list.files(paste0(pth, "/count"), pattern=".tsv")[1]
1441209043050:file_count <- list.files(paste0(pth, "/count"), pattern=".csv")[1]
1441209491913:file_count <- list.files(paste0(pth, "/count"), pattern=".csv")[1]
1441209506395:file_count <- list.files(paste0(pth, "/count"), pattern=".tsv")[1]
1441209515227:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441209515409:count <- count_data[count_data$Area > 99,]
1441209515610:count <- as.data.frame(xtabs(~Label, count))
1441209515778:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441209519922:View(coloc)
1441209573927:coloc <- coloc[,-1]
1441209586099:coloc <- matrix(NA)
1441209586346:for( i in unique(coloc_data$parameter)) {
1441209586522:new <- coloc_data[coloc_data$parameter == i,]
1441209586681:new <- new[,-1]
1441209586834:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441209586986:coloc <- merge(coloc, new)
1441209587129:}
1441209587528:coloc <- coloc[,-2]
1441209648643:coloc <- matrix(NA)
1441209648779:for( i in unique(coloc_data$parameter)) {
1441209648921:new <- coloc_data[coloc_data$parameter == i,]
1441209649059:new <- new[,-1]
1441209649200:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441209649328:coloc <- merge(coloc, new)
1441209649564:}
1441209649873:coloc <- coloc[,c(1,4,7,10)]
1441209677104:count_data <- read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t")
1441209677273:count <- count_data[count_data$Area > 99,]
1441209677425:count <- as.data.frame(xtabs(~Label, count))
1441209677575:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441209678032:### MERGE TABLES
1441209678295:res <- merge(coloc, count)
1441209684527:View(res)
1441209748140:coloc <- matrix(NA)
1441209748329:for( i in unique(coloc_data$parameter)) {
1441209748488:new <- coloc_data[coloc_data$parameter == i,]
1441209748625:new <- new[,-1]
1441209748770:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441209748922:coloc <- merge(coloc, new)
1441209749345:}
1441209754387:View(coloc_data)
1441209761971:View(count_data)
1441209762910:View(coloc)
1441209790217:coloc <- coloc[,c(1,4,5,8,7,10,11)]
1441209801617:coloc <- matrix(NA)
1441209801776:for( i in unique(coloc_data$parameter)) {
1441209801929:new <- coloc_data[coloc_data$parameter == i,]
1441209802066:new <- new[,-1]
1441209802200:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441209802344:coloc <- merge(coloc, new)
1441209802617:}
1441209804503:View(coloc_data)
1441209808345:View(coloc)
1441209838829:coloc <- coloc[,c(1,4,5,7,8,10,11)]
1441209967111:names(res) <- c("image", "green_area_fraction", "yellow_area_fraction", "green_mean", "yellow_mean", "green_stdev", "yellow_stdev", "cell_count")
1441209976876:res <- merge(coloc, count)
1441209977859:names(res) <- c("image", "green_area_fraction", "yellow_area_fraction", "green_mean", "yellow_mean", "green_stdev", "yellow_stdev", "cell_count")
1441210015936:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441210016104:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441210035022:system("mkdir output")
1441210036132:write.csv(res, "output/measurements.csv")
1441210042197:print(paste0("Saved to: ", pth, "output/measurements.csv"))
1441210052057:system("mkdir output")
1441210052248:write.csv(res, "/output/measurements.csv")
1441210052722:print(paste0("Saved to: ", pth, "output/measurements.csv"))
1441210106411:data <- read.csv(paste0(pth, "/output/measurements.csv"))
1441210251522:data <- read.csv(paste0(pth, "/output/measurements.csv"))
1441210259621:View(data)
1441210289683:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441210299454:View(data)
1441210404406:View(data)
1441210415782:sum(is.na(data))
1441216569216:pth <- "/mnt/DATAPART1/Sasi"
1441216574679:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441216574883:file_count_list <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441216576156:coloc_data <- matrix(NA)
1441216576338:for(file in file_list_coloc) {
1441216576499:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441216576638:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441216576802:coloc_data <- merge(coloc_data, new, all=)T
1441216576962:}
1441216581900:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441216582258:file_count_list <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441218332704:pth <- "/mnt/DATAPART1/Sasi"
1441218337910:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441218339540:file_count_list <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441218361141:file_list_count
1441218375061:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441218398837:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441218412557:file_list_count
1441218455625:file_list_count <- file_list_count[-81]
1441218457136:file_list_count
1441218475954:rm(file_count_list)
1441218482563:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441218485080:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441218494928:count_data <- matrix(NA)
1441218495247:for( in in file_list_count) {
1441218495408:count_data <- rbind(count_data, read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t"))
1441218495544:}
1441218498411:count_data <- matrix(NA)
1441218526928:for ( in in file_list_count) {
1441218531918:for ( i in file_list_count) {
1441218532519:count_data <- rbind(count_data, read.csv(paste0(pth, "/count/", file_count), header=T, sep="\t"))
1441218532838:}
1441218565004:count_data <- matrix(NA)
1441218565160:for ( file in file_list_count) {
1441218565312:count_data <- rbind(count_data, read.csv(paste0(pth, "/count/", file), header=T, sep="\t"))
1441218566008:}
1441218591583:coloc_data <- matrix(NA)
1441218591745:for(file in file_list_coloc) {
1441218591888:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441218592023:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441218592319:coloc_data <- merge(coloc_data, new, all=)T
1441218592463:}
1441218592614:coloc_data <- coloc_data[,-6]
1441218592766:coloc_data$parameter <- as.character(coloc_data$parameter)
1441218592926:coloc <- matrix(NA)
1441218593070:for( i in unique(coloc_data$parameter)) {
1441218593214:new <- coloc_data[coloc_data$parameter == i,]
1441218593358:new <- new[,-1]
1441218597840:coloc_data <- matrix(NA)
1441218598054:for(file in file_list_coloc) {
1441218598655:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441218598895:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441218599070:coloc_data <- merge(coloc_data, new, all=)T
1441218599295:}
1441218615212:coloc_data <- matrix(NA)
1441218615472:for(file in file_list_coloc) {
1441218615672:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441218615872:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441218616094:coloc_data <- merge(coloc_data, new, all=T)
1441218616327:}
1441218617328:coloc_data <- coloc_data[,-6]
1441218617542:coloc_data$parameter <- as.character(coloc_data$parameter)
1441218618998:coloc <- matrix(NA)
1441218619174:for( i in unique(coloc_data$parameter)) {
1441218619335:new <- coloc_data[coloc_data$parameter == i,]
1441218619495:new <- new[,-1]
1441218619655:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441218619822:coloc <- merge(coloc, new)
1441218620135:}
1441218620381:coloc <- coloc[,c(1,4,5,7,8,10,11)]
1441218623758:View(coloc)
1441218638134:count_data <- matrix(NA)
1441218640190:for ( file in file_list_count) {
1441218666726:paste0(pth, "/count/", file
1441218679293:paste0(pth, "/count/", file
1441218685001:)
1441218695616:count_data <- matrix(NA)
1441218695824:for ( file in file_list_count) {
1441218696048:count_data <- rbind(count_data, read.csv(paste0(pth, "/count/", file), header=T, sep="\t"))
1441218696272:}
1441218744860:new <-read.csv(paste0(pth, "/count/", file)
1441218757257:)
1441218759184:new
1441218788453:count_data <- matrix(NA)
1441218789090:for ( file in file_list_count) {
1441218790571:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1441218790753:count_data <- rbind(count_data, new)
1441218790953:}
1441218827738:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1441218829265:new
1441218833969:dim(new)
1441218838346:count_data <- matrix(NA, 0, 13)
1441218839800:for ( file in file_list_count) {
1441218840000:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1441218840185:count_data <- rbind(count_data, new)
1441218840546:}
1441218847760:View(count_data)
1441218861482:count <- count_data[count_data$Area > 99,]
1441218865831:count <- as.data.frame(xtabs(~Label, count))
1441218866544:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441218879042:View(count)
1441218885820:### MERGE TABLES
1441218886001:res <- merge(coloc, count)
1441218888926:View(res)
1441218895560:names(res) <- c("image", "green_area_fraction", "yellow_area_fraction", "green_mean", "yellow_mean", "green_stdev", "yellow_stdev", "cell_count")
1441218895991:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441218896162:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441218910984:system("mkdir output")
1441218911168:write.csv(res, "output/measurements.csv")
1441218911328:print(paste0("Saved to: ", pth, "/output/measurements.csv"))
1441219031282:gsub("_", "3", res$Label)
1441219061888:apply(res$Label, gsub, "_", "3")
1441219067931:apply(res$Label, FUN=gsub, "_", "3")
1441219077793:lapply(res$Label, FUN=gsub, "_", "3")
1441219086520:gsub("_", "3", res$Label[1])
1441219101408:?gsub
1441219127175:gsub("_", "3", res$image)
1441219236582:res <- merge(coloc, count)
1441219236988:names(res) <- c("file", "green_area_fraction", "yellow_area_fraction", "green_mean", "yellow_mean", "green_stdev", "yellow_stdev", "cell_count")
1441219237451:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441219238307:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441219274116:strsplit(res$file, "_")
1441219289528:strsplit(as.character(res$file), "_")
1441219308609:?strsplit
1441219376611:res$meta <- strsplit(res$file, "_")
1441219386883:res$meta <- strsplit(as.character(res$file), "_")
1441219400019:View(res)
1441219414452:res <- merge(coloc, count)
1441219414594:names(res) <- c("file", "green_area_fraction", "yellow_area_fraction", "green_mean", "yellow_mean", "green_stdev", "yellow_stdev", "cell_count")
1441219414726:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441219415022:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441219416570:meta <- strsplit(as.character(res$file), "_")
1441219422451:class(meta)
1441219431169:meta[1]
1441219458344:as.matrix(meta)
1441219470075:as.data.frame(meta)
1441219487795:meta <- as.data.frame(t(meta))
1441219493666:class(meta)
1441219498594:meta
1441219507570:dim(meta)
1441219510196:View(new)
1441219516319:View(meta)
1441219523001:meta <- strsplit(as.character(res$file), "_")
1441219528920:meta <- as.data.frame(meta)
1441219531119:View(meta)
1441219568070:/as.data.frame()
1441219570819:?as.data.frame()
1441219579731:meta <- t(as.data.frame(strsplit(as.character(res$file), "_")))
1441219581625:View(meta)
1441219634972:meta$file <- rownames(meta)
1441219641120:meta$file <- row.names(meta)
1441219655026:meta <- t(as.data.frame(strsplit(as.character(res$file), "_")))
1441219660723:meta$file <- row.names(meta)
1441219665345:meta <- t(as.data.frame(strsplit(as.character(res$file), "_")))
1441219676619:row.names(meta)
1441219714700:meta <- t(cbind(as.data.frame(strsplit(as.character(res$file), "_")), res$file)
1441219720628:)
1441219745124:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), res$file))
1441219749426:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), res$file)
1441219751445:View(meta)
1441219762495:View(res)
1441219794446:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), res$file)
1441219796919:View(meta)
1441219805820:res$file
1441219816519:t(as.data.frame(strsplit(as.character(res$file), "_")))
1441219842774:dim(t(as.data.frame(strsplit(as.character(res$file), "_"))))
1441219850022:dim(res$file)
1441219856870:View(res)
1441219866195:length(res$file)
1441219907757:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file)
1441219913069:)
1441219914820:View(meta)
1441219947157:meta <- meta[, 6:10]
1441219949302:View(meta)
1441219989400:res <- merge(coloc, count)
1441219989975:names(res)[1] <- c("file")
1441219990173:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441219990927:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441220003974:res <- merge(coloc, count)
1441220004117:names(res) <- c("file", "green_area_fraction", "yellow_area_fraction", "green_mean", "yellow_mean", "green_stdev", "yellow_stdev", "cell_count")
1441220004270:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441220004454:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441220053525:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441220054020:meta <- meta[, 6:10]
1441220054945:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441220072111:res <- merge(res, meta)
1441220074320:View(res)
1441220138298:res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441220140196:View(res)
1441220175799:res$file <- gsub("_", "/", res$file)
1441220178120:View(res)
1441220353931:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441220362553:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441220375760:pth <_ getwd()
1441220376199:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441220381003:pth <- getwd()
1441220381509:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441220386273:View(data)
1441220431845:pth <- "/mnt/DATAPART1/Sasi"
1441220432829:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441220474047:xtabs(~cell_line, data)
1441220499671:library(ggplot2)
1441220794119:ggplot(data) +
1441220827745:ggplot(data, aes(cell_line)) +
1441220834396:geom_histogram()
1441221195831:?split
1441221969153:pth <- "/mnt/DATAPART1/Sasi"
1441221971094:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441221972793:library(ggplot2)
1441221982285:p1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441221982463:geom_ber(stat=identity) +
1441221982606:facet_grid(~cell_line)
1441221988341:p1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441221988509:geom_bar(stat=identity) +
1441221988645:facet_grid(~cell_line)
1441222003846:p1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441222003973:geom_bar() +
1441222004116:facet_grid(~cell_line)
1441222013536:p1
1441222040306:p1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441222040489:geom_bar(stat="identity") +
1441222040666:facet_grid(~cell_line)
1441222150894:p1
1441222207195:p1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441222207329:geom_bar(stat="identity") +
1441222207457:facet_wrap(~cell_line)
1441222211038:p1
1441222332102:p1.2 <- ggplot(data, aes(treatment, green_mean_per_cell)) +
1441222332220:geom_bar(stat="identity") +
1441222332348:facet_wrap(~cell_line)
1441222332484:p1.3 <- ggplot(data, aes(treatment, yellow_area_fraction_per_cell)) +
1441222332658:geom_bar(stat="identity") +
1441222332785:facet_wrap(~cell_line)
1441222337371:p1.3
1441222344781:View(data)
1441222359131:p1.2
1441222822204:?"environment-class"
1441222835963:?"environment"
1441222859772:globalenv()
1441222884779:search()
1441222898707:.GlobalEnv
1441223169925:ls
1441223173647:ls()
1441223473798:as.character(p1.2)
1441223793145:substitute(p1.1)
1441223795691:substitute(p1.2)
1441223803211:class(substitute(p1.2))
1441223812316:class(deparse(substitute(p1.2))
1441223813612:)
1441223926212:pth <- getwd()
1441223932197:pth <- "/mnt/DATAPART1/Sasi"
1441223933804:setwd(pth)
1441223960280:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441223960280:geom_bar(stat="identity") +
1441223960281:facet_wrap(~cell_line)
1441223960285:p1.2 <- ggplot(data, aes(treatment, green_mean_per_cell)) +
1441223960286:geom_bar(stat="identity") +
1441223960286:facet_wrap(~cell_line)
1441223960290:#p1.3 <- ggplot(data, aes(treatment, yellow_area_fraction_per_cell)) +
1441223960290:#  geom_bar(stat="identity") +
1441223960290:#  facet_wrap(~cell_line)
1441223960291:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441223960291:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441223960291:geom_bar(stat="identity") +
1441223960292:facet_wrap(~treatment)
1441223960301:p2.1 <- ggplot(data, aes(cell_line, green_mean_per_cell)) +
1441223960301:geom_bar(stat="identity") +
1441223960301:facet_wrap(~treatment)
1441223963564:system("mkdir plots")
1441223963747:system("cd plots")
1441223964387:plots <- c(p1.1, p1.2, p2.1, p2.2) #ls()
1441223972542:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441223972543:geom_bar(stat="identity") +
1441223972543:facet_wrap(~treatment)
1441223972548:p2.2 <- ggplot(data, aes(cell_line, green_mean_per_cell)) +
1441223972548:geom_bar(stat="identity") +
1441223972548:facet_wrap(~treatment)
1441223974141:plots <- c(p1.1, p1.2, p2.1, p2.2) #ls()
1441223975708:for (plot in plots) {
1441223975839:png(paste0(deparse(substitute(plot)), ".png"))
1441223975968:}
1441223977797:system("cd ..")
1441223999661:system("cd plots")
1441224032508:setwd(paste0(pth, '/plots'))
1441224034518:plots <- c(p1.1, p1.2, p2.1, p2.2) #ls()
1441224034795:for (plot in plots) {
1441224034939:png(paste0(deparse(substitute(plot)), ".png"))
1441224035060:}
1441224067232:?dev.off
1441224104333:graphics.off()
1441224107366:for (plot in plots) {
1441224107556:png(paste0(deparse(substitute(plot)), ".png"))
1441224107701:}
1441224110124:graphics.off()
1441224164177:i=0
1441224164333:for (plot in plots) {
1441224164463:png(paste0(i, ".png"))
1441224164605:i=i+1
1441224164757:}
1441224166100:graphics.off()
1441224207595:png(p1.1)
1441224278199:i=0
1441224278661:for (plot in plots) {
1441224278884:png(paste0(i, ".png"))
1441224279084:plot
1441224279260:i=i+1
1441224279469:}
1441224289670:i=0
1441224289671:for (plot in plots) {
1441224289671:png(paste0(i, ".png"))
1441224289671:plot
1441224289671:i=i+1
1441224289671:}
1441224293297:graphics.off
1441224297415:graphics.off()
1441224307176:i=0
1441224307176:for (plot in plots) {
1441224307176:png(paste0(i, ".png"))
1441224307176:plot
1441224307177:i=i+1
1441224307177:}
1441224335370:(
1441224343564:graphics.off()
1441224345483:png(paste0(i, ".png"))
1441224355205:plot
1441224364218:png(paste0(i, ".png"))
1441224371342:p1.1
1441224378645:dev.off
1441224386844:p1.1
1441224401805:dev.off
1441224403356:dev.off
1441224405117:dev.off()
1441224406077:dev.off()
1441224406693:dev.off()
1441224409949:p1.1
1441224453350:png("test.png")
1441224457734:p1.1
1441224463127:dev.off
1441224465692:dev.off()
1441224485884:dev.off()
1441224488356:dev.off()
1441224491013:i=0
1441224491172:for (plot in plots) {
1441224491332:png(paste0(i, ".png"))
1441224491485:plot
1441224491636:dev.off()
1441224491795:i=i+1
1441224492077:}
1441224505994:plots <- c(p1.1, p1.2, p2.1, p2.2) #ls()
1441224517224:plots <- list(p1.1, p1.2, p2.1, p2.2) #ls()
1441224518812:i=0
1441224518956:for (plot in plots) {
1441224519091:png(paste0(i, ".png"))
1441224519236:plot
1441224519389:dev.off()
1441224519531:i=i+1
1441224519691:}
1441224527173:graphics.off()
1441224529647:i=0
1441224529647:for (plot in plots) {
1441224529648:png(paste0(i, ".png"))
1441224529648:plot
1441224529648:dev.off()
1441224529648:i=i+1
1441224529648:}
1441224571502:for (plot in plots) {}
1441224573868:for (plot in plots) {
1441224582157:plot
1441224583372:}
1441224590724:graphics.off()
1441224592693:for (plot in plots) {
1441224594564:plot}
1441224597132:for (plot in plots) {
1441224602245:dev.off
1441224605139:dev.off()
1441224608004:for (plot in plots) {
1441224613928:plot
1441224614819:}
1441224622880:for (plt in plots) {
1441224624134:i=0
1441224624294:for (plt in plots) {
1441224624485:png(paste0(i, ".png"))
1441224624644:plt
1441224624804:dev.off()
1441224624934:i=i+1
1441224625091:}
1441224641044:plots[1]
1441224646484:plot[1]
1441224673100:class(plot[1])
1441224678051:class(p1.1)
1441224710169:class(plot[{1}])
1441224715219:class(plot[[1]])
1441224721845:class(plot{1})
1441224730026:plot[{1}]
1441224783894:dev.off()
1441224807521:i=0
1441224807671:for (plt in ls()) {
1441224807946:png(paste0(i, ".png"))
1441224808094:plt
1441224808221:dev.off()
1441224808373:i=i+1
1441224808674:}
1441224816470:graphics.off()
1441224890973:png("1.png")
1441224891099:p1.1
1441224891505:dev.off()
1441224891518:png(paste0("2.png"))
1441224891526:p1.2
1441224891925:dev.off()
1441224891939:png(paste0("3.png"))
1441224891994:p2.1
1441224892358:dev.off()
1441224892370:png(paste0("4.png"))
1441224892419:p2.2
1441224892790:dev.off()
1441224901478:graphics.off()
1441224929807:pdf("1.pdf")
1441224930119:p1.1
1441224930325:dev.off()
1441225028126:tiff("1.tiff")
1441225028283:p1.1
1441225028724:dev.off()
1441225072800:png("1.png", width=4, height=4)
1441225072999:p1.1
1441225073387:dev.off()
1441225086421:png("1.png", width=4, height=4, units="in")
1441225096729:png("1.png", width=4, height=4, units="in", res=300)
1441225096999:p1.1
1441225097198:dev.off()
1441225102932:png("1.png", width=4, height=4, units="in", res=300)
1441225104271:p1.1
1441225119254:png("1.png")
1441225119470:p1.1
1441225119866:dev.off()
1441225126631:graphics.off()
1441225131222:png("1.png")
1441225131369:p1.1
1441225131764:dev.off()
1441225131780:png(paste0("2.png"))
1441225131817:p1.2
1441225132217:dev.off()
1441225132230:png(paste0("3.png"))
1441225132231:p2.1
1441225132615:dev.off()
1441225132633:png(paste0("4.png"))
1441225132895:p2.2
1441225133267:dev.off()
1441225291960:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225292119:geom_bar(stat="identity") +
1441225292271:facet_wrap(~treatment) +
1441225292419:axis.text.x(angle=45)
1441225309462:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225309606:geom_bar(stat="identity") +
1441225309750:facet_wrap(~treatment) +
1441225310051:theme(axis.text.x(angle=45))
1441225364212:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225364400:geom_bar(stat="identity") +
1441225364576:facet_wrap(~treatment) +
1441225364880:theme(axis.text.x=element.text((angle=45)))
1441225437234:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225437455:geom_bar(stat="identity") +
1441225437599:facet_wrap(~treatment) +
1441225437826:theme(axis.text.x=element.text((angle=45)))
1441225445070:library(ggplot2)
1441225449545:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225449720:geom_bar(stat="identity") +
1441225449846:facet_wrap(~treatment) +
1441225450305:theme(axis.text.x=element.text((angle=45)))
1441225460553:theme(axis.text.x(element.text((angle=45))))
1441225462102:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225462302:geom_bar(stat="identity") +
1441225462454:facet_wrap(~treatment) +
1441225462628:theme(axis.text.x(element.text((angle=45))))
1441225490077:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225490221:geom_bar(stat="identity") +
1441225490431:facet_wrap(~treatment) +
1441225490777:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441225501895:p2.1
1441225513448:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441225513595:geom_bar(stat="identity") +
1441225513719:facet_wrap(~treatment) +
1441225513830:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441225513977:p2.2 <- ggplot(data, aes(cell_line, green_mean_per_cell)) +
1441225514173:geom_bar(stat="identity") +
1441225514320:facet_wrap(~treatment) +
1441225514454:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441225518503:graphics.off()
1441225536877:graphics.off()
1441225538022:png("1.png")
1441225538172:p1.1
1441225538583:dev.off()
1441225538596:png(paste0("2.png"))
1441225538598:p1.2
1441225538997:dev.off()
1441225539011:png(paste0("3.png"))
1441225539019:p2.1
1441225539453:dev.off()
1441225539466:png(paste0("4.png"))
1441225539467:p2.2
1441225539841:dev.off()
1441228034375:View(data)
1441228049872:png("1.png")
1441228050222:p1.1
1441228050655:dev.off()
1441228444694:setwd(pth)
1441228447804:png("1.png")
1441228447920:p1.1
1441228448333:dev.off()
1441228448346:png(paste0("2.png"))
1441228448349:p1.2
1441228448755:dev.off()
1441228448768:png(paste0("3.png"))
1441228448770:p2.1
1441228449149:dev.off()
1441228449161:png(paste0("4.png"))
1441228449162:p2.2
1441228449546:dev.off()
1441231549395:write.csv(data, "data.csv")
1441296755176:pth <- "/mnt/DATAPART1/Sasi"
1441296759199:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441296760067:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441296763317:coloc_data <- matrix(NA)
1441296763491:for(file in file_list_coloc) {
1441296763660:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441296763847:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441296764035:coloc_data <- merge(coloc_data, new, all=T)
1441296764219:}
1441296765682:coloc_data <- coloc_data[,-6]
1441296765683:coloc_data$parameter <- as.character(coloc_data$parameter)
1441296765683:coloc <- matrix(NA)
1441296765683:for( i in unique(coloc_data$parameter)) {
1441296765684:new <- coloc_data[coloc_data$parameter == i,]
1441296765684:new <- new[,-1]
1441296765821:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441296766009:coloc <- merge(coloc, new)
1441296766170:}
1441296766483:coloc <- coloc[,c(1,4,5,7,8,10,11)]
1441296767690:#
1441296767871:count_data <- matrix(NA, 0, 13)
1441296768049:for ( file in file_list_count) {
1441296768283:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1441296768466:count_data <- rbind(count_data, new)
1441296768649:}
1441296770774:# count <- count_data[count_data$Area > 99,]
1441296770943:count <- as.data.frame(xtabs(~Label, count))
1441296858225:pth <- getwd()
1441296862755:pth <- "/mnt/DATAPART1/Sasi"
1441296864042:setwd(pth)
1441296864224:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441296864992:### TOYS
1441296865230:library(ggplot2)
1441296865575:### STATISTICS
1441296866076:#res$green_per_cell_norm <- scale(as.numeric(res$green_per_cell))
1441296866113:#res$red_AND_green_per_cell_norm <- scale(as.numeric(res$red_AND_green_per_cell))
1441296866114:## PLOTS
1441296866212:#split data by cell line
1441296866277:#plot each cell line facets, each treatment x and yellowe mena per cell y
1441296866277:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441296866278:geom_bar(stat="identity") +
1441296866390:facet_wrap(~cell_line)
1441296866481:p1.2 <- ggplot(data, aes(treatment, green_mean_per_cell)) +
1441296866481:geom_bar(stat="identity") +
1441296866481:facet_wrap(~cell_line)
1441296866511:#p1.3 <- ggplot(data, aes(treatment, yellow_area_fraction_per_cell)) +
1441296866521:#  geom_bar(stat="identity") +
1441296866521:#  facet_wrap(~cell_line)
1441296866522:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441296866611:p2.1 <- ggplot(data, aes(cell_line, yellow_mean_per_cell)) +
1441296866611:geom_bar(stat="identity") +
1441296866682:facet_wrap(~treatment) +
1441296866682:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441296866721:p2.2 <- ggplot(data, aes(cell_line, green_mean_per_cell)) +
1441296866821:geom_bar(stat="identity") +
1441296866821:facet_wrap(~treatment) +
1441296866822:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441296866859:## SAVE AWAY
1441296866911:system("mkdir plots")
1441296866915:setwd(paste0(pth, '/plots'))
1441296866916:#plots <- list(p1.1, p1.2, p2.1, p2.2) #ls()
1441296866969:graphics.off()
1441296866969:png("1.png")
1441296866976:p1.1
1441296867456:dev.off()
1441296867468:png(paste0("2.png"))
1441296867470:p1.2
1441296869132:dev.off()
1441296869387:png(paste0("3.png"))
1441296869557:p2.1
1441296869943:dev.off()
1441296869955:png(paste0("4.png"))
1441296869995:p2.2
1441296870372:dev.off()
1441296976586:data2 <- read.csv(paste0(pth, "/output_1/measurements.csv"), row.names = NULL)
1441297453343:summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE, conf.interval=.95) {
1441297453343:library(doBy)
1441297453344:# New version of length which can handle NA's: if na.rm==T, don't count them
1441297453344:length2 <- function (x, na.rm=FALSE) {
1441297453344:if (na.rm) sum(!is.na(x))
1441297453344:else       length(x)
1441297453344:}
1441297453345:# Collapse the data
1441297453345:formula <- as.formula(paste(measurevar, paste(groupvars, collapse=" + "), sep=" ~ "))
1441297453345:datac <- summaryBy(formula, data=data, FUN=c(length2,mean,sd), na.rm=na.rm)
1441297453346:# Rename columns
1441297453346:names(datac)[ names(datac) == paste(measurevar, ".mean",    sep="") ] <- measurevar
1441297453347:names(datac)[ names(datac) == paste(measurevar, ".sd",      sep="") ] <- "sd"
1441297453347:names(datac)[ names(datac) == paste(measurevar, ".length2", sep="") ] <- "N"
1441297453348:datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
1441297453348:# Confidence interval multiplier for standard error
1441297453349:# Calculate t-statistic for confidence interval:
1441297453349:# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
1441297453349:ciMult <- qt(conf.interval/2 + .5, datac$N-1)
1441297453349:datac$ci <- datac$se * ciMult
1441297453350:return(datac)
1441297453350:}
1441297464081:summarySE(data)
1441297645224:summary(data)
1441297680437:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441297680611:geom_bar(stat="identity") +
1441297680792:geom_errorbar(colour="black", width=.1, position=dodge) +
1441297681191:facet_wrap(~cell_line)
1441297687537:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441297687712:geom_bar(stat="identity") +
1441297687905:geom_errorbar(colour="black", width=.1, position="dodge") +
1441297688192:facet_wrap(~cell_line)
1441297692192:p1.1
1441297793165:?summary
1441297799992:?summary.ggplot
1441297860514:summary(data $ cell_line)
1441297915873:summary(data[,data$cell_line=="MCF10A"])
1441297931656:summary(data[,data$cell_line=="MCF10A"])
1441297939145:data[,data$cell_line=="MCF10A"]
1441297952537:data[,as.character(data$cell_line)=="MCF10A"]
1441297962465:data$cell_line
1441297982208:data[,data$cell_line==factor("MCF10A")]
1441298001233:data$cell_line=="MCF10A"
1441298031881:data[data$cell_line=="MCF10A",]
1441298048719:summary(data[data$cell_line=="MCF10A",])
1441298150644:?sd
1441298161220:?se
1441298220458:se(data[data$cell_line=="MCF10A",])
1441298222400:se <- function(x) sqrt(var(x)/length(x))
1441298222702:se(data[data$cell_line=="MCF10A",])
1441298258478:se(data$yellow_mean_per_cell[data$cell_line=="MCF10A",])
1441298264153:se(data$yellow_mean_per_cell[data$cell_line=="MCF10A"])
1441298282869:x <-data$cell_line=="MCF10A"
1441298302173:x <- x$yellow_mean_per_cell
1441298321427:x <-data[data$cell_line=="MCF10A",]
1441298324919:x <-data$cell_line=="MCF10A"
1441298326674:x
1441298332594:x <-data[data$cell_line=="MCF10A",]
1441298355944:x<-x$yellow_mean_per_cell
1441298357075:x
1441298359470:se(x)
1441298364632:se(data$yellow_mean_per_cell[data$cell_line=="MCF10A"])
1441298398845:data$cell_line
1441299004222:count <- count_data[count_data$Area > 99,]
1441299004369:count <- as.data.frame(xtabs(~Label, count))
1441299004502:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441299006032:res <- merge(coloc, count)
1441299006220:res$cell_line[res$cell_line=="231"] <- "MDAMB231"
1441299014574:res$cell_line[res$cell_line=="231"] <- c("MDAMB231")
1441299032895:res$cell_line[res$cell_line=="231"]
1441299039320:res$cell_line=="231"
1441299046547:res$cell_line
1441299069998:res <- merge(coloc, count)
1441299070202:names(res) <- c("file", "green_area_fraction", "yellow_area_fraction", "green_mean", "yellow_mean", "green_stdev", "yellow_stdev", "cell_count")
1441299070350:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441299070478:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441299070619:### LABELS
1441299070748:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441299070879:meta <- meta[, 6:10]
1441299071278:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441299071595:res <- merge(res, meta)
1441299071894:res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441299072470:res$file <- gsub("_", "/", res$file)
1441299074748:res$cell_line[res$cell_line=="231"] <- c("MDAMB231")
1441299082644:res$cell_line
1441299097919:delevel(res$cell_line)
1441299106498:drop.levels(res$cell_line)
1441299118170:droplevels(res$cell_line)
1441299134595:droplevels(res$cell_line)
1441299151272:res$cell_line <- droplevels(res$cell_line)
1441299159875:res$cell_line
1441299195034:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441299201695:data$cell_line
1441299300520:levels(data$cell_line)
1441299720351:data$ympl_se <- c(NA)
1441299720520:data$gmpc_se <- c(NA)
1441299725301:data$ympl_se <- c(NA)
1441299737175:pth <- "/mnt/DATAPART1/Sasi"
1441299738279:setwd(pth)
1441299738454:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441299738620:### TOYS
1441299738826:library(ggplot2)
1441299739659:se <- function(x) sqrt(var(x)/length(x))
1441299740928:### STATISTICS
1441299741123:#res$green_per_cell_norm <- scale(as.numeric(res$green_per_cell))
1441299741254:#res$red_AND_green_per_cell_norm <- scale(as.numeric(res$red_AND_green_per_cell))
1441299741430:#summary(data[data$cell_line=="MCF10A",])
1441299741549:data$ympl_se <- c(NA)
1441299741944:data$gmpc_se <- c(NA)
1441299743025:for (line in levels(data$cell_line)) {
1441299743428:y_se <- se(data$yellow_mean_per_cell[data$cell_line==line])
1441299743676:g_se <- se(data$green_mean_per_cell[data$cell_line==line])
1441299744198:data[data$cell_line==line,]$ympl_se <- c(y_se)
1441299744499:data[data$cell_line==line,]$gmpl_se <- c(g_se)
1441299744722:}
1441299812651:View(data)
1441299851061:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441299853953:data$ympl_se <- c(NA)
1441299854173:data$gmpl_se <- c(NA)
1441299854373:for (line in levels(data$cell_line)) {
1441299854545:y_se <- se(data$yellow_mean_per_cell[data$cell_line==line])
1441299854679:g_se <- se(data$green_mean_per_cell[data$cell_line==line])
1441299854824:data[data$cell_line==line,]$ympl_se <- c(y_se)
1441299854955:data[data$cell_line==line,]$gmpl_se <- c(g_se)
1441299855331:}
1441299909870:stderr
1441299915494:?stderr
1441299926820:?stderr
1441300232802:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441300232974:geom_bar(stat="identity") +
1441300233172:geom_errorbar(aes=(ymax=yellow_mean_per_cell+mean(ympl_se), ymin=yellow_mean_per_cell-mean(ympl_se)), colour="black", width=.1, position="dodge") +
1441300233399:facet_wrap(~cell_line)
1441300300876:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441300301048:geom_bar(stat="identity") +
1441300301222:geom_errorbar(aes(ymax=yellow_mean_per_cell+mean(ympl_se), ymin=yellow_mean_per_cell-mean(ympl_se)), colour="black", width=.1, position="dodge") +
1441300301447:facet_wrap(~cell_line)
1441300308745:p1.1
1441300340181:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441300340394:geom_bar(stat="identity") +
1441300340575:geom_errorbar(aes(ymax=mean(yellow_mean_per_cell)+mean(ympl_se), ymin=mean(yellow_mean_per_cell)-mean(ympl_se)), colour="black", width=.1, position="dodge") +
1441300340773:facet_wrap(~cell_line)
1441300344020:p1.1
1441300359803:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441300359970:geom_bar(stat="identity") +
1441300360102:geom_errorbar(aes(ymax=sum(yellow_mean_per_cell)+mean(ympl_se), ymin=sum(yellow_mean_per_cell)-mean(ympl_se)), colour="black", width=.1, position="dodge") +
1441300360219:facet_wrap(~cell_line)
1441300364544:p1.1
1441300402995:xtabs(~cell_line, data)
1441300656354:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441300656503:geom_bar(stat="identity") +
1441300656670:geom_errorbar(aes(ymax=mean(yellow_mean_per_cell)+mean(ympl_se), ymin=mean(yellow_mean_per_cell)-mean(ympl_se)), colour="black", width=.1, position="dodge") +
1441300656805:facet_wrap(~cell_line)
1441300660870:p1.1
1441300684650:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441300684823:geom_bar(stat="identity") +
1441300684974:geom_errorbar(aes(ymax=mean(yellow_mean_per_cell)+ympl_se, ymin=mean(yellow_mean_per_cell)-ympl_se), colour="black", width=.1, position="dodge") +
1441300685150:facet_wrap(~cell_line)
1441300689044:p1.1
1441300788479:?aggregate
1441300845045:x<-aggregate(data, by=cell_line, FUN=mean())
1441300851620:x<-aggregate(x=data, by=cell_line, FUN=mean())
1441300866347:x<-aggregate(x=data, by=cell_line, FUN=mean(yellow_mean_per_cell))
1441300874120:x<-aggregate(x=data, by=cell_line, FUN=mean(data$yellow_mean_per_cell))
1441300881870:x<-aggregate(x=data, by=cell_line, FUN=mean
1441300883320:)
1441300894227:x<-aggregate(x=data, by="cell_line", FUN=mean)
1441300902195:x<-aggregate(x=data, by=list("cell_line"), FUN=mean)
1441300979920:x<-aggregate(x=data, by=list(Line=cell_line), FUN=mean)
1441300991570:x<-aggregate(x=data, by=list(data$cell_line), FUN=mean)
1441300994669:View(x)
1441301048277:x<-aggregate(x=data, by=list(data$cell_line, data$treatment), FUN=mean)
1441301228300:x<-aggregate(x=data, by=list(data$cell_line, data$treatment), FUN=sum())
1441301230350:x<-aggregate(x=data, by=list(data$cell_line, data$treatment), FUN=sum
1441301232345:)
1441301238522:x<-aggregate(x=data, by=list(data$cell_line, data$treatment), FUN=sum)
1441301338999:mean(data$cell_line=="MCF10A")
1441301368899:mean(data[data$cell_line=="MCF10A"]$yellow_mean_per_cell)
1441301373346:mean(data[data$cell_line=="MCF10A",]$yellow_mean_per_cell)
1441301420254:p1.2 <- ggplot(data, aes(treatment, green_mean_per_cell)) +
1441301420424:geom_bar(stat="identity") +
1441301420620:facet_wrap(~cell_line)
1441301430194:mean(data[data$cell_line=="MCF10A",]$yellow_mean_per_cell)
1441301437170:p1.2
1441301566569:x<-aggregate(x=data, by=list(data$cell_line), FUN=mean)
1441301570020:View(x)
1441301575546:mean(data[data$cell_line=="MCF10A",]$yellow_mean_per_cell)
1441301617370:plot(data$cell_line, data_yellow_mean_per_cell)
1441301621394:plot(data$cell_line, data$yellow_mean_per_cell)
1441301633899:qplot(data$cell_line, data$yellow_mean_per_cell)
1441301645795:qplot(data$cell_line, data$yellow_mean_per_cell) + geom_bar
1441301648070:qplot(data$cell_line, data$yellow_mean_per_cell) + geom_bar()
1441301672595:qplot(data$cell_line, data$yellow_mean_per_cell) + geom_bar(stat="identity")
1441301703821:sum(data[data$cell_line=="MCF10A",]$yellow_mean_per_cell)
1441301747349:x <- aggregate(data, by=list(data$cell_line), FUN=mean)
1441301768526:x <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=mean)
1441301777019:View(x)
1441301915191:ggplot(x, aes(treatment, yellow_mean_per_cell)) +
1441301915377:geom_bar(stat="identity") +
1441301915582:facet_wrap(~cell_line)
1441301995525:ggplot(x, aes(Group.2, yellow_mean_per_cell)) +
1441301995722:geom_bar(stat="identity") +
1441301995880:facet_wrap(~cell_line)
1441302014365:ggplot(x, aes(Group.2, yellow_mean_per_cell)) +
1441302014496:geom_bar(stat="identity") +
1441302014648:facet_wrap(~Group.1)
1441302111114:p1.1 <- ggplot(x, aes(Group.2, yellow_mean_per_cell)) +
1441302111251:geom_bar(stat="identity") +
1441302111420:geom_errorbar(aes(ymax=mean(yellow_mean_per_cell)+ympl_se, ymin=mean(yellow_mean_per_cell)-ympl_se), colour="black", width=.1, position="dodge") +
1441302111570:facet_wrap(~Group.1) +
1441302112048:labs(title)
1441302120294:p1.1
1441302144708:p1.1 <- ggplot(x, aes(Group.2, yellow_mean_per_cell)) +
1441302144870:geom_bar(stat="identity") +
1441302145004:geom_errorbar(aes(ymax=yellow_mean_per_cell+ympl_se, ymin=yellow_mean_per_cell-ympl_se), colour="black", width=.1, position="dodge") +
1441302145270:facet_wrap(~Group.1) +
1441302145478:labs(title)
1441302150255:p1.1
1441302543268:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441302564728:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441302569726:data$ympl_se <- c(NA)
1441302569859:data$gmpl_se <- c(NA)
1441302572200:for (line in levels(data$cell_line)) {
1441302572555:for (trt in levels(data$treatment)) {
1441302572695:y_se <- se(data$yellow_mean_per_cell[data$cell_line==line] && data$yellow_mean_per_cell[data$treatment==trt])
1441302572853:g_se <- se(data$green_mean_per_cell[data$cell_line==line] && data$green_mean_per_cell[data$treatment==trt])
1441302573002:data[data$cell_line==line,]$ympl_se <- c(y_se)
1441302573126:data[data$cell_line==line,]$gmpl_se <- c(g_se)
1441302573280:}
1441302573520:}
1441302578971:x <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=mean)
1441302581401:View(x)
1441302598670:y_se <- se(data$yellow_mean_per_cell[data$cell_line==line] && data$yellow_mean_per_cell[data$treatment==trt])
1441302601426:y_se
1441302633434:y_se <- se(data$yellow_mean_per_cell[data$cell_line==line && data$treatment==trt])
1441302636020:y_se
1441302654145:data$yellow_mean_per_cell[data$cell_line==line
1441302657274:]
1441302667308:y_se <- se(data$yellow_mean_per_cell[(data$cell_line==line & data$treatment==trt)])
1441302670394:y_se
1441302679357:data$yellow_mean_per_cell[(data$cell_line==line & data$treatment==trt)
1441302682470:])
1441302684898:data$yellow_mean_per_cell[(data$cell_line==line & data$treatment==trt)]
1441302705296:data$ympl_se <- c(NA)
1441302705447:data$gmpl_se <- c(NA)
1441302708704:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441302712389:data$ympl_se <- c(NA)
1441302712502:data$gmpl_se <- c(NA)
1441302712648:for (line in levels(data$cell_line)) {
1441302712799:for (trt in levels(data$treatment)) {
1441302712953:y_se <- se(data$yellow_mean_per_cell[(data$cell_line==line & data$treatment==trt)])
1441302713079:g_se <- se(data$green_mean_per_cell[data$cell_line==line & data$treatment==trt])
1441302713219:data[data$cell_line==line,]$ympl_se <- c(y_se)
1441302713349:data[data$cell_line==line,]$gmpl_se <- c(g_se)
1441302713504:}
1441302713757:}
1441302715469:View(x)
1441302753175:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441302753479:### STATISTICS
1441302753600:data$ympl_se <- c(NA)
1441302753761:data$gmpl_se <- c(NA)
1441302753878:for (line in levels(data$cell_line)) {
1441302754024:for (trt in levels(data$treatment)) {
1441302754170:y_se <- se(data$yellow_mean_per_cell[(data$cell_line==line & data$treatment==trt)])
1441302754321:g_se <- se(data$green_mean_per_cell[(data$cell_line==line & data$treatment==trt)])
1441302754472:data[(data$cell_line==line & data$treatment==trt),]$ympl_se <- c(y_se)
1441302754626:data[(data$cell_line==line & data$treatment==trt),]$gmpl_se <- c(g_se)
1441302754785:}
1441302754925:}
1441302757195:View(x)
1441302775721:y_se <- se(data$yellow_mean_per_cell[(data$cell_line==line & data$treatment==trt)])
1441302782394:data[(data$cell_line==line & data$treatment==trt),]
1441302785769:data[(data$cell_line==line & data$treatment==trt),]$ympl_se
1441302904999:View(data)
1441303652321:View(x)
1441303755206:x <- aggregate(data, by=list(data$cell_line, data$treatment, data$data), FUN=mean)
1441303758833:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441303760549:x <- aggregate(data, by=list(data$cell_line, data$treatment, data$data), FUN=mean)
1441303770204:x <- aggregate(data, by=list(data$cell_line, data$treatment, data$date), FUN=mean)
1441303772203:View(x)
1441303809238:x <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=mean)
1441304289534:x <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=sum )
1441304331120:setwd(paste0(getwd(), "/coloc2/summary1.csv")
1441304333050:)
1441304356038:setwd("/mnt/DATAPART1/Sasi/output")
1441304375900:write.csv("summary2.csv")
1441304381044:write.csv(x, "summary2.csv")
1441304385302:x <- aggregate(data, by=list(data$cell_line, data$treatment, data$date), FUN=mean)
1441304398770:write.csv(x, "summary1.csv")
1441304423095:View(read.csv("summary1.csv"))
1441304439794:View(read.csv("summary2.csv"))
1441305512083:agg1 <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=mean)
1441305512272:agg2 <- aggregate(data, by=list(data$cell_line, data$treatment, data$date), FUN=mean)
1441305564185:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441305565654:data$ympl_sd <- c(NA)
1441305565797:data$gmpl_sd <- c(NA)
1441305566685:for (line in levels(data$cell_line)) {
1441305566856:for (trt in levels(data$treatment)) {
1441305566995:y_sd <- sd(data$yellow_mean_per_cell[(data$cell_line==line & data$treatment==trt)])
1441305567152:g_sd <- sd(data$green_mean_per_cell[(data$cell_line==line & data$treatment==trt)])
1441305567295:data[(data$cell_line==line & data$treatment==trt),]$ympl_sd <- c(y_sd)
1441305567458:data[(data$cell_line==line & data$treatment==trt),]$gmpl_sd <- c(g_sd)
1441305567589:}
1441305571006:}
1441305573321:View(data)
1441305586153:agg1 <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=mean)
1441305586277:agg2 <- aggregate(data, by=list(data$cell_line, data$treatment, data$date), FUN=mean)
1441305602079:p1.1 <- ggplot(x, aes(Group.2, yellow_mean_per_cell)) +
1441305602245:geom_bar(stat="identity") +
1441305602395:geom_errorbar(aes(ymax=yellow_mean_per_cell+ympl_sd, ymin=yellow_mean_per_cell-ympl_sd), colour="black", width=.1, position="dodge") +
1441305602519:facet_wrap(~Group.1) +
1441305602874:labs(title)
1441306024933:p1.1 <- ggplot(agg2, aes(Group.2, yellow_mean_per_cell)) +
1441306025071:geom_bar(stat="identity") +
1441306025221:facet_wrap(~Group.1) +
1441306025369:geom_errorbar(aes(ymax=yellow_mean_per_cell+ympl_sd, ymin=yellow_mean_per_cell-ympl_sd), colour="black", width=.1, position="dodge") +
1441306025530:labs(title)
1441306029594:p1.1
1441306076270:View(agg1)
1441306076764:View(agg2)
1441306172972:View(agg2)
1441306188103:agg1 <- aggregate(data, by=list(data$cell_line, data$treatment, data$date), FUN=mean)
1441306188421:agg2 <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=mean)
1441306348155:dat <- agg2[agg.Group.1==line]
1441306356598:dat <- agg2[agg$Group.1==line,]
1441306362773:dat <- agg2[agg2$Group.1==line,]
1441306386387:p1.1 <- ggplot(dat, aes(Group.2, yellow_mean_per_cell)) +
1441306386576:geom_bar(stat="identity") +
1441306386847:geom_errorbar(aes(ymax=yellow_mean_per_cell+ympl_sd, ymin=yellow_mean_per_cell-ympl_sd), colour="black", width=.1, position="dodge") +
1441306387146:labs(title)
1441306390545:p1.1
1441306647406:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441306647574:geom_bar(stat="identity") +
1441306647706:facet_wrap(~cell_line)
1441306652202:p1.1
1441306657936:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441306674252:Hmisc
1441306681875:library(Hmisc)
1441306692768:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441306692927:geom_bar(stat="identity") +
1441306693098:facet_wrap(~cell_line) +
1441306693446:stat_summary(fun.data = mean_cl_normal, geom = "errorbar", mult = 1)
1441306704097:p1.1
1441306727645:p1.1 <- ggplot(data, aes(treatment, yellow_mean_per_cell)) +
1441306727775:geom_bar(stat="identity") +
1441306727904:facet_wrap(~cell_line) +
1441306728053:stat_summary(fun.data = mean_cl_normal, geom = "errorbar")
1441306730295:p1.1
1441307072927:agg1 <- aggregate(data, by=list(data$cell_line, data$treatment, data$date), FUN=mean)
1441307073118:agg2 <- aggregate(data, by=list(data$cell_line, data$treatment), FUN=mean)
1441307170548:data$date
1441307212750:data1 <- data[data$date=="8515",]
1441307212826:data2 <- data[data$date=="81015",]
1441307212987:data3 <- data[data$date=="81515",]
1441307227495:data_in <- data
1441307240046:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441307240254:geom_bar(stat="identity") +
1441307240406:facet_wrap(~cell_line) +
1441307240527:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441307240679:geom_bar(stat="identity") +
1441307240805:facet_wrap(~cell_line)
1441307241373:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441307241524:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441307241678:geom_bar(stat="identity") +
1441307241821:facet_wrap(~treatment) +
1441307241975:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441307285448:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441307290426:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441307290570:geom_bar(stat="identity") +
1441307290703:facet_wrap(~cell_line)
1441307290846:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441307291051:geom_bar(stat="identity") +
1441307291198:facet_wrap(~cell_line)
1441307291447:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441307291634:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441307291774:geom_bar(stat="identity") +
1441307291902:facet_wrap(~treatment) +
1441307292054:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441307292202:p2.2 <- ggplot(data_in, aes(cell_line, green_mean_per_cell)) +
1441307292345:geom_bar(stat="identity") +
1441307292469:facet_wrap(~treatment) +
1441307292604:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441307383445:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441307383578:geom_bar(stat="identity") +
1441307383702:facet_wrap(~cell_line) +
1441307384022:labs(title=paste(unique(data_in$date)))
1441307386570:p1.1
1441307402245:paste(unique(data_in$date)
1441307404195:)
1441307429894:paste(c(unique(data_in$date)))
1441307464594:c(paste(unique(data_in$date))
1441307466149:)
1441307501345:apply(unique(data$date), paste)
1441307506920:apply(unique(data$date), FUN=paste)
1441307524745:?strsplit
1441307541645:unsplit(paste(unique(data_in$date)))
1441307551020:?unsplti
1441307553319:?unsplit
1441307579695:split(paste(unique(data_in$date)))
1441307618153:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441307618352:geom_bar(stat="identity") +
1441307618527:facet_wrap(~cell_line) +
1441307618703:labs(title=paste("'", unique(data_in$date)), "'")
1441307621746:p1.2
1441308028957:function(x) {
1441308029080:res <- c()
1441308029206:for (i in length(x)) {
1441308029353:res <- paste(res, x[i])
1441308029481:}
1441308029631:res
1441308029927:}
1441308052194:title <- function(x) {
1441308052194:res <- c()
1441308052195:for (i in length(x)) {
1441308052195:res <- paste(res, x[i])
1441308052195:}
1441308052195:res
1441308052195:}
1441308062298:title(unique(date))
1441308068920:title(unique(data$date))
1441308082569:length(unique(data$date))
1441308119044:title <- function(x) {
1441308119045:res <- NULL
1441308119045:for (i in length(x)) {
1441308119045:res <- paste(res, x[i])
1441308119045:}
1441308119045:res
1441308119046:}
1441308122119:title(unique(data$date))
1441308129825:unique(data$date)
1441308154575:res <- NULL
1441308166345:x <_ unique(data$date)
1441308169744:x <-0 unique(data$date)
1441308172394:x <- unique(data$date)
1441308178626:res <- NULL
1441308179705:for (i in length(x)) {
1441308179904:res <- paste(res, x[i])
1441308180079:}
1441308181279:res
1441308204103:title <- function(x) {
1441308204281:res <- NULL
1441308204428:for (i in length(x)) {
1441308204596:print(x[i])
1441308205761:res <- NULL
1441308206032:for (i in length(x)) {
1441308206229:print(x[i])
1441308206397:res <- paste(res, x[i])
1441308206696:}
1441308207077:res
1441308213585:res <- NULL
1441308213796:for (i in length(x)) {
1441308214103:print(x[i])
1441308214454:res <- paste(res, x[i])
1441308214751:}
1441308230331:title <- function(x) {
1441308230480:res <- NULL
1441308230596:for (i in 1:length(x)) {
1441308230751:res <- paste(res, x[i])
1441308231025:}
1441308231205:res
1441308231526:}
1441308245405:title(unique(data$date))
1441308310673:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441308310801:geom_bar(stat="identity") +
1441308310926:facet_wrap(~cell_line) +
1441308311101:labs(title=title(unique(data_in$date)))
1441308315920:p1.1
1441308333949:graphics.off()
1441308350392:setwd("/mnt/DATAPART1/Sasi/plots")
1441308392330:png(paste(title(unique(data$date), "1.png")))
1441308401939:png(paste(title(unique(data$date)), "1.png"))
1441308419127:title <- function(x) {
1441308419278:res <- NULL
1441308419410:for (i in 1:length(x)) {
1441308419527:res <- paste(res, x[i], sep="_")
1441308419877:}
1441308420047:res
1441308420478:}
1441308425676:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441308425824:geom_bar(stat="identity") +
1441308425953:facet_wrap(~cell_line) +
1441308426085:labs(title=title(unique(data_in$date)))
1441308426197:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441308426325:geom_bar(stat="identity") +
1441308426454:facet_wrap(~cell_line) +
1441308426572:labs(title=title(unique(data_in$date)))
1441308426727:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441308426879:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441308427006:geom_bar(stat="identity") +
1441308427148:facet_wrap(~treatment) +
1441308427277:labs(title=title(unique(data_in$date)))
1441308427397:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308427555:p2.2 <- ggplot(data_in, aes(cell_line, green_mean_per_cell)) +
1441308427699:geom_bar(stat="identity") +
1441308427828:facet_wrap(~treatment) + +
1441308427982:labs(title=title(unique(data_in$date)))
1441308428123:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308449508:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441308449621:geom_bar(stat="identity") +
1441308449769:facet_wrap(~treatment) +
1441308449895:labs(title=title(unique(data_in$date))) +
1441308450053:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308450228:p2.2 <- ggplot(data_in, aes(cell_line, green_mean_per_cell)) +
1441308450945:geom_bar(stat="identity") +
1441308451069:facet_wrap(~treatment) +
1441308451204:labs(title=title(unique(data_in$date))) +
1441308451725:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308458797:png(paste(title(unique(data$date)), "1.png"))
1441308467498:png(paste0(title(unique(data$date)), "1.png"))
1441308473477:png(paste0(title(unique(data$date)), "_1.png"))
1441308536758:graphics.off()
1441308537495:png(paste0(title(unique(data$date)), "_1.png"))
1441308537703:p1.1
1441308538343:dev.off()
1441308538356:png(paste0(title(unique(data$date)), "_2.png"))
1441308538358:p1.2
1441308538994:dev.off()
1441308539007:png(paste0(title(unique(data$date)), "_3.png"))
1441308539008:p2.1
1441308539616:dev.off()
1441308539628:png(paste0(title(unique(data$date)), "_4.png"))
1441308539629:p2.2
1441308540237:dev.off()
1441308558219:data_in <- data1
1441308562006:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441308562506:geom_bar(stat="identity") +
1441308562546:facet_wrap(~cell_line) +
1441308562570:labs(title=title(unique(data_in$date)))
1441308562603:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441308562690:geom_bar(stat="identity") +
1441308562728:facet_wrap(~cell_line) +
1441308562729:labs(title=title(unique(data_in$date)))
1441308562768:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441308562768:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441308562841:geom_bar(stat="identity") +
1441308562886:facet_wrap(~treatment) +
1441308562886:labs(title=title(unique(data_in$date))) +
1441308562929:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308562937:p2.2 <- ggplot(data_in, aes(cell_line, green_mean_per_cell)) +
1441308562969:geom_bar(stat="identity") +
1441308562994:facet_wrap(~treatment) +
1441308563029:labs(title=title(unique(data_in$date))) +
1441308563029:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308563150:# plot area fraction just for all
1441308563151:#p1.3 <- ggplot(data, aes(treatment, yellow_area_fraction_per_cell)) +
1441308563193:#  geom_bar(stat="identity") +
1441308563194:#  facet_wrap(~cell_line)
1441308563278:## SAVE AWAY
1441308563278:system("mkdir plots")
1441308563333:setwd(paste0(pth, '/plots'))
1441308568828:graphics.off()
1441308569205:png(paste0(title(unique(data$date)), "_1.png"))
1441308569351:p1.1
1441308569997:dev.off()
1441308570010:png(paste0(title(unique(data$date)), "_2.png"))
1441308570012:p1.2
1441308570651:dev.off()
1441308570664:png(paste0(title(unique(data$date)), "_3.png"))
1441308570666:p2.1
1441308571919:dev.off()
1441308572102:png(paste0(title(unique(data$date)), "_4.png"))
1441308573751:p2.2
1441308574359:dev.off()
1441308615724:graphics.off()
1441308617901:png(paste0(title(unique(data_in$date)), "_1.png"))
1441308618051:p1.1
1441308618706:dev.off()
1441308618719:png(paste0(title(unique(data_in$date)), "_2.png"))
1441308618720:p1.2
1441308619363:dev.off()
1441308619376:png(paste0(title(unique(data_in$date)), "_3.png"))
1441308619378:p2.1
1441308619980:dev.off()
1441308619992:png(paste0(title(unique(data_in$date)), "_4.png"))
1441308619995:p2.2
1441308620593:dev.off()
1441308628794:data_in <- data2
1441308643094:## PLOTS
1441308643095:#plot each cell line facets, each treatment x and yellow mena per cell y
1441308643095:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441308643095:geom_bar(stat="identity") +
1441308643095:facet_wrap(~cell_line) +
1441308643096:labs(title=title(unique(data_in$date)))
1441308643108:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441308643109:geom_bar(stat="identity") +
1441308643109:facet_wrap(~cell_line) +
1441308643109:labs(title=title(unique(data_in$date)))
1441308643116:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441308643116:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441308643116:geom_bar(stat="identity") +
1441308643117:facet_wrap(~treatment) +
1441308643117:labs(title=title(unique(data_in$date))) +
1441308643117:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308643124:p2.2 <- ggplot(data_in, aes(cell_line, green_mean_per_cell)) +
1441308643124:geom_bar(stat="identity") +
1441308643125:facet_wrap(~treatment) +
1441308643125:labs(title=title(unique(data_in$date))) +
1441308643125:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308643132:# plot area fraction just for all
1441308643133:#p1.3 <- ggplot(data, aes(treatment, yellow_area_fraction_per_cell)) +
1441308643133:#  geom_bar(stat="identity") +
1441308643133:#  facet_wrap(~cell_line)
1441308643134:## SAVE AWAY
1441308643134:#system("mkdir plots")
1441308643134:#setwd(paste0(pth, '/plots'))
1441308643134:#plots <- list(p1.1, p1.2, p2.1, p2.2) #ls()
1441308643134:graphics.off()
1441308643135:png(paste0(title(unique(data_in$date)), "_1.png"))
1441308643136:p1.1
1441308643775:dev.off()
1441308643787:png(paste0(title(unique(data_in$date)), "_2.png"))
1441308643789:p1.2
1441308644428:dev.off()
1441308644441:png(paste0(title(unique(data_in$date)), "_3.png"))
1441308644442:p2.1
1441308645047:dev.off()
1441308645059:png(paste0(title(unique(data_in$date)), "_4.png"))
1441308645061:p2.2
1441308645672:dev.off()
1441308657494:data_in <- data3
1441308659270:## PLOTS
1441308659271:#plot each cell line facets, each treatment x and yellow mena per cell y
1441308659271:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441308659271:geom_bar(stat="identity") +
1441308659271:facet_wrap(~cell_line) +
1441308659271:labs(title=title(unique(data_in$date)))
1441308659278:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441308659278:geom_bar(stat="identity") +
1441308659279:facet_wrap(~cell_line) +
1441308659279:labs(title=title(unique(data_in$date)))
1441308659285:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441308659286:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441308659286:geom_bar(stat="identity") +
1441308659286:facet_wrap(~treatment) +
1441308659286:labs(title=title(unique(data_in$date))) +
1441308659286:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308659294:p2.2 <- ggplot(data_in, aes(cell_line, green_mean_per_cell)) +
1441308659294:geom_bar(stat="identity") +
1441308659294:facet_wrap(~treatment) +
1441308659294:labs(title=title(unique(data_in$date))) +
1441308659295:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308659302:# plot area fraction just for all
1441308659302:#p1.3 <- ggplot(data, aes(treatment, yellow_area_fraction_per_cell)) +
1441308659303:#  geom_bar(stat="identity") +
1441308659303:#  facet_wrap(~cell_line)
1441308659303:## SAVE AWAY
1441308659303:#system("mkdir plots")
1441308659304:#setwd(paste0(pth, '/plots'))
1441308659304:#plots <- list(p1.1, p1.2, p2.1, p2.2) #ls()
1441308659304:graphics.off()
1441308659304:png(paste0(title(unique(data_in$date)), "_1.png"))
1441308659306:p1.1
1441308659952:dev.off()
1441308659965:png(paste0(title(unique(data_in$date)), "_2.png"))
1441308659966:p1.2
1441308660595:dev.off()
1441308660608:png(paste0(title(unique(data_in$date)), "_3.png"))
1441308660609:p2.1
1441308661200:dev.off()
1441308661213:png(paste0(title(unique(data_in$date)), "_4.png"))
1441308661214:p2.2
1441308661814:dev.off()
1441308669694:data_in <- data
1441308671857:## PLOTS
1441308671857:#plot each cell line facets, each treatment x and yellow mena per cell y
1441308671857:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441308671858:geom_bar(stat="identity") +
1441308671858:facet_wrap(~cell_line) +
1441308671858:labs(title=title(unique(data_in$date)))
1441308671865:p1.2 <- ggplot(data_in, aes(treatment, green_mean_per_cell)) +
1441308671865:geom_bar(stat="identity") +
1441308671865:facet_wrap(~cell_line) +
1441308671865:labs(title=title(unique(data_in$date)))
1441308671872:#plot each treatment facets and each cell line x and yellow_mean_per_cell y
1441308671872:p2.1 <- ggplot(data_in, aes(cell_line, yellow_mean_per_cell)) +
1441308671872:geom_bar(stat="identity") +
1441308671872:facet_wrap(~treatment) +
1441308671873:labs(title=title(unique(data_in$date))) +
1441308671873:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308671881:p2.2 <- ggplot(data_in, aes(cell_line, green_mean_per_cell)) +
1441308671881:geom_bar(stat="identity") +
1441308671881:facet_wrap(~treatment) +
1441308671881:labs(title=title(unique(data_in$date))) +
1441308671881:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1441308671889:# plot area fraction just for all
1441308671889:#p1.3 <- ggplot(data, aes(treatment, yellow_area_fraction_per_cell)) +
1441308671890:#  geom_bar(stat="identity") +
1441308671890:#  facet_wrap(~cell_line)
1441308671890:## SAVE AWAY
1441308671890:#system("mkdir plots")
1441308671890:#setwd(paste0(pth, '/plots'))
1441308671891:#plots <- list(p1.1, p1.2, p2.1, p2.2) #ls()
1441308671891:graphics.off()
1441308671891:png(paste0(title(unique(data_in$date)), "_1.png"))
1441308671893:p1.1
1441308672543:dev.off()
1441308672556:png(paste0(title(unique(data_in$date)), "_2.png"))
1441308672558:p1.2
1441308673192:dev.off()
1441308673205:png(paste0(title(unique(data_in$date)), "_3.png"))
1441308673207:p2.1
1441308673815:dev.off()
1441308673827:png(paste0(title(unique(data_in$date)), "_4.png"))
1441308673828:p2.2
1441308674443:dev.off()
1441316526051:data_in <- data
1441316838316:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441316838797:geom_bar(stat="identity") +
1441316838945:facet_wrap(~cell_line) +
1441316839304:labs(title=title(unique(data_in$date)))
1441316841844:p1.1
1441316870246:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441316870398:geom_bar(fun.y = mean, stat="identity") +
1441316870824:facet_wrap(~cell_line) +
1441316871029:labs(title=title(unique(data_in$date)))
1441316875519:p1.1
1441316923204:sum(data$yellow_mean_per_cell)
1441316933386:mean(data$yellow_mean_per_cell)
1441316952886:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441316953004:geom_bar(fun.y=sum, stat="identity") +
1441316953125:facet_wrap(~cell_line) +
1441316953606:labs(title=title(unique(data_in$date)))
1441316956245:p1.1
1441316995057:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441316995232:stat_summary(fun.y=mean, geom=bar)
1441316995400:#geom_bar(fun.y=sum, stat="identity") +
1441316995574:facet_wrap(~cell_line) +
1441316995749:labs(title=title(unique(data_in$date)))
1441316999695:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441316999872:stat_summary(fun.y=mean, geom=bar) +
1441317000029:#geom_bar(fun.y=sum, stat="identity") +
1441317000198:facet_wrap(~cell_line) +
1441317000421:labs(title=title(unique(data_in$date)))
1441317020059:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441317020179:#stat_summary(fun.y="mean", geom="bar") +
1441317020344:geom_bar(fun.y="sum", stat="identity") +
1441317020500:facet_wrap(~cell_line) +
1441317021004:labs(title=title(unique(data_in$date)))
1441317023273:p1.1
1441317032157:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441317032302:#stat_summary(fun.y="mean", geom="bar") +
1441317032444:geom_bar(fun.y="mean", stat="identity") +
1441317032795:facet_wrap(~cell_line) +
1441317032948:labs(title=title(unique(data_in$date)))
1441317036895:p1.1
1441317197485:library(Hmisc)
1441317202274:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441317202470:stat_summary(fun.y="mean", geom="bar") +
1441317202606:#geom_bar(fun.y=mean, stat="identity") +
1441317202796:facet_wrap(~cell_line) +
1441317203120:labs(title=title(unique(data_in$date)))
1441317206801:p1.1
1441317233512:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441317233669:stat_summary(fun.y="mean_cl_boot", geom="bar") +
1441317233876:#geom_bar(fun.y=mean, stat="identity") +
1441317234029:facet_wrap(~cell_line) +
1441317234173:labs(title=title(unique(data_in$date)))
1441317238395:p1.1
1441317273732:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441317273881:stat_summary(fun.y="sum", geom="bar") +
1441317274030:#geom_bar(fun.y=mean, stat="identity") +
1441317274194:facet_wrap(~cell_line) +
1441317274822:labs(title=title(unique(data_in$date)))
1441317278699:p1.1
1441317289102:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441317289269:stat_summary(fun.y="mean", geom="bar") +
1441317289453:#geom_bar(fun.y=mean, stat="identity") +
1441317289676:facet_wrap(~cell_line) +
1441317290071:labs(title=title(unique(data_in$date)))
1441317293201:p1.1
1441317310351:png(paste0(title(unique(data_in$date)), "_1.png"))
1441317323129:graphics.off()
1441317386450:dev.new()
1441317392770:graphics.off()
1441317398894:dev.new()
1441317400719:p1.1
1441317406523:dev.new()
1441317416606:p1.1 <- ggplot(data_in, aes(treatment, yellow_mean_per_cell)) +
1441317416773:stat_summary(fun.y="sum", geom="bar") +
1441317416947:#geom_bar(fun.y=mean, stat="identity") +
1441317417104:facet_wrap(~cell_line) +
1441317417405:labs(title=title(unique(data_in$date)))
1441317421645:p1.1
1441391060444:names("data")
1441391071762:pth <- "/mnt/DATAPART1/Sasi"
1441391071762:setwd(pth)
1441391075111:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441391080055:names("data")
1441391088514:names(data)
1441391774303:data.frame(c(names(data)), c("name of the .lsm file from the 'input' folder","date when data was recorded, i.e. when the picure was taken","cell line",
1441391774454:"whether Control, Zinc treated or Zna/Zinc treated","name of original image",
1441391774598:"fraction of image area that shows any green (Fluozin showing free intracellular zinc)",
1441391774734:"fraction of image area that shows any yellow (region where green colocalises with red stain, which is a lysotracker)",
1441391774877:"mean intensity of green on image", "mean intensity of the colocalisation region", "intensity standard deviation of the green region",
1441391775047:"intensity standard deviation of the yellow region", "number of cells on image", "mean intensity of green divided by the number of cells",
1441391775367:"mean intensity of colocalisation region divided by the number of cells"))
1441391788572:data.frame(c(names(data[,-1])), c("name of the .lsm file from the 'input' folder","date when data was recorded, i.e. when the picure was taken","cell line",
1441391788741:"whether Control, Zinc treated or Zna/Zinc treated","name of original image",
1441391788894:"fraction of image area that shows any green (Fluozin showing free intracellular zinc)",
1441391789061:"fraction of image area that shows any yellow (region where green colocalises with red stain, which is a lysotracker)",
1441391789192:"mean intensity of green on image", "mean intensity of the colocalisation region", "intensity standard deviation of the green region",
1441391789346:"intensity standard deviation of the yellow region", "number of cells on image", "mean intensity of green divided by the number of cells",
1441391789704:"mean intensity of colocalisation region divided by the number of cells"))
1441391806073:meta <-data.frame(c(names(data[,-1])), c("name of the .lsm file from the 'input' folder","date when data was recorded, i.e. when the picure was taken","cell line",
1441391806224:"whether Control, Zinc treated or Zna/Zinc treated","name of original image",
1441391806362:"fraction of image area that shows any green (Fluozin showing free intracellular zinc)",
1441391806506:"fraction of image area that shows any yellow (region where green colocalises with red stain, which is a lysotracker)",
1441391806641:"mean intensity of green on image", "mean intensity of the colocalisation region", "intensity standard deviation of the green region",
1441391806786:"intensity standard deviation of the yellow region", "number of cells on image", "mean intensity of green divided by the number of cells",
1441391807137:"mean intensity of colocalisation region divided by the number of cells"))
1441391844701:names(meta) <- c("variable", "description")
1441391847518:View(meta)
1441391934204:?apply
1441391936525:x <- apply(data, 2, class)
1441391982624:meta <-data.frame(c(names(data[,-1])), apply(data[,-1], 2, class), c("name of the .lsm file from the 'input' folder","date when data was recorded, i.e. when the picure was taken","cell line",
1441391982828:"whether Control, Zinc treated or Zna/Zinc treated","name of original image",
1441391982989:"fraction of image area that shows any green (Fluozin showing free intracellular zinc)",
1441391983148:"fraction of image area that shows any yellow (region where green colocalises with red stain, which is a lysotracker)",
1441391983315:"mean intensity of green on image", "mean intensity of the colocalisation region", "intensity standard deviation of the green region",
1441391983700:"intensity standard deviation of the yellow region", "number of cells on image", "mean intensity of green divided by the number of cells",
1441391984051:"mean intensity of colocalisation region divided by the number of cells"))
1441391985115:names(meta) <- c("variable", "type", "description")
1441391987504:View(data)
1441391989016:View(meta)
1441392010075:meta <-data.frame(c(names(data[,-1])), c("name of the .lsm file from the 'input' folder","date when data was recorded, i.e. when the picure was taken","cell line",
1441392010226:"whether Control, Zinc treated or Zna/Zinc treated","name of original image",
1441392010379:"fraction of image area that shows any green (Fluozin showing free intracellular zinc)",
1441392010516:"fraction of image area that shows any yellow (region where green colocalises with red stain, which is a lysotracker)",
1441392010666:"mean intensity of green on image", "mean intensity of the colocalisation region", "intensity standard deviation of the green region",
1441392010795:"intensity standard deviation of the yellow region", "number of cells on image", "mean intensity of green divided by the number of cells",
1441392010930:"mean intensity of colocalisation region divided by the number of cells"))
1441392017803:names(meta) <- c("variable", "description")
1441392020082:View(meta)
1441392095887:write.table(meta, paste0(pth, "/output/meatadata.tsv"), sep="\t")
1441392154698:?kable
1441392197223:??kable
1441392255770:?kable
1441392261835:library(knitr)
1441392262881:?kable
1441392429168:write.csv(meta, paste0(pth, "/output/meatadata.csv"))
1441392994195:write.table(meta, paste0(pth, "/output/meatadata.csv"), sep="|")
1441393885260:?anova
1441393949768:aut <- data
1441393953423:names(aut)
1441393972856:?read.csv
1441393985249:aut <- read.csv("measurements.csv", row.names=NULL)
1441393988791:pth <- "/mnt/DATAPART1/Sasi/output"
1441393988967:setwd(pth)
1441393990246:aut <- read.csv("measurements.csv", row.names=NULL)
1441393996439:names(aut)
1441394037269:View(aut)
1441394062463:aut <- read.csv("measurements.csv")[,-1]
1441394068129:names(aut)
1441394104207:?lm
1441394219170:fit <- lm(yellow_mean_per_cell~treatment+1, data=aut)
1441394261960:plot.lm(fit)
1441394267999:plot(fit)
1441394284248:qplot(fit)
1441394296145:library(ggplot2)
1441394299200:qplot(fit)
1441394310359:lm[1]
1441394313983:fit[1]
1441394334263:fit <- lm(yellow_mean_per_cell~treatment+cell_line, data=aut)
1441394686781:pth <- "/mnt/DATAPART1/Sasi/output"
1441394686913:setwd(pth)
1441394687650:aut <- read.csv("measurements.csv")[,-1]
1441394748911:fit <- lm(yellow_mean_per_cell~treatment+cell_line+1, data=aut)
1441394752729:plot(lm)
1441394759492:plot(fit)
1441394844530:library(stats)
1441394851068:plot.lm(fit)
1441399636561:setwd("/mnt/DATAPART1/Sasi")
1441401955297:##? RENAME ALL OUTPUT OR PUT IN FOLDERS
1441401955298:##? NORMALISATION
1441401955298:## LIBRARIES -> put them out
1441401955298:library(doParallel)
1441401955400:## FUNCTIONS
1441401955400:# parallel calculate correlation matrix; based on code from: https://gist.github.com/bobthecat/5024079
1441401955400:# the function returns "horizontal" chunks of matrix
1441401955401:generate.cor.parts <- function(x=x, nthreads=nthreads) {
1441401955401:setwd(paste0(pth, "/", out_dir))
1441401955401:# prepare names
1441401955401:# names <- colnames(x)
1441401955401:# determine the largest chunk size (matrix / vector) for one thread
1441401955402:max.size = mem.free / nthreads
1441401955402:nchunks <- ceiling(ncolx / floor(max.size / nrow(x)))^2
1441401955402:ncolx <- ncol(x)
1441401955402:# extend the matrix so it is divided into even chunks
1441401955402:add <- ncolx %% nchunks
1441401955403:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1441401955403:ncolx <- ncol(x)
1441401955403:## split column numbers into groups
1441401955403:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1441401955404:## create all unique combinations of blocks
1441401955404:combs <- expand.grid(1:length(groups), 1:length(groups))
1441401955404:combs <- t(apply(combs, 1, sort))
1441401955405:combs <- unique(combs)
1441401955405:# calculate correlation for each combination
1441401955405:foreach(i = 1:nrow(combs)) %dopar% {
1441401955405:comb <- combs[i, ]
1441401955406:print(comb)
1441401955406:G1 <- groups[[comb[1]]]
1441401955406:G2 <- groups[[comb[2]]]
1441401955407:cor.mat <- cor(x[, G1], x[, G2])
1441401955407:write.csv(cor.mat, file=paste0("cor_mat_", comb[1], "r", comb[2], "c", ".csv"))
1441401955407:rm(cor.mat)
1441401955407:print(paste(comb[1], comb[2], "chunk done")) #? out of
1441401955408:gc(verbose=F)
1441401955408:}
1441401955408:rm(x)
1441401955409:# create horizontal chunks files
1441401955409:foreach(i = 1:nchunks) %dopar% {
1441401955410:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441401955410:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441401955410:chunk <- read.csv(file, row.names=1)
1441401955411:names <- row.names(chunk) #waste
1441401955411:hor_chunk <- cbind(hor_chunk, chunk)
1441401955411:}
1441401955412:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1441401955412:chunk <- t(read.csv(file, row.names=1))
1441401955413:names <- row.names(chunk) #waste
1441401955413:hor_chunk <- cbind(hor_chunk, chunk)
1441401955414:}
1441401955414:row.names(hor_chunk) <- names
1441401955415:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1441401955415:hor_chunk <- NULL
1441401955416:#filenames <- list.files(path = "~/")
1441401955416:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1441401955417:}
1441401955418:setwd(pth)
1441401955418:return(NULL)
1441401955419:}
1441401955420:# get the table of transcripts that are most correlated
1441401955420:get.correlated <- function(folder=out_dir, threshold=0.95) {
1441401955420:setwd(paste0(pth, "/", folder))
1441401955421:# get list of correlation matrix "horizontal" files
1441401955421:file_list <- list.files(pattern="hor.csv")
1441401955421:if(length(file_list) == 0) {
1441401955421:stop("specify folder")
1441401955421:}
1441401955422:foreach(file = file_list) %dopar% {
1441401955422:print(paste("Processing", file))
1441401955422:hor_chunk <- as.matrix(read.csv(file, row.names=1))
1441401955422:nrows <- nrow(hor_chunk)
1441401955423:tx_names <- row.names(hor_chunk)
1441401955423:i <- 1:nrows
1441401955423:res <- matrix(nrow=0, ncol=3)
1441401955423:for(i in 1:nrows) {
1441401955424:row <- hor_chunk[i,]
1441401955424:row <- row[!is.na(row) & row!=1 & (row>threshold | row<(-threshold))]
1441401955424:if(length(row)!=0) {
1441401955424:row <- cbind(c(tx_names[i]), names(row), row)
1441401955425:res <- rbind(res, row)
1441401955425:}
1441401955425:}
1441401955426:colnames(res) <- c("Ensembl.Gene.ID.0", "Ensembl.Gene.ID.1", "correlation")
1441401955426:rownames(res) <- NULL
1441401955426:write.csv(res, file=paste0(pth, "/correlated_", threshold, ".csv"), row.names=F)
1441401955427:}
1441401955427:#? there are duplicate entries - remove - or just leave for now
1441401955427:return(NULL)
1441401955428:}
1441401960544:pth <- getwd()
1441402011018:args <- as.character("expression.matrix.tsv")
1441402015743:out_dir <- paste0(args, "_correlation_matrix")
1441402041310:if(!exists(out_dir)) {
1441402041817:dir.create(out_dir)
1441402042009:}
1441403340457:if(!exists(out_dir)) {
1441403340609:dir.create(out_dir)
1441403340779:}
1441403342055:x <- read.table(paste0(pth, "/", args))
1441403363163:args <- as.character("expression.gene.tsv")
1441403363751:args <- as.character("expression.gene.tsv")
1441403364211:args <- as.character("expression.gene.tsv")
1441403365349:args <- as.character("expression.gene.tsv")
1441403365550:args <- as.character("expression.gene.tsv")
1441403365714:args <- as.character("expression.gene.tsv")
1441403365902:args <- as.character("expression.gene.tsv")
1441403368735:args <- as.character(commandArgs(trailingOnly=T))
1441403369050:out_dir <- paste0(args, "_correlation_matrix")
1441403374805:args <- as.character("expression.gene.tsv")
1441403375925:out_dir <- paste0(args, "_correlation_matrix")
1441403376620:if(!exists(out_dir)) {
1441403376807:dir.create(out_dir)
1441403376949:}
1441403396482:extsts(out_dir)
1441403401639:exists(out_dir)
1441404161747:exists(paste0(pth, "/", out_dir)
1441404163758:)
1441404181280:paste0(pth, "/", out_dir
1441404183482:)
1441404201655:exists(file.path(paste0(pth, "/", out_dir)))
1441404231362:?exists
1441404247266:dir.exists(out_dir)
1441404268649:if(!dir.exists(out_dir)) {
1441404269315:dir.create(out_dir)
1441404269534:}
1441404271214:x <- read.table(paste0(pth, "/", args))
1441404286657:nthreads <- 10 #also check if nthreads is a proper value, i.e. integer, ...
1441404286842:if(!exists("nthreads")) {
1441404287336:nthreads <- detectCores()
1441404288326:}
1441404288582:registerDoParallel(cores = nthreads)
1441404292475:mem.free <- as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1441404293902:generate.cor.parts(x)
1441404313846:setwd(paste0(pth, "/", out_dir))
1441404316968:max.size = mem.free / nthreads
1441404317871:nchunks <- ceiling(ncolx / floor(max.size / nrow(x)))^2
1441404330064:ncolx <- ncol(x)
1441404330877:# determine the largest chunk size (matrix / vector) for one thread
1441404331079:max.size = mem.free / nthreads
1441404331619:nchunks <- ceiling(ncolx / floor(max.size / nrow(x)))^2
1441404332153:# extend the matrix so it is divided into even chunks
1441404332408:add <- ncolx %% nchunks
1441404332611:x <- cbind(x, matrix(NA, nrow=nrow(x), ncol=add))
1441404332927:ncolx <- ncol(x)
1441404333191:## split column numbers into groups
1441404333384:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1441404333543:## create all unique combinations of blocks
1441404333723:combs <- expand.grid(1:length(groups), 1:length(groups))
1441404333871:combs <- t(apply(combs, 1, sort))
1441404334046:combs <- unique(combs)
1441404334177:# calculate correlation for each combination
1441404334313:foreach(i = 1:nrow(combs)) %dopar% {
1441404334469:comb <- combs[i, ]
1441404334707:print(comb)
1441404334945:G1 <- groups[[comb[1]]]
1441404335129:G2 <- groups[[comb[2]]]
1441404335280:cor.mat <- cor(x[, G1], x[, G2])
1441404335408:write.csv(cor.mat, file=paste0("cor_mat_", comb[1], "r", comb[2], "c", ".csv"))
1441404335628:rm(cor.mat)
1441404336696:print(paste(comb[1], comb[2], "chunk done")) #? out of
1441404336928:gc(verbose=F)
1441404337106:}
1441404337732:rm(x)
1441404339993:# create horizontal chunks files
1441404340134:foreach(i = 1:nchunks) %dopar% {
1441404341152:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441404341311:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441404341473:chunk <- read.csv(file, row.names=1)
1441404341651:names <- row.names(chunk) #waste
1441404342378:hor_chunk <- cbind(hor_chunk, chunk)
1441404342496:}
1441404343927:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1441404344135:chunk <- t(read.csv(file, row.names=1))
1441404344280:names <- row.names(chunk) #waste
1441404344423:hor_chunk <- cbind(hor_chunk, chunk)
1441404344561:}
1441404347375:row.names(hor_chunk) <- names
1441404347567:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1441404347720:hor_chunk <- NULL
1441404347871:#filenames <- list.files(path = "~/")
1441404348032:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1441404348191:}
1441404348357:setwd(pth)
1441404357748:generate.cor.parts(x)
1441404536379:generate.cor.parts(x)
1441404580258:ex_mat <- read.table(paste0(pth, "/", args))
1441404586288:rm(X)
1441404587829:rm(x)
1441404595774:nthreads <- 10 #also check if nthreads is a proper value, i.e. integer, ...
1441404596047:if(!exists("nthreads")) {
1441404596233:nthreads <- detectCores()
1441404596414:}
1441404596607:registerDoParallel(cores = nthreads)
1441404596959:mem.free <- as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1441404597366:# mem.est <- mem.avail / nthreads
1441404597824:generate.cor.parts(ex_mat)
1441404672944:generate.cor.parts(ex_mat)
1441404758563:generate.cor.parts(ex_mat)
1441404781792:generate.cor.parts(ex_mat)
1441404805345:generate.cor.parts(ex_mat)
1441404809149:mem.free <- as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1441404809547:# mem.est <- mem.avail / nthreads
1441404809907:generate.cor.parts(ex_mat, 10)
1441404824529:get.correlated()
1441405061096:dim(ex_mat)
1441405076904:correlation <- cor(ex_mat)
1441405085217:correlation <- cor(t(ex_mat)
1441405086536:)
1441503929934:ex_mat <- t(read.table(paste0(pth, "/", args)))
1441504144080:write.csv(ex_mat, "Rcorfunctionoutput")
1441506961587:args <- as.character("expression.gene.tsv")
1441506963445:args <- as.character(commandArgs(trailingOnly=T))
1441506963724:out_dir <- paste0(args, "_correlation_matrix")
1441507362182:out_dir <- paste0(args, "_correlation_matrix")
1441507363117:if(!dir.exists(out_dir)) {
1441507363379:dir.create(out_dir)
1441507363701:}
1441507386754:nthreads <- 10 #also check if nthreads is a proper value, i.e. integer, ...
1441507387011:if(!exists("nthreads")) {
1441507387355:nthreads <- detectCores()
1441507387696:}
1441507388713:registerDoParallel(cores = nthreads)
1441507424538:nthreads <- 10 #also check if nthreads is a proper value, i.e. integer, ...
1441507425812:registerDoParallel(cores = nthreads)
1441507439593:library(doParallel)
1441507443465:registerDoParallel(cores = nthreads)
1441508003322:setwd(paste0(pth, "/", folder))
1441508013397:pth <- getwd()
1441508027698:out_dir <- paste0(args, "_correlation_matrix")
1441508039881:args <- as.character("expression.gene.tsv")
1441508042386:out_dir <- paste0(args, "_correlation_matrix")
1441508088288:nchunks=25
1441508095756:foreach(i = 1:nchunks) %dopar% {
1441508095995:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441508096178:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441508096362:chunk <- read.csv(file, row.names=1)
1441508096506:names <- row.names(chunk) #waste
1441508096707:hor_chunk <- cbind(hor_chunk, chunk)
1441508096890:}
1441508097082:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1441508097257:chunk <- t(read.csv(file, row.names=1))
1441508097482:names <- row.names(chunk) #waste
1441508097681:hor_chunk <- cbind(hor_chunk, chunk)
1441508098000:}
1441508116183:write.csv
1441508133036:# create horizontal chunks files
1441508133037:foreach(i = 1:nchunks) %dopar% {
1441508133037:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441508133037:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441508133037:chunk <- read.csv(file, row.names=1)
1441508133038:names <- row.names(chunk) #waste
1441508133038:hor_chunk <- cbind(hor_chunk, chunk)
1441508133038:}
1441508133038:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1441508133039:chunk <- t(read.csv(file, row.names=1))
1441508133039:names <- row.names(chunk) #waste
1441508133039:hor_chunk <- cbind(hor_chunk, chunk)
1441508133039:}
1441508133040:#row.names(hor_chunk) <- names
1441508133040:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1441508133040:hor_chunk <- NULL
1441508133041:#filenames <- list.files(path = "~/")
1441508133041:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1441508133042:}
1441508166091:expression_matrix<-ex_mat
1441508183684:ex_mat <- t(read.table(paste0(pth, "/", args)))
1441508200732:setwd(paste0(pth, "/", out_dir))
1441508202019:ncolx <- ncol(expression_matrix)
1441508211678:expression_matrix <- ex_mat
1441508216940:ncolx
1441508219093:ncolx <- ncol(expression_matrix)
1441508220389:max.size = mem.free / nthreads_f
1441508220632:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1441508220847:# extend the matrix so it is divided into even chunks
1441508239032:foreach(i = 1:nchunks) %dopar% {
1441508239032:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441508239032:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441508239032:chunk <- read.csv(file, row.names=1)
1441508239033:names <- row.names(chunk) #waste
1441508239033:hor_chunk <- cbind(hor_chunk, chunk)
1441508239033:}
1441508239034:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1441508239034:chunk <- t(read.csv(file, row.names=1))
1441508239034:names <- row.names(chunk) #waste
1441508239034:hor_chunk <- cbind(hor_chunk, chunk)
1441508239035:}
1441508239035:#row.names(hor_chunk) <- names
1441508239035:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1441508239036:hor_chunk <- NULL
1441508239036:#filenames <- list.files(path = "~/")
1441508239036:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1441508239037:}
1441508631526:rownames(ex_mat)
1441508636482:row.names(ex_mat)
1441508640323:?rownames
1441508650235:?row.names
1441508694131:foreach(i = 1:nchunks) %dopar% {
1441508694312:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441508694811:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441508694853:chunk <- read.csv(file, row.names=1)
1441508694900:names <- rownames(chunk) #waste
1441508694986:hor_chunk <- cbind(hor_chunk, chunk)
1441508694986:}
1441508695047:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1441508695047:chunk <- t(read.csv(file, row.names=1))
1441508695047:names <- rownames(chunk) #waste
1441508695128:hor_chunk <- cbind(hor_chunk, chunk)
1441508695129:}
1441508695195:#row.names(hor_chunk) <- names
1441508695196:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1441508695299:hor_chunk <- NULL
1441508695436:#filenames <- list.files(path = "~/")
1441508695613:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1441508695949:}
1441508901573:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441508903272:}
1441508912322:i=2
1441508920810:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441508921977:}
1441508940742:chunk
1441508942285:chunk <- read.csv(file, row.names=1)
1441508952198:names <- row.names(chunk) #waste
1441508954454:hor_chunk <- cbind(hor_chunk, chunk)
1441508963310:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441508965661:hor_chunk <- cbind(hor_chunk, chunk)
1441508984005:hor_chunk <- matrix(NA)
1441508985637:hor_chunk <- cbind(hor_chunk, chunk)
1441508988556:View(hor_chunk)
1441509130079:hor_chunk <- matrix(NA)
1441509133051:View(hor_chunk)
1441509145117:hor_chunk <- matrix(NA, 0,0)
1441509148398:hor_chunk <- cbind(hor_chunk, chunk)
1441509161477:hor_chunk <- matrix(NA, 0)
1441509174318:hor_chunk <- matrix(NA)
1441509266066:hor_chunk <- matrix(NA, ncol=0)
1441509287478:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441509289845:hor_chunk <- cbind(hor_chunk, chunk)
1441509379460:nchunks=36
1441509382727:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441509384318:hor_chunk <- cbind(hor_chunk, chunk)
1441509390658:View(hor_chunk)
1441509442088:chunk <- read.csv(file, row.names=NULL)
1441509449303:View(chunk)
1441509712314:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441509716198:names <- chunk[,1]
1441509717312:row.names(hor_chunk) <- names
1441509719420:chunk <- chunk[,-1]
1441509720132:hor_chunk <- cbind(hor_chunk, chunk)
1441704719419:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441704724287:pth <- getwd()
1441704726085:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441704727526:View(data)
1441704769553:coloc <- matrix(NA)
1441704769951:for( i in unique(coloc_data$parameter)) {
1441704770326:new <- coloc_data[coloc_data$parameter == i,]
1441704770775:new <- new[,-1]
1441704771159:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441704771512:coloc <- merge(coloc, new)
1441704771888:}
1441704779855:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441706033789:pth <- "/mnt/DATAPART1/Sasi"
1441706035611:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441706035888:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441706036976:#
1441706037183:coloc_data <- matrix(NA)
1441706037367:for(file in file_list_coloc) {
1441706037539:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441706037696:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441706037855:coloc_data <- merge(coloc_data, new, all=T)
1441706038135:}
1441706040424:coloc_data <- coloc_data[,-6]
1441706040607:coloc_data$parameter <- as.character(coloc_data$parameter)
1441706041280:coloc <- matrix(NA)
1441706041758:for( i in unique(coloc_data$parameter)) {
1441706041936:new <- coloc_data[coloc_data$parameter == i,]
1441706042102:new <- new[,-1]
1441706042263:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441706042415:coloc <- merge(coloc, new)
1441706042774:}
1441706045401:View(coloc)
1441706113992:coloc <- coloc[,-2]
1441706124360:#
1441706124574:count_data <- matrix(NA, 0, 13)
1441706124772:for ( file in file_list_count) {
1441706124954:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1441706125156:count_data <- rbind(count_data, new)
1441706125380:}
1441706126227:count <- count_data[count_data$Area > 99,]
1441706126922:count <- as.data.frame(xtabs(~Label, count))
1441706127346:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441706135723:View(count)
1441706140123:### MERGE TABLES
1441706140346:res <- merge(coloc, count)
1441706143210:View(res)
1441706283254:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "yellow_area_fraction", "red_mean", "green_mean", "yellow_mean", "red_stdev","green_stdev", "yellow_stdev", "cell_count")
1441706301887:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441706302281:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441706331460:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441706331643:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441706331802:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441706340312:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441706340514:meta <- meta[, 6:10]
1441706344179:View(meta)
1441706376456:meta <- meta[, 6:]
1441706396512:meta <- meta[, -(1:5)]
1441706398780:View(meta)
1441706462633:names(meta) <- c("date", "cell_line", "image", "file")
1441706466155:res <- merge(res, meta)
1441706469445:View(res)
1441706501420:res$file <- gsub("_", "/", res$file)
1441706507029:res$cell_line[res$cell_line=="231"] <- c("MDAMB231")
1441706522899:res <- merge(coloc, count)
1441706523447:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "yellow_area_fraction", "red_mean", "green_mean", "yellow_mean", "red_stdev","green_stdev", "yellow_stdev", "cell_count")
1441706527178:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441706527358:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441706527529:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441706538303:res <- merge(res, meta)
1441706541216:View(res)
1441706554369:res$file <- gsub("_", "/", res$file)
1441706562737:res$cell_line=="231"
1441706585557:res$cell_line[as.character(res$cell_line)=="231"] <- c("MDAMB231")
1441706588895:View(res)
1441706650341:res$cell_line[res$cell_line==NA] <- c(factor("MDAMB231"))
1441706660908:res <- merge(coloc, count)
1441706661151:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "yellow_area_fraction", "red_mean", "green_mean", "yellow_mean", "red_stdev","green_stdev", "yellow_stdev", "cell_count")
1441706661288:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441706661458:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441706661598:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441706661887:### LABELS
1441706662154:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441706662317:meta <- meta[, -(1:5)]
1441706662509:# for round one: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441706662813:# for mitochondria:
1441706662993:names(meta) <- c("date", "cell_line", "image", "file")
1441706663166:res <- merge(res, meta)
1441706663350:#res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441706663993:res$file <- gsub("_", "/", res$file)
1441706664558:#res$cell_line[res$cell_line=="231"] <- c(factor("MDAMB231"))
1441706664720:res$cell_line <- droplevels(res$cell_line)
1441706672096:system("mkdir output")
1441706672341:write.csv(res, "output/measurements.csv")
1441706672719:print(paste0("Saved to: ", pth, "/output/measurements.csv"))
1441706719138:setwd(pth)
1441706721895:data <- read.csv(paste0(pth, "/output/measurements.csv"), row.names = NULL)
1441706723912:View(data)
1441736040923:data_m <- read.csv("/mnt/DATAPART1/Sasi/output_mitochondria/measurements.csv")
1441736047263:View(data_m)
1441736096569:res <- merge(coloc, count, all=T)
1441736099473:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "yellow_area_fraction", "red_mean", "green_mean", "yellow_mean", "red_stdev","green_stdev", "yellow_stdev", "cell_count")
1441736099863:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441736100125:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441736100342:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441736100641:### LABELS
1441736100857:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441736101013:meta <- meta[, -(1:5)]
1441736101189:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441736101422:# for mitochondria:
1441736101654:names(meta) <- c("date", "cell_line", "image", "file")
1441736102485:res <- merge(res, meta)
1441736102677:#res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441736102852:res$file <- gsub("_", "/", res$file)
1441736103061:# for ROUND ONE
1441736103261:#res$cell_line[res$cell_line=="231"] <- c(factor("MDAMB231"))
1441736103446:#res$cell_line <- droplevels(res$cell_line)
1441736103605:### SAVE AWAY
1441736103774:system("mkdir output")
1441736103941:write.csv(res, "output/measurements.csv")
1441736104122:print(paste0("Saved to: ", pth, "/output/measurements.csv"))
1441736124191:data_m <- read.csv("/mnt/DATAPART1/Sasi/output_mitochondria/measurements.csv")
1441736126652:View(data_m)
1441738794853:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1441738816303:rm(file_list_measure_lsm)
1441739146883:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1441739335108:meassure_lsm_data <- matrix(NA)
1441739335312:for( file in file_list_measure_lsm) {
1441739335519:Label <- c(gsub("C1-", "", gsub(".tif_measure_lsm.tsv", "", as.character(file))))
1441739335711:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441739335919:coloc_data <- merge(coloc_data, new, all=T)
1441739336127:}
1441739358192:measure_lsm_data <- matrix(NA)
1441739358373:for( file in file_list_measure_lsm) {
1441739358535:Label <- c(gsub("C1-", "", gsub(".tif_measure_lsm.tsv", "", as.character(file))))
1441739358711:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441739358870:measure_lsm_data <- merge(coloc_data, new, all=T)
1441739359022:}
1441739511238:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1441739511387:coloc_data <- matrix(NA)
1441739511557:for(file in file_list_coloc) {
1441739511767:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441739511903:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441739512032:coloc_data <- merge(coloc_data, new, all=T)
1441739512386:}
1441739512552:coloc_data <- coloc_data[,-6]
1441739512704:coloc_data$parameter <- as.character(coloc_data$parameter)
1441739523576:coloc_data <- matrix(NA)
1441739524158:for(file in file_list_coloc) {
1441739533319:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441739534127:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441739534958:coloc_data <- merge(coloc_data, new, all=T)
1441739535622:}
1441739605242:coloc_data <- matrix(NA)
1441739605481:for(file in file_list_coloc) {
1441739605640:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441739605943:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441739606247:coloc_data <- merge(coloc_data, new, all=T)
1441739606455:}
1441739609375:coloc_data <- coloc_data[,-6]
1441739609564:coloc_data$parameter <- as.character(coloc_data$parameter)
1441739609730:coloc <- matrix(NA)
1441739609894:for( i in unique(coloc_data$parameter)) {
1441739614377:new <- coloc_data[coloc_data$parameter == i,]
1441739614535:new <- new[,-1]
1441739614682:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label")
1441739614839:coloc <- merge(coloc, new)
1441739615015:}
1441739615191:coloc <- coloc[,-2]
1441739615653:#
1441739625647:View(meassure_lsm_data)
1441739641657:View(measure_lsm_data)
1441739791978:measure_lsm <- matrix(NA)
1441739792480:for( i in unique(measure_lsm_data$parameter)) {
1441739793072:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1441739793248:new <- new[,-1]
1441739794110:#names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441739794272:measure_lsm <- merge(measure_lsm, new)
1441739794418:}
1441739798546:View(measure_lsm)
1441739808639:measure_lsm <- matrix(NA)
1441739808982:for( i in unique(measure_lsm_data$parameter)) {
1441739809174:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1441739809341:new <- new[,-1]
1441739809511:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441739809694:measure_lsm <- merge(measure_lsm, new)
1441739809975:}
1441739813969:View(measure_lsm)
1441739916883:View(measure_lsm_data)
1441739926319:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1441739951720:View(measure_lsm)
1441739952783:View(measure_lsm_data)
1441739958863:View(data_m)
1441739972089:View(measure_lsm)
1441740002156:length(unique(measure_lsm$Label))
1441740030229:head(measure_lsm$Label)
1441740077161:measure_lsm_data <- matrix(NA)
1441740077383:for( file in file_list_measure_lsm) {
1441740077568:Label <- c(gsub("C1-", "", gsub(".tif_measure_lsm.tsv", "", as.character(file))))
1441740077744:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740077920:measure_lsm_data <- merge(coloc_data, new, all=T)
1441740078273:}
1441740088886:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1441740089958:measure_lsm <- matrix(NA)
1441740090153:for( i in unique(measure_lsm_data$parameter)) {
1441740090329:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1441740090504:new <- new[,-1]
1441740090672:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441740090835:measure_lsm <- merge(measure_lsm, new)
1441740091352:}
1441740132767:measure_lsm <- measure_lsm[,-2]
1441740135136:View(measure_lsm)
1441740175380:View(coloc)
1441740204360:coloc <- matrix(NA)
1441740204520:for( i in unique(coloc_data$parameter)) {
1441740204671:new <- coloc_data[coloc_data$parameter == i,]
1441740204815:new <- new[,-1]
1441740204979:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441740205120:coloc <- merge(coloc, new)
1441740205424:}
1441740205726:coloc <- coloc[,c(1,5,8,11)]
1441740208678:View(coloc)
1441740260241:res <- merge(measure_lsm, count, all=T)
1441740260902:res <- merge(res, coloc, all=T)
1441740264408:View(res)
1441740300395:res <- merge(measure_lsm, count, all=T)
1441740302625:View(res)
1441740322483:length(unique(res$Label))
1441740331009:unique(res$Label)
1441740357116:unique(measure_lsm$Label)
1441740432830:measure_lsm_data <- matrix(NA)
1441740433050:for( file in file_list_measure_lsm) {
1441740433259:Label <- c(gsub("C1-", "", gsub(".lsm_measure_lsm.tsv", "", as.character(file))))
1441740433450:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740433634:measure_lsm_data <- merge(coloc_data, new, all=T)
1441740433938:}
1441740439364:unique(measure_lsm$Label)
1441740464946:measure_lsm_data <- matrix(NA)
1441740465151:for( file in file_list_measure_lsm) {
1441740465320:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441740465471:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740465631:measure_lsm_data <- merge(coloc_data, new, all=T)
1441740465880:}
1441740469700:unique(measure_lsm$Label)
1441740496997:file_list_measure_lsm
1441740554728:measure_lsm_data <- matrix(NA)
1441740554942:for( file in file_list_measure_lsm) {
1441740555125:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441740555298:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740555482:measure_lsm_data <- merge(coloc_data, new, all=T)
1441740555772:}
1441740563244:unique(measure_lsm$Label)
1441740582362:for( file in file_list_measure_lsm) {
1441740583466:print(file)
1441740584632:}
1441740603766:measure_lsm_data <- matrix(NA)
1441740634757:measure_lsm_data <- matrix(NA, ncol=10)
1441740635281:for( file in file_list_measure_lsm) {
1441740635776:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441740635968:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740636120:measure_lsm_data <- merge(coloc_data, new, all=T)
1441740636680:}
1441740642741:unique(measure_lsm$Label)
1441740665849:for( file in file_list_measure_lsm) {
1441740667473:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441740667690:print(Label)
1441740668617:}
1441740690820:for( file in file_list_measure_lsm) {
1441740691674:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441740693083:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740693367:print(new)
1441740694481:}
1441740701523:measure_lsm_data <- matrix(NA)
1441740702131:for( file in file_list_measure_lsm) {
1441740703080:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441740703791:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740704599:measure_lsm_data <- merge(coloc_data, new, all=T)
1441740705074:}
1441740716874:measure_lsm$Label
1441740745064:measure_lsm_data <- matrix(NA)
1441740745243:for( file in file_list_measure_lsm) {
1441740745401:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441740745562:print(Label)
1441740745720:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441740745975:print(new)
1441740746171:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1441740746423:}
1441740769866:measure_lsm_data$Label
1441740783576:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1441740784807:measure_lsm <- matrix(NA)
1441740785016:for( i in unique(measure_lsm_data$parameter)) {
1441740785200:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1441740785383:new <- new[,-1]
1441740785557:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441740785720:measure_lsm <- merge(measure_lsm, new)
1441740785887:}
1441740786073:measure_lsm <- measure_lsm[,-2]
1441740788478:coloc_data <- matrix(NA)
1441740788686:for(file in file_list_coloc) {
1441740788858:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441740789016:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441740789178:coloc_data <- merge(coloc_data, new, all=T)
1441740789351:}
1441740789583:coloc_data <- coloc_data[,-6]
1441740789650:coloc_data$parameter <- as.character(coloc_data$parameter)
1441740789852:coloc <- matrix(NA)
1441740790136:for( i in unique(coloc_data$parameter)) {
1441740791798:new <- coloc_data[coloc_data$parameter == i,]
1441740791966:new <- new[,-1]
1441740792132:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441740792298:coloc <- merge(coloc, new)
1441740792468:}
1441740792633:coloc <- coloc[,c(1,5,8,11)]
1441740824717:res <- merge(measure_lsm, count, all=T)
1441740829659:View(res)
1441740860568:measure_lsm <- measure_lsm[,-2]
1441740867958:res <- merge(measure_lsm, count, all=T)
1441740870060:View(res)
1441740917463:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev", "blue_stdev", "cell_count")
1441740947364:View(coloc)
1441740998955:names(coloc) <- gsub("blue", "yellow", names(coloc))
1441741000692:View(coloc)
1441741065181:names(coloc) <- c("Label", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441741079843:res <- merge(measure_lsm, count, all=T)
1441741080560:res <- merge(res, coloc, all=T)
1441741094870:res <- merge(measure_lsm, count, all=T)
1441741095350:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev", "blue_stdev", "cell_count")
1441741103944:res <- merge(res, coloc, all=T)
1441741106976:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441741108816:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441741109000:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441741129447:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441741130053:meta <- meta[, -(1:5)]
1441741131166:names(meta) <- c("date", "cell_line", "image", "file")
1441741144071:View(meta)
1441741169730:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441741204605:unique(res$file)
1441741223323:unique(as.character(res$file))
1441741233104:as.data.frame(strsplit(as.character(res$file), "_"))
1441741255834:View(as.data.frame(strsplit(as.character(res$file), "_")))
1441741285228:View(t(as.data.frame(strsplit(as.character(res$file), "_"))))
1441741397335:strsplit(as.character(res$file)
1441741400083:)
1441741410453:strsplit(as.character(res$file), "_")
1441741419809:class(strsplit(as.character(res$file), "_"))
1441741432964:length(strsplit(as.character(res$file), "_"))
1441741510295:res <- merge(measure_lsm, count, all=T)
1441741515754:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev", "blue_stdev", "cell_count")
1441741519597:res <- merge(res, coloc, all=T)
1441741522598:res <- merge(measure_lsm, count, all=T)
1441741522772:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev", "blue_stdev", "cell_count")
1441741536382:res <- merge(res, coloc, by=Label, all=T)
1441741546208:View(res)
1441741547757:View(coloc)
1441741646239:res <- merge(measure_lsm, count, all=T)
1441741651664:coloc <- matrix(NA)
1441741651907:for( i in unique(coloc_data$parameter)) {
1441741652087:new <- coloc_data[coloc_data$parameter == i,]
1441741652262:new <- new[,-1]
1441741652437:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441741652616:coloc <- merge(coloc, new)
1441741652804:}
1441741652986:coloc <- coloc[,c(1,5,8,11)]
1441741653217:names(coloc)[1] <- "Label"
1441741657702:res <- merge(measure_lsm, count, all=T)
1441741659038:res <- merge(res, coloc, by=Label, all=T)
1441741677543:res <- merge(res, coloc, by="Label", all=T)
1441741679877:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441741680229:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441741695348:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441741695563:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441741695789:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441741703857:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441741705692:meta <- meta[, -(1:5)]
1441741711049:View(meta)
1441741727263:names(meta) <- c("date", "cell_line", "image", "file")
1441741736182:res <- merge(res, meta)
1441741738367:View(res)
1441741752837:res <- merge(measure_lsm, count, all=T)
1441741753022:res <- merge(res, coloc, by="Label", all=T)
1441741753136:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441741753250:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441741753539:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441741753551:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441741753752:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441741753780:### LABELS: ROUND ONE
1441741754043:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441741754319:# meta <- meta[, -(1:5)]
1441741754496:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441741754658:### LABELS: mitochondria:
1441741754824:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441741755101:meta <- meta[, -(1:5)]
1441741755485:names(meta) <- c("date", "cell_line", "image", "file")
1441741756095:res <- merge(meta,res)
1441741759031:res$file <- gsub("_", "/", res$file)
1441741761055:View(res)
1441741894184:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441741896006:res$cell_line <- droplevels(res$cell_line)
1441742001825:res <- res[,c(1,2,3,4,15,6,7,8,9,10,11,12,13,14,16,17,18,19,20)]
1441742003753:View(res)
1441742010298:### MERGE TABLES
1441742010298:res <- merge(measure_lsm, count, all=T)
1441742010300:res <- merge(res, coloc, by="Label", all=T)
1441742010301:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441742010302:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441742010302:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441742010303:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441742010303:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441742010304:### LABELS: ROUND ONE
1441742010304:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441742010304:# meta <- meta[, -(1:5)]
1441742010304:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441742010304:### LABELS: mitochondria:
1441742010305:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441742010319:meta <- meta[, -(1:5)]
1441742010320:names(meta) <- c("date", "cell_line", "image", "file")
1441742010320:res <- merge(meta,res)
1441742010322:#res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441742010322:res$file <- gsub("_", "/", res$file)
1441742010323:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441742010323:res$cell_line <- droplevels(res$cell_line)
1441742022767:res <- res[,c(1,2,3,4,15,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20)]
1441742024759:View(res)
1441742043605:View(res)
1441742061997:### MERGE TABLES
1441742061997:res <- merge(measure_lsm, count, all=T)
1441742061999:res <- merge(res, coloc, by="Label", all=T)
1441742062001:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441742062001:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441742062002:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441742062002:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441742062003:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441742062003:### LABELS: ROUND ONE
1441742062003:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441742062004:# meta <- meta[, -(1:5)]
1441742062004:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441742062004:### LABELS: mitochondria:
1441742062004:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441742062020:meta <- meta[, -(1:5)]
1441742062020:names(meta) <- c("date", "cell_line", "image", "file")
1441742062021:res <- merge(meta,res)
1441742062022:#res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441742062022:res$file <- gsub("_", "/", res$file)
1441742062023:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441742062024:res$cell_line <- droplevels(res$cell_line)
1441742062024:### rearrange
1441742062024:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1441742065840:View(res)
1441742101996:system("mkdir output")
1441742104650:write.csv(res, "output/measurements.csv")
1441742298694:file_list_in_nuclei <- list_files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1441742318729:pth <- "/mnt/DATAPART1/Sasi"
1441742320408:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441742320662:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441742322319:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1441742322582:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1441742364168:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441742364534:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441742367822:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1441742368804:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1441742459890:file_list_coloc
1441742465787:file_list_coloc==NULL
1441742474442:file_list_coloc==c()
1441742488075:file_list_coloc==1
1441742494530:file_list_coloc==empty
1441742497155:file_list_coloc==empty()
1441742499971:file_list_coloc==emptyenv()
1441742508906:file_list_coloc[1]
1441742549455:file_list_coloc[1]==NA
1441742555904:file_list_coloc[1]==f
1441742557961:file_list_coloc[1]==1
1441742792150:if (!is.na(file_list_in_nuclei[1])) {
1441742792546:print("Green in nuclei data detected, adding")
1441742794150:}
1441742839783:if (!is.na(file_list_in_nuclei[1])) {
1441742839996:print("Green in nuclei data detected, adding...")
1441742840185:in_nuclei_data <- matrix(NA)
1441742840361:for (file in file_list_in_nuclei) {
1441742840680:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1441742840871:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1441742841076:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1441742841278:}
1441742841479:} else {
1441742841871:print("No green in nuclei data detected.")
1441742842062:}
1441742845203:View(in_nuclei_data)
1441742890286:in_nuclei <- matrix(NA)
1441742893776:for( i in unique(in_nuclei_data$parameter)) {
1441742895724:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1441742895913:new <- new[,-1]
1441742896097:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441742896423:in_nuclei <- merge(in_nuclei, new)
1441742896662:}
1441742929208:View(new)
1441742964503:View(in_nuclei)
1441742976109:in_nuclei_data <- matrix(NA)
1441742976377:for (file in file_list_in_nuclei) {
1441742976631:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1441742976880:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1441742977087:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1441742977351:}
1441742979154:in_nuclei <- matrix(NA)
1441742979390:for( i in unique(in_nuclei_data$parameter)) {
1441742979607:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1441742979807:new <- new[,-1]
1441742980046:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441742980318:in_nuclei <- merge(in_nuclei, new)
1441742980655:}
1441743001919:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1441743054069:names(in_nuclei)[1] <- "Label"
1441743132418:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1441743240634:x <- read.csv("/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv")
1441743265836:res <- merge(x, in_nuclei)
1441743277937:res <- merge(x, in_nuclei, by="file, all=T")
1441743281794:res <- merge(x, in_nuclei, by="file", all=T)
1441743293010:res <- merge(x, in_nuclei, by="file")
1441743298792:res <- merge(x, in_nuclei, by="file", all=T)
1441743327697:res <- merge(x, in_nuclei, by="file")
1441743344692:res <- merge(x, in_nuclei, by="file", all.x = T)
1441743347612:View(res)
1441743363973:View(in_nuclei)
1441743394481:in_nuclei$file <- gsub("_", "/", in_nuclei$file)
1441743399170:res <- merge(x, in_nuclei, by="file", all.x = T)
1441743402276:View(res)
1441743452035:write.csv(res,"/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv")
1441743471317:x <- read.csv("/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv")
1441743474482:View(x)
1441743492428:View(res)
1441743496660:res <- res[,-2]
1441743503020:write.csv(res,"/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv")
1441743505788:x <- read.csv("/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv")
1441743508075:View(x)
1441743527507:write.csv(res,"/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv", row.names = NULL)
1441743539365:write.csv(res,"/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv", row.names=F)
1441743542077:x <- read.csv("/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv")
1441743544156:View(x)
1441743936979:pth <- getwd()
1441743945392:out_dir <- paste0(args, "_correlation_matrix")
1441743949307:if(!dir.exists(out_dir)) {
1441743949536:dir.create(out_dir)
1441743949706:}
1441743953591:ex_mat <- t(read.table(paste0(pth, "/", args)))
1441743994784:generate.cor.parts(ex_mat, 10)
1441744001686:## FUNCTIONS
1441744001687:# parallel calculate correlation matrix; based on code from: https://gist.github.com/bobthecat/5024079
1441744001687:# the function returns "horizontal" chunks of matrix
1441744001687:generate.cor.parts <- function(expression_matrix, nthreads_f) {
1441744001687:setwd(paste0(pth, "/", out_dir))
1441744001688:# prepare names
1441744001688:# names <- colnames(expression_matrix)
1441744001688:ncolx <- ncol(expression_matrix)
1441744001689:# determine the largest chunk size (matrix / vector) for one thread
1441744001689:max.size = mem.free / nthreads_f
1441744001689:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1441744001690:# extend the matrix so it is divided into even chunks
1441744001690:add <- ncolx %% nchunks
1441744001690:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1441744001690:ncolx <- ncol(expression_matrix)
1441744001691:## split column numbers into groups
1441744001691:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1441744001692:## create all unique combinations of blocks
1441744001692:combs <- expand.grid(1:length(groups), 1:length(groups))
1441744001692:combs <- t(apply(combs, 1, sort))
1441744001692:combs <- unique(combs)
1441744001693:#
1441744001693:#   # calculate correlation for each combination
1441744001693:#   foreach(i = 1:nrow(combs)) %dopar% {
1441744001694:#     comb <- combs[i, ]
1441744001694:#     # print(comb)
1441744001694:#     G1 <- groups[[comb[1]]]
1441744001695:#     G2 <- groups[[comb[2]]]
1441744001695:#     cor.mat <- cor(expression_matrix[, G1], expression_matrix[, G2])
1441744001695:#     write.csv(cor.mat, file=paste0("cor_mat_", comb[1], "r", comb[2], "c", ".csv"))
1441744001696:#     rm(cor.mat)
1441744001696:#     print(paste(comb[1], comb[2], "chunk done")) #? out of
1441744001696:#     gc(verbose=F)
1441744001697:#   }
1441744001697:#   rm(expression_matrix)
1441744001698:# create horizontal chunks files
1441744001698:foreach(i = 1:nchunks) %dopar% {
1441744001698:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1441744001699:for(file in list.files(pattern=paste0("_", i, "r"))) {
1441744001699:chunk <- read.csv(file, row.names=NULL)
1441744001699:if(!exists(names)) {
1441744001700:names <- chunk[,1]
1441744001700:row.names(hor_chunk) <- names
1441744001700:}
1441744001701:chunk <- chunk[,-1]
1441744001701:hor_chunk <- cbind(hor_chunk, chunk)
1441744001701:}
1441744001702:#TODO
1441744001703:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1441744001703:chunk <- t(read.csv(file, row.names=1))
1441744001704:names <- row.names(chunk) #waste
1441744001704:hor_chunk <- cbind(hor_chunk, chunk)
1441744001704:}
1441744001705:#row.names(hor_chunk) <- names
1441744001706:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1441744001706:hor_chunk <- NULL
1441744001707:#filenames <- list.files(path = "~/")
1441744001707:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1441744001708:}
1441744001709:setwd(pth)
1441744001709:}
1441744001710:# get the table of transcripts that are most correlated
1441744001710:get.correlated <- function(folder=out_dir, threshold=0.95) {
1441744001711:setwd(paste0(pth, "/", folder))
1441744001711:# get list of correlation matrix "horizontal" files
1441744001711:file_list <- list.files(pattern="hor.csv")
1441744001711:if(length(file_list) == 0) {
1441744001712:stop("specify folder")
1441744001712:}
1441744001712:foreach(file = file_list) %dopar% {
1441744001712:print(paste("Processing", file))
1441744001713:hor_chunk <- as.matrix(read.csv(file, row.names=1))
1441744001713:nrows <- nrow(hor_chunk)
1441744001713:tx_names <- row.names(hor_chunk)
1441744001714:i <- 1:nrows
1441744001714:res <- matrix(nrow=0, ncol=3)
1441744001714:for(i in 1:nrows) {
1441744001714:row <- hor_chunk[i,]
1441744001715:row <- row[!is.na(row) & row!=1 & (row>threshold | row<(-threshold))]
1441744001715:if(length(row)!=0) {
1441744001715:row <- cbind(c(tx_names[i]), names(row), row)
1441744001715:res <- rbind(res, row)
1441744001716:}
1441744001716:}
1441744001716:colnames(res) <- c("Ensembl.Gene.ID.0", "Ensembl.Gene.ID.1", "correlation")
1441744001717:rownames(res) <- NULL
1441744001717:write.csv(res, file=paste0(pth, "/correlated_", threshold, ".csv"), row.names=F)
1441744001718:}
1441744001718:#? there are duplicate entries - remove - or just leave for now
1441744001718:}
1441744001719:##
1441744001719:##? RENAME ALL OUTPUT OR PUT IN FOLDERS
1441744001720:##? NORMALISATION
1441744001720:## LIBRARIES -> put them out
1441744001720:library(doParallel)
1441744012040:generate.cor.parts(ex_mat, 10)
1441744016229:mem.free <- as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1441744016948:generate.cor.parts(ex_mat, 10)
1441744553253:system("cd ..")
1441744844015:cor_mat <- read.csv("Rcorfunctionoutput")
1441744857976:setwd("..")
1441744861440:cor_mat <- read.csv("Rcorfunctionoutput")
1441744894977:View(cor_mat)
1441744941374:View(ex_mat)
1441744952504:dim(ex_mat)
1441746732189:setwd("/mnt/DATAPART1/Sasi/output_mitochondria")
1441746752560:View(read.csv("measurements.csv"))
1441747121048:View(read.csv("/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv"))
1441747151084:m <-(read.csv("measurements.csv"))
1441747163835:L <-(read.csv("/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv"))
1441747176258:mean(m$yellow_mean_per_cell)
1441747182130:mean(m$yellow_mean_per_cell, na.rm=T)
1441747186282:mean(L$yellow_mean_per_cell, na.rm=T)
1441747223741:View(m)
1441747224346:View(L)
1441747466304:mean(L$yellow_mean_per_cell[L$treatment=="ZnaZInc",], na.rm=T)
1441747469151:mean(L$yellow_mean_per_cell[L$treatment=="ZnaZInc"], na.rm=T)
1441747485115:mean(L[L$treatment=="ZnaZInc",]$yellow_mean_per_cell, na.rm=T)
1441747495961:mean(L[L$treatment=="ZnaZinc",]$yellow_mean_per_cell, na.rm=T)
1441818769273:ex_mat <- read.table("expression.gene.tsv")
1441818802279:cor_mat <- cor(ex_mat)
1441818829044:ex_mat <- t(ex_mat)
1441818835178:cor_mat <- cor(ex_mat)
1441819061199:rm(expression_matrix)
1441819066030:rm(ex_mat)
1441819076272:rm(chunk, hor_chunk)
1441819564986:write.csv(cor_mat, "cor_mat_cor_function.csv")
1441826302022:libRary(ff)
1441826307062:library()
1441826326588:library(ff)
1441826334661:cor_mat
1441826725620:ex_mat <- read.table("expression.gene.tsv")
1441826739355:ex_mat <- t(ex_mat)
1441826740205:cor_mat <- cor(ex_mat)
1441827124212:cor_mat <- as.ff(cor_mat)
1441827134252:library(ff)
1441827138811:cor_mat <- as.ff(cor_mat)
1441827639068:e <- ex_mat
1441827643365:rm(ex_mat)
1441827651101:apply(e, sum)
1441827655888:apply(e, 2, sum)
1441827666881:apply(e, 1, sum)
1441827711843:apply(e, 1, mean)
1441827726212:apply(e, 1, stderr)
1441827731714:apply(e, 1, sd)
1441827766953:apply(e, 2, mean)
1441827806165:apply(e, 2, sd)
1441827867573:plot(apply(e, 2, sd))
1441827884284:plot(apply(e, 2, mean))
1441827912352:png("explor1.png")
1441828075925:par(mfrow=c(3,3))
1441828089180:plot(apply(e, 2, sum))
1441828092582:plot(apply(e, 2, mean))
1441828096803:plot(apply(e, 2, sd))
1441828119352:plot(apply(e, 1, sum))
1441828123204:plot(apply(e, 1, mean))
1441828125658:plot(apply(e, 1, sd))
1441828138501:dev.off()
1441828357860:X1
1441828359177:X11
1441828362277:X11()
1441828381658:par(mfrow=c(3,4))
1441828383580:plot(apply(e, 2, sum))
1441828383994:plot(apply(e, 2, mean))
1441828384610:plot(apply(e, 2, sd))
1441828386367:plot(apply(e, 1, sum))
1441828386470:plot(apply(e, 1, mean))
1441828386588:plot(apply(e, 1, sd))
1441828423191:plot(apply(e, 1, var))
1441828429252:plot(apply(e, 2, var))
1441828848271:plot(c(e))
1441828893676:plot(sort(c(e)))
1441828956413:plot(scale(c(e)))
1441829127905:head(sort(c(e)))
1441829144627:sum(c(e)==0)
1441829243567:sum(c(e)<2)
1441834706330:colSums(ex_mat)
1441834710385:colSums(e)
1441834719179:e <- t(e)
1441834721277:colSums(e)
1441834812507:plot(e[,1:2], cex=.1)
1441834877428:plot(e[,4:5], cex=.1)
1441834893065:plot(e[,1:2])
1441834898502:plot(e[,1:2],cex=1)
1441834904002:plot(e[,1:2],cex=.2)
1441834907154:plot(e[,1:2],cex=.4)
1441834910252:plot(e[,1:2],cex=.3)
1441900281163:ffsave(cor_mat)
1441900284463:library(ff)
1441900887654:X11()
1441900937068:par(mfrow=c(3,4))
1441900999045:plot(apply(e, 2, sum))
1441901007659:plot(apply(e, 1, sum))
1441901036059:plot(apply(e, 1, sum), ylim=c(0, 500000))
1441901043894:plot(apply(e, 1, sum), ylim=c(0, 100000))
1441901106331:plot(sort(apply(e, 1, sum)), ylim=c(0, 100000))
1441901179770:hist(apply(e, 1, sum), ylim=c(0, 100000))
1441901235482:hist(apply(e, 1, sum))
1441901272102:class(apply(e, 1, sum))
1441901287330:class(colSums(e))
1441901293188:hist(colSums(e))
1441901734387:hist(c(e))
1441901740351:hist(e)
1441901793245:?hist
1441901799558:library(ggplot2)
1441901826586:ggplot(c(e)) + geom_bar()
1441901838063:ggplot(e + geom_bar()
1441901843458:ggplot(e) + geom_bar()
1441901890418:hist(e, freq=T)
1441901929904:hist(e, breaks=99, freq=T)
1441902003546:hist(e[e<400000], breaks=99, freq=T)
1441902014223:hist(e[e<400000])
1441902025218:hist(e[e<100000])
1441902034503:hist(e[e<10000])
1441902038369:hist(e[e<100])
1441902060199:hist(e[e<100 & e>0])
1441902064607:hist(e[e<100 & e>3])
1441902099155:hist(e[e<1000 & e>5])
1441902103815:hist(e[e<100 & e>5])
1441902189657:hist(e[e>5], ylim=c(0,300000))
1441902198487:hist(e[e>5], ylim=c(0,10000))
1441902202806:hist(e[e>5], ylim=c(0,100))
1441902205969:hist(e[e>5], ylim=c(0,10))
1441902274248:xname(e)
1441902328511:max(e)
1441902371111:ehist <= hist(e[e>5], ylim=c(0,10), returnData=T)
1441902374917:ehist <- hist(e[e>5], ylim=c(0,10), returnData=T)
1441902392284:ehist <- plot(e[e>5], ylim=c(0,10), returnData=T)
1441902497294:?"plot"
1441902632546:?cut
1441902816506:head(cut(e, 99))
1441902871290:View(cut(e, 99))
1441902930741:View(head(cbind(c(e),cut(c(e), 99))
1441902932425:)
1441902940925:View(head(cbind(c(e),cut(c(e), 99))))
1441903008700:dim(cor_mat)
1441903018094:head(cor_mat)
1441904862116:e[e<5 & e>500000] <- NA
1441904871485:sum(is.na(e))
1441904894884:sum(e[e<5 & e>500000])
1441904927672:sum(e[e<5 | e>500000])
1441904934777:e[e<5 | e>500000] <- NA
1441904938380:sum(is.na(e))
1441904974771:class(e[e<5 | e>500000])
1441904991302:sum([e<5 | e>500000])
1441905018685:sum(e<5 | e>500000)
1441905129295:apply(e, 1, sum(is.na(x) == dim(e, 2)))
1441905133773:dim(e,2)
1441905139132:dim(e)[2]
1441905151101:dim(e)[1]
1441905171605:apply(e, 1, function(x) { sum(is.na(x) == dim(e)[1] } ))
1441905181939:apply(e, 1, function(x) {sum(is.na(x) == dim(e)[1]} ))
1441905207102:?apply
1441905241171:apply(e, 1, function(x) sum(is.na(x) == dim(e)[1] ))
1441905253574:apply(e, 2, function(x) sum(is.na(x) == dim(e)[2] ))
1441905268773:apply(e, 2, function(x) sum(is.na(x)==dim(e)[2] ))
1441905338222:sum(is.na(e[,1]))
1441905341558:sum(is.na(e[1,]))
1441905356461:apply(e, 2, function(x) sum(is.na(x)) ))
1441905363902:apply(e, 2, function(x) sum(is.na(x)) )
1441905396660:apply(e, 2, function(x) sum(is.na(x))=dim(e)[2] )
1441905556285:apply(e, 2, function(x) sum(is.na(x))==dim(e)[2] )
1441905571199:apply(e, 1, function(x) sum(is.na(x))==dim(e)[1] )
1441905581497:sum(apply(e, 1, function(x) sum(is.na(x))==dim(e)[1] ))
1441905597735:apply(e, 1, function(x) sum(is.na(x) )
1441905600759:)
1441905619326:apply(e, 1, function(x) sum(is.na(x)==72)
1441905631488:sum(apply(e, 1, function(x) sum(is.na(x)==72)))
1441905656030:dim(apply(e, 1, function(x) sum(is.na(x)==72)))
1441905660998:class(apply(e, 1, function(x) sum(is.na(x)==72)))
1441905673829:head(apply(e, 1, function(x) sum(is.na(x)==72)))
1441905685460:headc((apply(e, 1, function(x) sum(is.na(x)==72))))
1441905692480:head(c(apply(e, 1, function(x) sum(is.na(x)==72))))
1441905724084:sum(apply(e, 1, function(x) sum(is.na(x))==72))
1441905760594:L <- apply(e, 1, function(x) sum(is.na(x))==72)
1441905769138:L1 <- apply(e, 1, function(x) sum(is.na(x))==72)
1441905771901:sum(apply(e, 1, function(x) sum(is.na(x))==72))rm(L)
1441905775603:rm(L)
1441905791912:L1 <- apply(e, 1, function(x) sum(is.na(x))==dim(e)[1])
1441905798884:sum(L1)
1441905805184:L1 <- apply(e, 1, function(x) sum(is.na(x))==dim(e)[2])
1441905807396:sum(L1)
1441905824076:L2 <- apply(e, 2, function(x) sum(is.na(x))==dim(e)[1])
1441905831325:sum(L2)
1441907626499:dim(E)
1441907629222:dim(e)
1441907646874:ep <- e[L1, L2]
1441907668654:length(L1)
1441907674185:length(L2)
1441907683334:dim(ep)
1441907713841:ep <- e[L1,]
1441907765894:ep <- ep[,L2]
1441907779945:ep <- e[,L2]
1441907792486:head(L2)
1441907817336:L1 <- apply(e, 1, function(x) sum(is.na(x))!=dim(e)[2])
1441907817644:L2 <- apply(e, 2, function(x) sum(is.na(x))!=dim(e)[1])
1441907821790:ep <- e[L1,L2]
1441907829400:dim(ep)
1441907983182:cor_ep <- cor(ep)
1441907990516:cor_ep <- cor(t(ep)
1441907993342:)
1441914190807:browseVignettes(DESeq2)
1441914193005:browseVignettes(DESeq)
1441914198926:browseVignettes("DESeq2")
1441914404945:DESeqDataSetFromMatrix(ep)
1441914425641:library(DESeq2)
1441914433127:DESeqDataSetFromMatrix(ep)
1441914459326:??"DESeqDataSetFromMatrix"
1441914530502:rlog(ep)
1441914649534:ep <- e
1441914654959:ep[ep<5 | ep>500000] <- NA
1441914685108:ep <- e
1441914685391:ep[ep<5 | ep>500000] <- NA
1441914686430:L1 <- apply(ep, 1, function(x) sum(is.na(x))!=dim(ep)[2])
1441914686774:L2 <- apply(ep, 2, function(x) sum(is.na(x))!=dim(ep)[1])
1441914686860:ep <- e[L1,L2]
1441914697102:sum(is.na(ep))
1441914708476:dim(ep)
1441914775052:head(ep)
1441914807988:sum(is.na(e))
1441914814533:e <- read.table("expression.gene.tsv")
1441914818577:sum(is.na(e))
1441914822980:ep <- e
1441914823464:ep[ep<5 | ep>500000] <- NA
1441914823893:#remove empty rows and cols
1441914824204:L1 <- apply(ep, 1, function(x) sum(is.na(x))!=dim(ep)[2])
1441914825154:L2 <- apply(ep, 2, function(x) sum(is.na(x))!=dim(ep)[1])
1441914825250:ep <- e[L1,L2]
1441914830777:sum(is.na(e))
1441914835452:sum(is.na(ep))
1441914904755:DESeqDataSetFromMatrix(ep)
1441914908954:rld <- rlog(dds)
1441914918502:rld <- rlog(ep)
1441915098613:e <- as.matrix(read.table("expression.gene.tsv"))
1441915102785:ep <- e
1441915103040:ep[ep<5 | ep>500000] <- NA
1441915103811:L1 <- apply(ep, 1, function(x) sum(is.na(x))!=dim(ep)[2])
1441915104142:L2 <- apply(ep, 2, function(x) sum(is.na(x))!=dim(ep)[1])
1441915104614:ep <- e[L1,L2]
1441915110929:rld <- rlog(ep)
1441915248216:DESeqDataSetFromMatrix(ep)
1441915268807:colData()
1441915273627:colData(ep)
1441915284862:colData(as.data.frame(ep))
1441920808866:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1441920810565:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1441920811707:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1441920811908:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1441920819002:# measure RGB channels on converted .lsm images
1441920822099:measure_lsm_data <- matrix(NA)
1441920822398:for( file in file_list_measure_lsm) {
1441920822618:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441920822804:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441920822978:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1441920823426:}
1441920823818:#measure_lsm_data <- measure_lsm_data[,-6]
1441920823993:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1441920824377:measure_lsm <- matrix(NA)
1441920824585:for( i in unique(measure_lsm_data$parameter)) {
1441920824760:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1441920825162:new <- new[,-1]
1441920830138:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441920830337:measure_lsm <- merge(measure_lsm, new)
1441920830512:}
1441920830842:measure_lsm <- measure_lsm[,-2]
1441920831568:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1441920831737:coloc_data <- matrix(NA)
1441920832064:for(file in file_list_coloc) {
1441920832234:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1441920832408:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1441920832567:coloc_data <- merge(coloc_data, new, all=T)
1441920832744:}
1441920833304:coloc_data <- coloc_data[,-6]
1441920833483:coloc_data$parameter <- as.character(coloc_data$parameter)
1441920833640:coloc <- matrix(NA)
1441920834417:for( i in unique(coloc_data$parameter)) {
1441920835041:new <- coloc_data[coloc_data$parameter == i,]
1441920835208:new <- new[,-1]
1441920835368:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441920835640:coloc <- merge(coloc, new)
1441920835906:}
1441920836136:coloc <- coloc[,c(1,5,8,11)]
1441920836299:names(coloc)[1] <- "Label"
1441920836640:#
1441920836849:count_data <- matrix(NA, 0, 13)
1441920837032:for ( file in file_list_count) {
1441920837313:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1441920837560:count_data <- rbind(count_data, new)
1441920837768:}
1441920838095:count <- count_data[count_data$Area > 99,]
1441920838320:count <- as.data.frame(xtabs(~Label, count))
1441920838519:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1441920839272:# green in nuclei
1441920839631:if (!is.na(file_list_in_nuclei[1])) {
1441920840131:print("Green in nuclei data detected, adding...")
1441920840158:in_nuclei_data <- matrix(NA)
1441920840223:for (file in file_list_in_nuclei) {
1441920840273:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1441920840274:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1441920840295:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1441920840536:}
1441920841031:in_nuclei <- matrix(NA)
1441920841180:for( i in unique(in_nuclei_data$parameter)) {
1441920841400:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1441920841556:new <- new[,-1]
1441920841794:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441920841908:in_nuclei <- merge(in_nuclei, new)
1441920842100:}
1441920842856:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1441920843085:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1441920843319:} else {
1441920843468:print("No green in nuclei data detected.")
1441920843694:}
1441920844704:### MERGE TABLES
1441920844916:res <- merge(measure_lsm, count, all=T)
1441920845383:res <- merge(res, coloc, by="Label", all=T)
1441920846037:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441920847515:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441920849035:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441920849252:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441920849455:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441920854587:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441920855423:meta <- meta[, -(1:5)]
1441920855883:names(meta) <- c("date", "cell_line", "image", "file")
1441920856707:res <- merge(meta,res)
1441920857510:res$file <- gsub("_", "/", res$file)
1441920859274:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441920859479:res$cell_line <- droplevels(res$cell_line)
1441920861706:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1441920864418:if (!is.na(file_list_in_nuclei[1])) {
1441920864737:res <- merge(res, in_nuclei)
1441920865559:}
1441920869160:View(res)
1441920977417:View(in_nuclei_data)
1441920991349:res <- merge(measure_lsm, count, all=T)
1441920993549:res <- merge(res, coloc, by="Label", all=T)
1441920995575:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441920995791:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441920997175:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441920997339:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441920997495:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441921006211:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921006429:meta <- meta[, -(1:5)]
1441921006614:names(meta) <- c("date", "cell_line", "image", "file")
1441921008309:res <- merge(meta,res)
1441921011981:res$file <- gsub("_", "/", res$file)
1441921012793:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441921013270:res$cell_line <- droplevels(res$cell_line)
1441921015652:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1441921017430:View(res)
1441921052561:res <- merge(measure_lsm, count, all=T)
1441921052563:res <- merge(res, coloc, by="Label", all=T)
1441921052565:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441921052565:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441921052565:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441921052566:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441921052566:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441921052567:### LABELS: ROUND ONE
1441921052567:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921052567:# meta <- meta[, -(1:5)]
1441921052568:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441921052568:### LABELS: mitochondria:
1441921052568:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921052583:meta <- meta[, -(1:5)]
1441921052583:names(meta) <- c("date", "cell_line", "image", "file")
1441921052584:res <- merge(meta,res)
1441921052587:#res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441921052587:res$file <- gsub("_", "/", res$file)
1441921052588:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441921052588:res$cell_line <- droplevels(res$cell_line)
1441921054358:View(res)
1441921084788:View(coloc)
1441921087138:View(count)
1441921089541:View(in_nuclei)
1441921100391:View(in_nuclei_data)
1441921106066:View(in_nuclei)
1441921109377:View(measure_lsm)
1441921115721:View(new)
1441921116743:View(meta)
1441921118913:View(measure_lsm_data)
1441921119956:View(measure_lsm)
1441921157750:measure_lsm <- matrix(NA)
1441921157901:for( i in unique(measure_lsm_data$parameter)) {
1441921158173:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1441921158320:new <- new[,-1]
1441921158461:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441921158605:measure_lsm <- merge(measure_lsm, new)
1441921159126:}
1441921160894:View(measure_lsm)
1441921171454:View(measure_lsm_data)
1441921209739:View(new)
1441921251378:measure_lsm_data <- matrix(NA)
1441921251532:for( file in file_list_measure_lsm) {
1441921251654:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1441921251807:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1441921251958:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1441921252110:}
1441921252711:measure_lsm_data <- measure_lsm_data[,-6]
1441921255302:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1441921256006:measure_lsm <- matrix(NA)
1441921256182:for( i in unique(measure_lsm_data$parameter)) {
1441921256334:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1441921256485:new <- new[,-1]
1441921256638:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441921256789:measure_lsm <- merge(measure_lsm, new)
1441921256940:}
1441921257141:measure_lsm <- measure_lsm[,-2]
1441921259063:View(measure_lsm)
1441921273990:res <- merge(measure_lsm, count, all=T)
1441921274156:res <- merge(res, coloc, by="Label", all=T)
1441921274636:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441921275321:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441921277397:View(res)
1441921286117:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441921286292:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441921286443:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441921288260:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921288468:meta <- meta[, -(1:5)]
1441921288628:names(meta) <- c("date", "cell_line", "image", "file")
1441921288964:res <- merge(meta,res)
1441921289105:#res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441921289613:res$file <- gsub("_", "/", res$file)
1441921289780:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441921289940:res$cell_line <- droplevels(res$cell_line)
1441921290099:### rearrange
1441921290266:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1441921290408:### add green in nuclei,if exists
1441921290668:if (!is.na(file_list_in_nuclei[1])) {
1441921290844:res <- merge(res, in_nuclei)
1441921291012:}
1441921291156:### SAVE AWAY
1441921299935:### MERGE TABLES
1441921299935:res <- merge(measure_lsm, count, all=T)
1441921299938:res <- merge(res, coloc, by="Label", all=T)
1441921299940:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441921299940:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441921299941:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441921299941:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441921299941:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441921299942:### LABELS: ROUND ONE
1441921299942:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921299943:# meta <- meta[, -(1:5)]
1441921299943:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441921299943:### LABELS: mitochondria:
1441921299943:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921299960:meta <- meta[, -(1:5)]
1441921299961:names(meta) <- c("date", "cell_line", "image", "file")
1441921299961:res <- merge(meta,res)
1441921299963:#res <- res[, c(1,11,12,13,14,2,3,4,5,6,7,8,9,10)]
1441921299963:res$file <- gsub("_", "/", res$file)
1441921302587:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441921306091:res$cell_line <- droplevels(res$cell_line)
1441921308723:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1441921329090:View(in_nuclei)
1441921330043:View(in_nuclei_data)
1441921378335:View(in_nuclei_data)
1441921457705:in_nuclei_data <- in_nuclei_data[,-6]
1441921459719:View(in_nuclei_data)
1441921694382:in_nuclei <- matrix(NA)
1441921694732:for( i in unique(in_nuclei_data$parameter)) {
1441921694900:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1441921695056:new <- new[,-1]
1441921695239:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441921695391:in_nuclei <- merge(in_nuclei, new)
1441921695518:}
1441921695693:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1441921696158:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1441921706892:if (!is.na(file_list_in_nuclei[1])) {
1441921707393:print("Green in nuclei data detected, adding...")
1441921707434:in_nuclei_data <- matrix(NA)
1441921707434:for (file in file_list_in_nuclei) {
1441921707540:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1441921707591:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1441921707591:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1441921707877:}
1441921708030:in_nuclei <- matrix(NA)
1441921708180:for( i in unique(in_nuclei_data$parameter)) {
1441921708340:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1441921708485:new <- new[,-1]
1441921708630:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1441921708900:in_nuclei <- merge(in_nuclei, new)
1441921709045:}
1441921709468:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1441921709669:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1441921711861:} else {
1441921711980:print("No green in nuclei data detected.")
1441921712132:}
1441921715206:View(res)
1441921718876:View(in_nuclei)
1441921775794:res <- merge(measure_lsm, count, all=T)
1441921776775:res <- merge(res, coloc, by="Label", all=T)
1441921777030:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441921777261:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441921777509:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441921777719:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441921777950:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441921778180:### LABELS: ROUND ONE
1441921778389:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921778606:# meta <- meta[, -(1:5)]
1441921778821:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441921779012:### LABELS: mitochondria:
1441921779220:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921779452:meta <- meta[, -(1:5)]
1441921779677:names(meta) <- c("date", "cell_line", "image", "file")
1441921781164:res <- merge(meta,res)
1441921782230:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441921783583:res$cell_line <- droplevels(res$cell_line)
1441921783933:### rearrange
1441921784188:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1441921788381:if (!is.na(file_list_in_nuclei[1])) {
1441921788565:res <- merge(res, in_nuclei)
1441921789108:}
1441921811599:### MERGE TABLES
1441921811599:res <- merge(measure_lsm, count, all=T)
1441921811601:res <- merge(res, coloc, by="Label", all=T)
1441921811602:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1441921811602:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1441921811603:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1441921811603:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1441921811604:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1441921811605:### LABELS: ROUND ONE
1441921811605:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921811605:# meta <- meta[, -(1:5)]
1441921811605:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1441921811605:### LABELS: mitochondria:
1441921811606:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1441921811620:meta <- meta[, -(1:5)]
1441921811620:names(meta) <- c("date", "cell_line", "image", "file")
1441921811621:res <- merge(meta,res)
1441921811623:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1441921811623:res$cell_line <- droplevels(res$cell_line)
1441921811624:### rearrange
1441921811624:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1441921814557:if (!is.na(file_list_in_nuclei[1])) {
1441921815628:res <- merge(res, in_nuclei, all.x=T)
1441921816099:}
1441921819161:res$file <- gsub("_", "/", res$file)
1441921821176:View(res)
1441921851384:View(in_nuclei_data)
1441921899168:system("mkdir output")
1441921901765:write.csv(res, "output/measurements.csv", row.names=F)
1441921902283:print(paste0("Saved to: ", pth, "/output/measurements.csv"))
1441922055554:View(read.csv("/mnt/DATAPART1/Sasi/output_round1_09_04/measurements.csv"))
1442242900254:pth <- "/mnt/DATAPART1/Sasi"
1442242902258:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1442242902885:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1442242903045:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1442242903221:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1442242904522:# measure RGB channels on converted .lsm images
1442242904661:measure_lsm_data <- matrix(NA)
1442242904867:for( file in file_list_measure_lsm) {
1442242905034:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1442242905477:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1442242905642:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1442242905818:}
1442242907363:measure_lsm_data <- measure_lsm_data[,-6]
1442242907521:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1442242907874:measure_lsm <- matrix(NA)
1442242908035:for( i in unique(measure_lsm_data$parameter)) {
1442242908195:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1442242908361:new <- new[,-1]
1442242908530:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442242908689:measure_lsm <- merge(measure_lsm, new)
1442242908850:}
1442242909035:measure_lsm <- measure_lsm[,-2]
1442242909194:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1442242909369:coloc_data <- matrix(NA)
1442242909546:for(file in file_list_coloc) {
1442242909739:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1442242909890:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1442242910073:coloc_data <- merge(coloc_data, new, all=T)
1442242910251:}
1442242910409:coloc_data <- coloc_data[,-6]
1442242910604:coloc_data$parameter <- as.character(coloc_data$parameter)
1442242910755:coloc <- matrix(NA)
1442242910914:for( i in unique(coloc_data$parameter)) {
1442242911129:new <- coloc_data[coloc_data$parameter == i,]
1442242911301:new <- new[,-1]
1442242911481:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442242911652:coloc <- merge(coloc, new)
1442242911825:}
1442242911964:coloc <- coloc[,c(1,5,8,11)]
1442242912152:names(coloc)[1] <- "Label"
1442242912654:#
1442242912683:count_data <- matrix(NA, 0, 13)
1442242912724:for ( file in file_list_count) {
1442242920176:coloc <- matrix(NA)
1442242920325:for( i in unique(coloc_data$parameter)) {
1442242920480:new <- coloc_data[coloc_data$parameter == i,]
1442242920640:new <- new[,-1]
1442242920792:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442242920960:coloc <- merge(coloc, new)
1442242921756:}
1442242934831:View(coloc)
1442242951991:coloc <- matrix(NA)
1442242952572:for( i in unique(coloc_data$parameter)) {
1442242952744:new <- coloc_data[coloc_data$parameter == i,]
1442242952907:new <- new[,-1]
1442242953055:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442242953315:coloc <- merge(coloc, new)
1442242953540:}
1442242963329:coloc_data <- matrix(NA)
1442242963598:for(file in file_list_coloc) {
1442242963715:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1442242965167:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1442242965420:coloc_data <- merge(coloc_data, new, all=T)
1442242965831:}
1442243021748:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1442243052176:if (!is.na(file_list_in_nuclei[1])) {
1442243052889:print("Green in nuclei data detected, adding...")
1442243053278:in_nuclei_data <- matrix(NA)
1442243053436:for (file in file_list_in_nuclei) {
1442243053581:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1442243053697:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1442243053873:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1442243054077:}
1442243054354:in_nuclei <- matrix(NA)
1442243054509:for( i in unique(in_nuclei_data$parameter)) {
1442243054625:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1442243054785:new <- new[,-1]
1442243054957:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442243055443:in_nuclei <- merge(in_nuclei, new)
1442243055613:}
1442243055782:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1442243055937:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1442243056093:} else {
1442243056253:print("No green in nuclei data detected.")
1442243056418:}
1442243068710:View(in_nuclei)
1442243201621:x <- read.csv(paste0(pth, "/output_mitochondria/measurements.csv"))
1442243266626:z <- merge(x, in_nuclei, all.x=T)
1442243269965:View(z)
1442243309036:z <- merge(in_nuclei, x, all.y=T)
1442243312504:View(z)
1442243325432:z <- merge(in_nuclei, x, all=T)
1442243330056:z <- merge(in_nuclei, x, all.y=T)
1442243335930:z <- merge(x, in_nuclei, all.x=T)
1442243380754:z <- z[,c(1,5:23,2,3,4)]
1442243418915:x <- read.csv(paste0(pth, "/output_lysosomes/measurements.csv"))
1442243436923:View(in_nuclei)
1442243445123:z <- merge(in_nuclei, x, all.y=T)
1442243509022:write.csv(z, measurements_noRED.csv)
1442243513074:write.csv(z, "measurements_noRED.csv")
1442243622857:browseVignettes(DESeq2)
1442243628535:browseVignettes("DESeq2")
1442243914658:ep <- e
1442243918221:ep[ep<5 | ep>500000] <- NA
1442243919480:#remove empty rows and cols
1442243919665:L1 <- apply(ep, 1, function(x) sum(is.na(x))!=dim(ep)[2])
1442243920022:L2 <- apply(ep, 2, function(x) sum(is.na(x))!=dim(ep)[1])
1442243920131:ep <- e[L1,L2]
1442243922556:View(ep)
1442243938101:sum(is.na(ep))
1442244067098:?plotPCA
1442244074462:prcomp
1442244083548:?prcomp
1442244092476:prcomp(ep)
1442244097991:x <- prcomp(ep)
1442244101456:plot(x)
1442244292129:x <- prcomp(ep, scale=T)
1442244293665:plot(x)
1442244312625:ggplot(x)
1442244318256:library(gglot)
1442244324913:library(ggplot2)
1442244330935:qplot(x)
1442244354576:??"plotPCA"
1442244378868:library(DESeq2, ggplot2)
1442244397035:plotPCA(ep)
1442244435458:x[1]
1442244439321:x[2]
1442244444896:summary(x)
1442244839895:plot(ep-colMean(ep))
1442245285412:plotPCA(ep)
1442245292264:plot(x)
1442245324017:print(x)
1442245419045:z <- hclust(dist(t(cor_ep)))
1442257467138:DESeqDataSetFromMatrix(ep, colD, ~colD)
1442257473931:library(DESeq2, ggplot2)
1442257482242:colD <- factor(names(ep))
1442257483694:DESeqDataSetFromMatrix(ep, colD, ~colD)
1442257518299:names(ep)
1442257537767:row.names(ep)
1442257543472:col.names(ep)
1442257560001:names(ep)
1442257574016:head(ep[1,])
1442257583959:head(ep[,])
1442257650998:View(ep)
1442257700799:colD <- factor(names(as.data.frame((ep)))
1442257718537:names(as.data.frame((ep))))
1442257726262:names(as.data.frame((ep)))
1442257730167:colD <- factor(names(as.data.frame((ep))))
1442257734622:DESeqDataSetFromMatrix(ep, DataFrame(colD), ~colD)
1442257856540:plot(colSums(ep)-colMeans(ep) )
1442257865569:plot(colSums(ep)
1442257870400:)
1442257919123:plot(sort(colSums(ep), cex=.3))
1442257923511:plot(sort(colSums(ep))
1442257926919:plot(sort(colSums(ep))
1442257928680:)
1442257938906:plot(sort(colSums(e)))
1442257953016:View(cor_ep)
1442258514156:?log2
1442258527831:?rlog
1442258966607:?countns
1442258969111:?counts
1442260048098:row.names(cor_ep)
1442260053176:names(cor_ep)
1442260058984:col.names(cor_ep)
1442260067576:colnames(cor_ep)
1442260116345:sum(colnames(cor_ep) != rownames(cor_ep)
1442260117611:)
1442260170907:colnames(cor_ep)[15000:16000]
1442262139977:generate.cor.parts <- function(expression_matrix, nthreads_f) {
1442262139977:setwd(paste0(pth, "/", out_dir))
1442262139978:# prepare names
1442262139978:# names <- colnames(expression_matrix)
1442262139978:ncolx <- ncol(expression_matrix)
1442262139979:# determine the largest chunk size (matrix / vector) for one thread
1442262139979:max.size = mem.free / nthreads_f
1442262139979:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442262139979:# extend the matrix so it is divided into even chunks
1442262139980:add <- ncolx %% nchunks
1442262139980:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442262139980:ncolx <- ncol(expression_matrix)
1442262139981:## split column numbers into groups
1442262139981:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1442262139982:## create all unique combinations of blocks
1442262139982:combs <- expand.grid(1:length(groups), 1:length(groups))
1442262139982:combs <- t(apply(combs, 1, sort))
1442262139982:combs <- unique(combs)
1442262139983:#
1442262139983:#   # calculate correlation for each combination
1442262139983:#   foreach(i = 1:nrow(combs)) %dopar% {
1442262139984:#     comb <- combs[i, ]
1442262139984:#     # print(comb)
1442262139984:#     G1 <- groups[[comb[1]]]
1442262139985:#     G2 <- groups[[comb[2]]]
1442262139985:#     cor.mat <- cor(expression_matrix[, G1], expression_matrix[, G2])
1442262139985:#     write.csv(cor.mat, file=paste0("cor_mat_", comb[1], "r", comb[2], "c", ".csv"))
1442262139986:#     rm(cor.mat)
1442262139986:#     print(paste(comb[1], comb[2], "chunk done")) #? out of
1442262139986:#     gc(verbose=F)
1442262139987:#   }
1442262139987:#   rm(expression_matrix)
1442262139988:# create horizontal chunks files
1442262139988:foreach(i = 1:nchunks) %dopar% {
1442262139988:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442262139989:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442262139989:chunk <- read.csv(file, row.names=NULL)
1442262139989:if(!exists(names)) {
1442262139990:names <- chunk[,1]
1442262139990:row.names(hor_chunk) <- names
1442262139991:}
1442262139991:chunk <- chunk[,-1]
1442262139991:hor_chunk <- cbind(hor_chunk, chunk)
1442262139992:}
1442262139993:#TODO
1442262139993:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1442262139994:chunk <- t(read.csv(file, row.names=1))
1442262139994:names <- row.names(chunk) #waste
1442262139994:hor_chunk <- cbind(hor_chunk, chunk)
1442262139995:}
1442262139996:#row.names(hor_chunk) <- names
1442262139996:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1442262139996:hor_chunk <- NULL
1442262139997:#filenames <- list.files(path = "~/")
1442262139998:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1442262139998:}
1442262139999:setwd(pth)
1442262140000:}
1442262196649:generate.cor.parts(e, 10)
1442262273095:library(doParallel)
1442262273814:pth <- getwd()
1442262299209:if(!dir.exists(out_dir)) {
1442262299377:dir.create(out_dir)
1442262299550:}
1442262308386:out_dir <- paste0(args, "_correlation_matrix")
1442262308831:if(!dir.exists(out_dir)) {
1442262350027:args <- as.character("expression.gene.tsv")
1442262353156:out_dir <- paste0(args, "_correlation_matrix")
1442262354777:if(!dir.exists(out_dir)) {
1442262354976:dir.create(out_dir)
1442262355154:}
1442262450161:if(!dir.exists(out_dir)) {
1442262450330:dir.create(out_dir)
1442262450579:}
1442262462302:generate.cor.parts(e, 10)
1442262474380:ex_mat <- t(read.table(paste0(pth, "/", args)))
1442262487058:nthreads <- 10 #also check if nthreads is a proper value, i.e. integer, ...
1442262487377:if(!exists("nthreads")) {
1442262487553:nthreads <- detectCores()
1442262487741:}
1442262488232:registerDoParallel(cores = nthreads)
1442262490278:mem.free <- as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1442262490717:# mem.est <- mem.avail / nthreads
1442262490964:generate.cor.parts(ex_mat, 10)
1442262501227:ex_mat <- ep
1442262502526:generate.cor.parts(ex_mat, 10)
1442262538055:setwd(paste0(pth, "/", out_dir))
1442262553402:expression_matrix <- ep
1442262567285:nthreads_f <- 10
1442262575032:setwd(paste0(pth, "/", out_dir))
1442262577336:ncolx <- ncol(expression_matrix)
1442262578936:max.size = mem.free / nthreads_f
1442262579717:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442262582308:add <- ncolx %% nchunks
1442262583013:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442262583560:ncolx <- ncol(expression_matrix)
1442262585754:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1442262655382:ex_mat <- ep
1442262664944:add <- ncolx %% nchunks
1442262672210:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442262699746:dim(expression_matrix)
1442262727602:ncolx / nchunks
1442262793533:ncolx <- ncol(expression_matrix)
1442262794354:max.size = mem.free / nthreads_f
1442262794578:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442262797252:nchunks
1442262804952:max.size
1442262849748:add <- ncolx %% nchunks
1442262860253:expression_matrix <- ep
1442262865781:expression_matrix <- rbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442262923328:ep <- t(ep)
1442262927783:ncolx <- ncol(expression_matrix)
1442262929309:max.size = mem.free / nthreads_f
1442262929585:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442262932440:add <- ncolx %% nchunks
1442262932755:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442262933007:ncolx <- ncol(expression_matrix)
1442262939732:dim(expression_matrix)
1442262954580:ncolx %% nchunks
1442262963232:ncolx <- ncol(expression_matrix)
1442262966077:ncolx %% nchunks
1442262979077:ncol(expression_matrix)
1442262988600:ncol(expression_matrix) / nchunk
1442262991102:ncol(expression_matrix) / nchunks
1442263067028:nchunks <- ncol(expression_matrix)
1442263068560:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1442263069656:combs <- expand.grid(1:length(groups), 1:length(groups))
1442263069922:combs <- t(apply(combs, 1, sort))
1442263070834:combs <- unique(combs)
1442263078480:foreach(i = 1:nchunks) %dopar% {
1442263078980:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442263079009:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442263079210:chunk <- read.csv(file, row.names=NULL)
1442263079211:if(!exists(names)) {
1442263079211:names <- chunk[,1]
1442263079212:row.names(hor_chunk) <- names
1442263079212:}
1442263079252:chunk <- chunk[,-1]
1442263079252:hor_chunk <- cbind(hor_chunk, chunk)
1442263079268:}
1442263080350:#TODO
1442263080350:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1442263081802:chunk <- t(read.csv(file, row.names=1))
1442263081987:names <- row.names(chunk) #waste
1442263082172:hor_chunk <- cbind(hor_chunk, chunk)
1442263082359:}
1442263082544:#row.names(hor_chunk) <- names
1442263082729:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1442263082761:hor_chunk <- NULL
1442263082931:#filenames <- list.files(path = "~/")
1442263083236:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1442263083559:}
1442263146467:########
1442263146467:nchunks <- ncol(expression_matrix)
1442263146468:## split column numbers into groups
1442263146468:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1442263146469:## create all unique combinations of blocks
1442263146469:combs <- expand.grid(1:length(groups), 1:length(groups))
1442263146470:combs <- t(apply(combs, 1, sort))
1442263147397:combs <- unique(combs)
1442263147452:# calculate correlation for each combination
1442263147453:foreach(i = 1:nrow(combs)) %dopar% {
1442263147453:comb <- combs[i, ]
1442263147453:# print(comb)
1442263147453:G1 <- groups[[comb[1]]]
1442263147453:G2 <- groups[[comb[2]]]
1442263147454:cor.mat <- cor(expression_matrix[, G1], expression_matrix[, G2])
1442263147454:write.csv(cor.mat, file=paste0("cor_mat_", comb[1], "r", comb[2], "c", ".csv"))
1442263147454:rm(cor.mat)
1442263147454:print(paste(comb[1], comb[2], "chunk done")) #? out of
1442263147455:gc(verbose=F)
1442263147455:}
1442264586852:expression_matrix <_ ep
1442264589327:expression_matrix <- ep
1442264595177:dim(ep_)
1442264597252:dim(ep)
1442264604903:add <- ncolx %% nchunks
1442264627214:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))#^2
1442264629378:add <- ncolx %% nchunks
1442264646576:ceiling(ncolx / floor(max.size / nrow(expression_matrix)))#^2
1442264653058:ncolx <- ncol(expression_matrix)
1442264654487:max.size = mem.free / nthreads_f
1442264655236:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))#^2
1442264669659:add <- ncolx %% nchunks
1442264671735:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442264675241:ncolx <- ncol(expression_matrix)
1442264678504:ncolx
1442264681905:ncolx /5
1442264727229:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442264747584:ncolx/nchunks
1442264754827:ncolx%%nchunks
1442264778908:expression_matrix <-ep
1442264784289:ncolx <- ncol(expression_matrix)
1442264785455:max.size = mem.free / nthreads_f
1442264786234:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442264787912:add <- ncolx %% nchunks
1442264973450:dim(ep)
1442264990227:View(ep)
1442265031327:cor(t(ep))
1442268310410:add <- ncolx %% nchunks
1442268320727:matrix(NA, nrow=nrow(expression_matrix), ncol=add)
1442268331124:(matrix(NA, nrow=nrow(expression_matrix), ncol=add))dim
1442268336069:dim(matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442268359308:ncolx%nchunks
1442268363429:ncolx % nchunks
1442268368637:ncolx %% nchunks
1442268384228:ncolx / nchunks
1442268391012:1031 * nchunks
1442268446028:dim(expression_matrix)
1442268492256:add <- (ncolx/nchunks) - ncolx %% nchunks
1442268503726:add <- floor(ncolx/nchunks) - ncolx %% nchunks
1442268511492:expression_matrix <_ep
1442268513484:expression_matrix <-ep
1442268517180:ncolx <- ncol(expression_matrix)
1442268517965:max.size = mem.free / nthreads_f
1442268518268:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442268521693:add <- floor(ncolx/nchunks) - ncolx %% nchunks
1442268523293:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442268524246:ncolx <- ncol(expression_matrix)
1442268525580:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1442268772597:expression_matrix <-ep
1442268805247:ncolx <- ncol(expression_matrix)
1442268807211:max.size = mem.free / nthreads_f
1442268807490:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442268879927:chunk_size <- ncolx / nchunks
1442268903653:add <- floor(ncolx/nchunks) - ncolx %% nchunks
1442268916304:ncolx %% nchunks
1442268926233:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442268939351:dim(expression_matrix)
1442268950012:dim(expression_matrix)[2]/nchunks
1442268997027:dim(expression_matrix)[2]%%nchunks
1442269097092:nchunks * floor(ncolx/nchunks)
1442269135365:dim(expression_matrix) - nchunks * floor(ncolx/nchunks)
1442269143157:dim(expression_matrix)[2] - nchunks * floor(ncolx/nchunks)
1442269413045:chunk_size <- floor(ncolx/nchunks)
1442269514227:expression_matrix <-ep
1442269517339:ncolx <- ncol(expression_matrix)
1442269517565:# determine the largest chunk size (matrix / vector) for one thread
1442269517808:max.size = mem.free / nthreads_f
1442269517979:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442269518144:chunk_size <- floor(ncolx/nchunks)
1442269518383:# extend the matrix so it is divided into even chunks
1442269518563:add <- floor(ncolx/nchunks) - ncolx %% nchunks
1442269518729:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442269518880:ncolx <- ncol(expression_matrix)
1442269519075:nchunks <- nchunks+1
1442269519238:## split column numbers into groups
1442269519782:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1442269523128:combs <- expand.grid(1:length(groups), 1:length(groups))
1442269523279:combs <- t(apply(combs, 1, sort))
1442269523457:combs <- unique(combs)
1442269535640:foreach(i = 1:nrow(combs)) %dopar% {
1442269535784:comb <- combs[i, ]
1442269535964:# print(comb)
1442269536139:G1 <- groups[[comb[1]]]
1442269536284:G2 <- groups[[comb[2]]]
1442269536433:cor.mat <- cor(expression_matrix[, G1], expression_matrix[, G2])
1442269536603:write.csv(cor.mat, file=paste0("cor_mat_", comb[1], "r", comb[2], "c", ".csv"))
1442269536759:rm(cor.mat)
1442269536932:print(paste(comb[1], comb[2], "chunk done")) #? out of
1442269537088:gc(verbose=F)
1442269537258:}
1442269671205:rm(expression_matrix)
1442269717533:# create horizontal chunks files
1442269717762:foreach(i = 1:nchunks) %dopar% {
1442269717915:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442269718082:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442269718252:chunk <- read.csv(file, row.names=NULL)
1442269718405:if(!exists(names)) {
1442269718560:names <- chunk[,1]
1442269718710:row.names(hor_chunk) <- names
1442269718861:}
1442269719010:chunk <- chunk[,-1]
1442269719337:hor_chunk <- cbind(hor_chunk, chunk)
1442269719537:}
1442269756836:#TODO
1442269757006:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1442269757180:chunk <- t(read.csv(file, row.names=1))
1442269757356:names <- row.names(chunk) #waste
1442269757514:hor_chunk <- cbind(hor_chunk, chunk)
1442269757733:}
1442269758884:#row.names(hor_chunk) <- names
1442269759867:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1442269760035:hor_chunk <- NULL
1442269760217:#filenames <- list.files(path = "~/")
1442269760411:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1442269761409:}
1442269962076:if(!exists(names)) {
1442269962256:names <- chunk[,1]
1442269963031:row.names(hor_chunk) <- names
1442269963764:}
1442269984630:?exists
1442269992054:exist(add)
1442269996851:exists(add)
1442270001277:exists("add")
1442270011014:foreach(i = 1:nchunks) %dopar% {
1442270011502:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442270011540:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442270011595:chunk <- read.csv(file, row.names=NULL)
1442270011755:if(!exists("names")) {
1442270011755:names <- chunk[,1]
1442270011756:row.names(hor_chunk) <- names
1442270011756:}
1442270011756:chunk <- chunk[,-1]
1442270011802:hor_chunk <- cbind(hor_chunk, chunk)
1442270011802:}
1442270011827:#TODO
1442270012152:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1442270012177:chunk <- t(read.csv(file, row.names=1))
1442270012448:names <- row.names(chunk) #waste
1442270012602:hor_chunk <- cbind(hor_chunk, chunk)
1442270012734:}
1442270013276:#row.names(hor_chunk) <- names
1442270013422:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1442270013572:hor_chunk <- NULL
1442270013707:#filenames <- list.files(path = "~/")
1442270013830:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1442270014163:}
1442331971567:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1442331973220:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1442331973497:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1442331974551:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1442332131290:measure_lsm_data <- matrix(NA)
1442332131475:for( file in file_list_measure_lsm) {
1442332131599:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1442332131745:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1442332131878:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1442332132342:}
1442332133825:measure_lsm_data <- measure_lsm_data[,-6]
1442332133825:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1442332133826:measure_lsm <- matrix(NA)
1442332133826:for( i in unique(measure_lsm_data$parameter)) {
1442332134404:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1442332134567:new <- new[,-1]
1442332134721:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442332134876:measure_lsm <- merge(measure_lsm, new)
1442332135191:}
1442332135675:measure_lsm <- measure_lsm[,-2]
1442332136007:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1442332136177:coloc_data <- matrix(NA)
1442332136361:for(file in file_list_coloc) {
1442332136503:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1442332136656:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1442332136800:coloc_data <- merge(coloc_data, new, all=T)
1442332136981:}
1442332138430:coloc_data <- coloc_data[,-6]
1442332138431:coloc_data$parameter <- as.character(coloc_data$parameter)
1442332138431:coloc <- matrix(NA)
1442332138431:for( i in unique(coloc_data$parameter)) {
1442332138431:new <- coloc_data[coloc_data$parameter == i,]
1442332138671:new <- new[,-1]
1442332138844:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442332138991:coloc <- merge(coloc, new)
1442332139166:}
1442332139403:coloc <- coloc[,c(1,5,8,11)]
1442332139606:names(coloc)[1] <- "Label"
1442332140038:#
1442332140284:count_data <- matrix(NA, 0, 13)
1442332140455:for ( file in file_list_count) {
1442332140607:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1442332140774:count_data <- rbind(count_data, new)
1442332140945:}
1442332141802:count <- count_data[count_data$Area > 99,]
1442332141803:count <- as.data.frame(xtabs(~Label, count))
1442332141809:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1442332143519:# green in nuclei
1442332143674:if (!is.na(file_list_in_nuclei[1])) {
1442332143830:print("Green in nuclei data detected, adding...")
1442332143997:in_nuclei_data <- matrix(NA)
1442332144178:for (file in file_list_in_nuclei) {
1442332144354:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1442332144520:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1442332144701:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1442332144857:}
1442332145019:in_nuclei <- matrix(NA)
1442332145184:for( i in unique(in_nuclei_data$parameter)) {
1442332145330:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1442332145506:new <- new[,-1]
1442332145677:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442332145836:in_nuclei <- merge(in_nuclei, new)
1442332145996:}
1442332146174:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1442332146373:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1442332146524:} else {
1442332146694:print("No green in nuclei data detected.")
1442332147167:}
1442332169612:### MERGE TABLES
1442332169820:res <- merge(measure_lsm, count, all=T)
1442332170536:res <- merge(res, coloc, by="Label", all=T)
1442332173065:View(res)
1442332178681:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1442332178875:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1442332179114:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1442332179323:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1442332179499:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1442332179709:### LABELS: ROUND ONE
1442332179945:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332180107:# meta <- meta[, -(1:5)]
1442332180284:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1442332180459:### LABELS: mitochondria:
1442332180616:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332180781:meta <- meta[, -(1:5)]
1442332180966:names(meta) <- c("date", "cell_line", "image", "file")
1442332181133:res <- merge(meta,res)
1442332181339:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1442332181543:res$cell_line <- droplevels(res$cell_line)
1442332182765:### rearrange
1442332184434:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1442332186694:View(res)
1442332206978:res <- merge(measure_lsm, count, all=T)
1442332207191:res <- merge(res, coloc, by="Label", all=T)
1442332207341:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1442332207533:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1442332207720:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1442332208188:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1442332208359:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1442332209860:### LABELS: ROUND ONE
1442332210015:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332210139:# meta <- meta[, -(1:5)]
1442332210294:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1442332210718:### LABELS: mitochondria:
1442332210888:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332211045:meta <- meta[, -(1:5)]
1442332211393:names(meta) <- c("date", "cell_line", "image", "file")
1442332213788:View(meta)
1442332222296:View(res)
1442332229363:View(meta)
1442332238646:res <- merge(meta,res)
1442332242592:res <- merge(measure_lsm, count, all=T)
1442332242789:res <- merge(res, coloc, by="Label", all=T)
1442332243105:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1442332243261:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1442332243459:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1442332243633:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1442332243778:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1442332243931:### LABELS: ROUND ONE
1442332244082:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332244251:# meta <- meta[, -(1:5)]
1442332244433:# for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1442332244713:### LABELS: mitochondria:
1442332244874:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332245055:meta <- meta[, -(1:5)]
1442332245254:names(meta) <- c("date", "cell_line", "image", "file")
1442332342802:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332343001:meta <- meta[, -(1:5)]
1442332343156:for ROUND ONE: names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1442332353043:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1442332357952:View(meta)
1442332369906:res <- merge(meta,res)
1442332374338:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1442332374905:res$cell_line <- droplevels(res$cell_line)
1442332375938:res <- res[,c(1,2,3,4,14,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20)]
1442332382387:res <- merge(measure_lsm, count, all=T)
1442332383055:res <- merge(res, coloc, by="Label", all=T)
1442332383214:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1442332383351:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1442332383537:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1442332383683:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1442332383868:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1442332384017:### LABELS: LYSO
1442332384179:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332384500:meta <- meta[, -(1:5)]
1442332384827:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1442332385066:# ### LABELS: mitochondria:
1442332385236:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442332385867:# meta <- meta[, -(1:5)]
1442332386083:# names(meta) <- c("date", "cell_line", "image", "file")
1442332386770:res <- merge(meta,res)
1442332389780:View(res)
1442332497513:res <- res[,c(1:5,15,6:14,16:21)]
1442332499595:View(res)
1442332586172:if (!is.na(file_list_in_nuclei[1])) {
1442332586459:res <- merge(res, in_nuclei, all.x=T)
1442332586657:}
1442332587185:res$file <- gsub("_", "/", res$file)
1442332592471:system("mkdir output")
1442332593440:write.csv(res, "output/measurements.csv", row.names=F)
1442332594236:print(paste0("Saved to: ", pth, "/output/measurements.csv"))
1442332636989:x<- xtabs(~cell_line, res)
1442332674555:z<- xtabs(~cell_line+treatment, res)
1442332696719:xtabs(~cell_line, res)
1442332775079:?aggregate
1442332852270:agg1 <- aggregate(data, by=list(data$cell_line, data$treatment, data$date), FUN=mean)
1442332871509:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean)
1442332891194:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean)
1442332896916:View(agg1)
1442332947011:View(agg2)
1442332971149:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442332983652:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442333082469:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442333082701:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442333085828:write.csv(agg1, "output/summary1.csv", row.names=F)
1442333086162:write.csv(agg2, "output/summary2.csv", row.names=F)
1442333096041:print(paste0("Saved to: ", pth, "/output"))
1442333231829:x <- read.csv("/output_lysosomes/summary1.csv")
1442333246437:x <- read.csv(paste0(pth, "/output_lysosomes/summary1.csv"))
1442333251522:View(x)
1442333257426:View(agg1)
1442333294451:agg1$green_area_fraction == x$green_area_fraction
1442333412059:agg1$green_area_fraction %in% x$green_area_fraction
1442333455751:x<-x[,-1]
1442333459053:View(x)
1442333508440:res <- merge(measure_lsm, count, all=T)
1442333508638:res <- merge(res, coloc, by="Label", all=T)
1442333508958:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1442333509129:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1442333509540:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1442333509741:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1442333509929:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1442333510086:### LABELS: LYSO
1442333510302:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442333510485:meta <- meta[, -(1:5)]
1442333510702:names(meta) <- c("date", "cell_line", "treatment", "image", "file")
1442333510884:# ### LABELS: mitochondria:
1442333511063:# meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442333511252:# meta <- meta[, -(1:5)]
1442333511430:# names(meta) <- c("date", "cell_line", "image", "file")
1442333511603:res <- merge(meta,res)
1442333517355:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1442333525604:res$cell_line <- droplevels(res$cell_line)
1442333533177:res$cell_line
1442333555509:res <- res[,c(1:5,15,6:14,16:21)]
1442333560446:if (!is.na(file_list_in_nuclei[1])) {
1442333560605:res <- merge(res, in_nuclei, all.x=T)
1442333560742:}
1442333560904:res$file <- gsub("_", "/", res$file)
1442333561052:### SUMMARY
1442333561205:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442333561629:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442333564777:View(agg1)
1442333624988:sum(agg1$green_area_fraction)
1442333628907:sum(x$green_area_fraction)
1442333653127:plot(agg1$green_area_fraction)
1442333659001:plot(x$green_area_fraction)
1442333667615:plot(sort(agg1$green_area_fraction))
1442333671877:plot(sort(x$green_area_fraction))
1442333686202:plot(sort(x$cell_count))
1442333692927:plot(sort(agg1$green_area_fraction))
1442333708702:plot(sort(agg1$cell_count))
1442333731502:plot(sort(agg1$cell_count-mean(agg1$cell_count)))
1442333997813:View(res)
1442335091687:url <- "http://uswest.ensembl.org/biomart/martview/ee4a66d436f2eab5ad275e454e656919?VIRTUALSCHEMANAME=default&ATTRIBUTES=hsapiens_gene_ensembl.default.feature_page.ensembl_gene_id|hsapiens_gene_ensembl.default.feature_page.ensembl_transcript_id|hsapiens_gene_ensembl.default.feature_page.name_1006|hsapiens_gene_ensembl.default.feature_page.definition_1006|hsapiens_gene_ensembl.default.feature_page.entrezgene|hsapiens_gene_ensembl.default.feature_page.ensembl_exon_id|hsapiens_gene_ensembl.default.feature_page.ensembl_peptide_id|hsapiens_gene_ensembl.default.feature_page.chromosome_name|hsapiens_gene_ensembl.default.feature_page.start_position|hsapiens_gene_ensembl.default.feature_page.end_position|hsapiens_gene_ensembl.default.feature_page.strand|hsapiens_gene_ensembl.default.feature_page.transcript_start|hsapiens_gene_ensembl.default.feature_page.transcript_end|hsapiens_gene_ensembl.default.feature_page.description|hsapiens_gene_ensembl.default.feature_page.refseq_mrna|hsapiens_gene_ensembl.default.feature_page.refseq_ncrna&FILTERS=&VISIBLEPANEL=resultspanel"
1442335092786:download.file(url, destfile="mart_export.txt")
1442335104633:mart <- read.csv("mart_export.txt", header=T)
1442335108382:View(mart)
1442335613691:url <- "http://uswest.ensembl.org%2C%20ip-10-190-145-105.us-west-1.compute.internal:8000/biomart/martview/07d5211cb6dcac6867893f1c96453c0e?VIRTUALSCHEMANAME=default&ATTRIBUTES=hsapiens_gene_ensembl.default.feature_page.ensembl_gene_id|hsapiens_gene_ensembl.default.feature_page.end_position|hsapiens_gene_ensembl.default.feature_page.strand|hsapiens_gene_ensembl.default.feature_page.transcript_start|hsapiens_gene_ensembl.default.feature_page.transcript_end|hsapiens_gene_ensembl.default.feature_page.description|hsapiens_gene_ensembl.default.feature_page.refseq_mrna|hsapiens_gene_ensembl.default.feature_page.refseq_ncrna|hsapiens_gene_ensembl.default.feature_page.ensembl_transcript_id|hsapiens_gene_ensembl.default.feature_page.name_1006|hsapiens_gene_ensembl.default.feature_page.definition_1006|hsapiens_gene_ensembl.default.feature_page.entrezgene|hsapiens_gene_ensembl.default.feature_page.ensembl_exon_id|hsapiens_gene_ensembl.default.feature_page.ensembl_peptide_id|hsapiens_gene_ensembl.default.feature_page.chromosome_name|hsapiens_gene_ensembl.default.feature_page.start_position&FILTERS=&VISIBLEPANEL=resultspanel"
1442335615376:download.file(url, destfile="mart_export.txt")
1442335623841:url <- "http://uswest.ensembl.org/biomart/martview/ee4a66d436f2eab5ad275e454e656919?VIRTUALSCHEMANAME=default&ATTRIBUTES=hsapiens_gene_ensembl.default.feature_page.ensembl_gene_id|hsapiens_gene_ensembl.default.feature_page.ensembl_transcript_id|hsapiens_gene_ensembl.default.feature_page.name_1006|hsapiens_gene_ensembl.default.feature_page.definition_1006|hsapiens_gene_ensembl.default.feature_page.entrezgene|hsapiens_gene_ensembl.default.feature_page.ensembl_exon_id|hsapiens_gene_ensembl.default.feature_page.ensembl_peptide_id|hsapiens_gene_ensembl.default.feature_page.chromosome_name|hsapiens_gene_ensembl.default.feature_page.start_position|hsapiens_gene_ensembl.default.feature_page.end_position|hsapiens_gene_ensembl.default.feature_page.strand|hsapiens_gene_ensembl.default.feature_page.transcript_start|hsapiens_gene_ensembl.default.feature_page.transcript_end|hsapiens_gene_ensembl.default.feature_page.description|hsapiens_gene_ensembl.default.feature_page.refseq_mrna|hsapiens_gene_ensembl.default.feature_page.refseq_ncrna&FILTERS=&VISIBLEPANEL=resultspanel"
1442335624736:download.file(url, destfile="mart_export.txt")
1442335635628:View(mart)
1442335678911:url <- "http://uswest.ensembl.org%2C%20ip-10-250-16-121.us-west-1.compute.internal:8000/biomart/martview/07d5211cb6dcac6867893f1c96453c0e?VIRTUALSCHEMANAME=default&ATTRIBUTES=hsapiens_gene_ensembl.default.feature_page.ensembl_gene_id|hsapiens_gene_ensembl.default.feature_page.end_position|hsapiens_gene_ensembl.default.feature_page.strand|hsapiens_gene_ensembl.default.feature_page.transcript_start|hsapiens_gene_ensembl.default.feature_page.transcript_end|hsapiens_gene_ensembl.default.feature_page.description|hsapiens_gene_ensembl.default.feature_page.refseq_mrna|hsapiens_gene_ensembl.default.feature_page.refseq_ncrna|hsapiens_gene_ensembl.default.feature_page.ensembl_transcript_id|hsapiens_gene_ensembl.default.feature_page.name_1006|hsapiens_gene_ensembl.default.feature_page.definition_1006|hsapiens_gene_ensembl.default.feature_page.entrezgene|hsapiens_gene_ensembl.default.feature_page.ensembl_exon_id|hsapiens_gene_ensembl.default.feature_page.ensembl_peptide_id|hsapiens_gene_ensembl.default.feature_page.chromosome_name|hsapiens_gene_ensembl.default.feature_page.start_position&FILTERS=&VISIBLEPANEL=resultspanel"
1442335683408:download.file(url, destfile="mart_export.txt")
1442335720378:url <- "http://uswest.ensembl.org/biomart/martview/84f9845134a1900008696176bc757a2d"
1442335722702:download.file(url, destfile="mart_export.txt")
1442335728877:View(mart)
1442335834102:ex_mat <- cor_mat
1442335838778:rm(cor_mat)
1442335857353:L2
1442335941278:compare(colSums(e), colSums(ep))
1442335947892:compare <- function(x,y) {
1442335947892:px <- plot(x)
1442335947892:py <- plot(y)
1442335947893:X11()
1442335947893:par(mfrow=c(1,2))
1442335947893:px
1442335947893:py
1442335947894:}
1442335950027:compare(colSums(e), colSums(ep))
1442335970110:X11()
1442337613115:compare <- function(x,y) {
1442337613262:X11()
1442337613418:par(mfrow=c(1,2))
1442337613588:plot(x)
1442337613737:plot(y)
1442337613891:px
1442337631038:graphics.off()
1442337635165:compare <- function(x,y) {
1442337635512:X11()
1442337635755:par(mfrow=c(1,2))
1442337636412:plot(x)
1442337636562:plot(y)
1442337637407:}
1442337648926:compare(colSums(e), colSums(ep))
1442337772627:compare <- function(x=c()) {
1442337772789:n <- length(x)
1442337772987:X11()
1442337773170:par(mfrow=c(1,n))
1442337773349:for(i in 1:x) {
1442337773523:plot(x[i])
1442337773677:}
1442337774091:}
1442338792209:1024*1024\
1442338795152:1024*1024
1442339135431:134.95^2
1442339198720:area_p <- 1024^2
1442339198885:area_um <- 18211.8110
1442339398154:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1442339398351:res$yellow_area_um <- res$yellow_area_fraction*area_um
1442339398669:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1442339398909:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um
1442339399173:res$yellow_area_pixels_per_cell <- res$yellow_area_fraction*area_p/res$cell_count
1442339399411:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res/res$cell_count
1442339407021:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res$cell_count
1442339409362:View(res)
1442339431802:### SUMMARY
1442339431965:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442339432165:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442339432280:### SAVE AWAY
1442339432434:system("mkdir output")
1442339432574:write.csv(res, "output/measurements.csv", row.names=F)
1442339450888:write.csv(res, "output/measurements.csv", row.names=F)
1442339452058:write.csv(agg1, "output/summary1.csv", row.names=F)
1442339452341:write.csv(agg2, "output/summary2.csv", row.names=F)
1442340047438:foreach(i = 1:nchunks) %dopar% {
1442340048009:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442340048279:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340048656:chunk <- read.csv(file, row.names=NULL)
1442340049334:if(!exists("names")) {
1442340049471:names <- chunk[,1]
1442340049664:row.names(hor_chunk) <- names
1442340049854:}
1442340050038:chunk <- chunk[,-1]
1442340050222:hor_chunk <- cbind(hor_chunk, chunk)
1442340050550:}
1442340052686:#TODO
1442340052830:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1442340052948:chunk <- t(read.csv(file, row.names=1))
1442340053134:hor_chunk <- cbind(hor_chunk, chunk)
1442340053300:}
1442340055244:#row.names(hor_chunk) <- names
1442340055421:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1442340055733:hor_chunk <- NULL
1442340055900:#filenames <- list.files(path = "~/")
1442340056365:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1442340056777:}
1442340062942:library(doParallel)
1442340092491:args <- as.character("expression.gene.tsv")
1442340093570:pth <- getwd()
1442340094766:args <- as.character(commandArgs(trailingOnly=T))
1442340095052:out_dir <- paste0(args, "_correlation_matrix")
1442340113476:nthreads <- 10 #also check if nthreads is a proper value, i.e. integer, ...
1442340113619:if(!exists("nthreads")) {
1442340113909:nthreads <- detectCores()
1442340114187:}
1442340115044:registerDoParallel(cores = nthreads)
1442340116986:mem.free <- as.numeric(system("awk '/MemFree/ {print $2}' /proc/meminfo", intern=T)) # or use memFree?
1442340122527:setwd(paste0(pth, "/", out_dir))
1442340123629:ncolx <- ncol(expression_matrix)
1442340139985:expression_matrix <- ep
1442340142878:ncolx <- ncol(expression_matrix)
1442340147573:setwd(paste0(pth, "/", out_dir))
1442340159071:paste0(pth, "/", out_dir)
1442340171705:out_dir <- paste0(args, "_correlation_matrix")
1442340172191:if(!dir.exists(out_dir)) {
1442340172352:dir.create(out_dir)
1442340172486:}
1442340176938:setwd(paste0(pth, "/", out_dir))
1442340179861:max.size = mem.free / nthreads_f
1442340180007:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442340192682:nthreads.f <-10
1442340200366:max.size = mem.free / nthreads_f
1442340200773:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442340211357:nthreads_f <-10
1442340213452:max.size = mem.free / nthreads_f
1442340213729:nchunks <- ceiling(ncolx / floor(max.size / nrow(expression_matrix)))^2
1442340220137:rm(nthreads.f)
1442340224216:add <- floor(ncolx/nchunks) - ncolx %% nchunks
1442340224381:expression_matrix <- cbind(expression_matrix, matrix(NA, nrow=nrow(expression_matrix), ncol=add))
1442340224753:ncolx <- ncol(expression_matrix)
1442340224916:nchunks <- nchunks+1
1442340225488:## split column numbers into groups
1442340226836:groups <- split(1:ncolx, rep(1:nchunks, each = ncolx/nchunks))
1442340227040:## create all unique combinations of blocks
1442340227204:combs <- expand.grid(1:length(groups), 1:length(groups))
1442340227356:combs <- t(apply(combs, 1, sort))
1442340227518:combs <- unique(combs)
1442340244314:foreach(i = 1:nchunks) %dopar% {
1442340244315:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442340244315:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340244315:chunk <- read.csv(file, row.names=NULL)
1442340244315:if(!exists("names")) {
1442340244316:names <- chunk[,1]
1442340244316:row.names(hor_chunk) <- names
1442340244316:}
1442340244316:chunk <- chunk[,-1]
1442340244317:hor_chunk <- cbind(hor_chunk, chunk)
1442340244317:}
1442340244317:#TODO
1442340244318:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1442340244318:chunk <- t(read.csv(file, row.names=1))
1442340244318:hor_chunk <- cbind(hor_chunk, chunk)
1442340244319:}
1442340244319:#row.names(hor_chunk) <- names
1442340244319:write.csv(hor_chunk, file=paste0("cor_mat_", i, "hor.csv"))
1442340244320:hor_chunk <- NULL
1442340244320:#filenames <- list.files(path = "~/")
1442340244320:#do.call("rbind", lapply(filenames, read.csv, header = TRUE))
1442340244321:}
1442340319528:names <- NULL
1442340345089:names <- NULL
1442340362744:if(is.na("names")) {
1442340364784:names <- chunk[,1]
1442340364982:row.names(hor_chunk) <- names
1442340365296:}
1442340370953:names <- NA
1442340373031:if(is.na("names")) {
1442340373220:names <- chunk[,1]
1442340373568:row.names(hor_chunk) <- names
1442340373880:}
1442340393611:if(is.na("names")) {
1442340400713:is.na(names)
1442340424553:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340429881:chunk <- read.csv(file, row.names=NULL)
1442340430074:if(is.na("names")) {
1442340430232:names <- chunk[,1]
1442340430371:row.names(hor_chunk) <- names
1442340430537:}
1442340430681:chunk <- chunk[,-1]
1442340430864:hor_chunk <- cbind(hor_chunk, chunk)
1442340431080:}
1442340435105:foreach(i = 1:nchunks) %dopar% {
1442340435287:names <- NA
1442340435455:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442340435608:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340435758:chunk <- read.csv(file, row.names=NULL)
1442340435910:if(is.na("names")) {
1442340436078:names <- chunk[,1]
1442340436239:row.names(hor_chunk) <- names
1442340436392:}
1442340436560:chunk <- chunk[,-1]
1442340436887:hor_chunk <- cbind(hor_chunk, chunk)
1442340437119:}
1442340440511:}
1442340477477:i=3
1442340483625:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340483801:chunk <- read.csv(file, row.names=NULL)
1442340483968:if(is.na("names")) {
1442340484135:names <- chunk[,1]
1442340484287:row.names(hor_chunk) <- names
1442340484450:}
1442340484585:chunk <- chunk[,-1]
1442340484736:hor_chunk <- cbind(hor_chunk, chunk)
1442340485000:}
1442340542445:names <- NA
1442340542748:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442340543284:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340543450:chunk <- read.csv(file, row.names=NULL)
1442340543593:if(is.na("names")) {
1442340543746:names <- chunk[,1]
1442340543915:row.names(hor_chunk) <- names
1442340544073:}
1442340544226:chunk <- chunk[,-1]
1442340544434:hor_chunk <- cbind(hor_chunk, chunk)
1442340544656:}
1442340561512:setwd(paste0(pth, "/", out_dir))
1442340575713:out_dir <- paste0(args, "_correlation_matrix")
1442340578531:if(!dir.exists(out_dir)) {
1442340578713:dir.create(out_dir)
1442340578873:}
1442340591864:args <- as.character("expression.gene.tsv")
1442340592920:out_dir <- paste0(args, "_correlation_matrix")
1442340595153:if(!dir.exists(out_dir)) {
1442340595264:dir.create(out_dir)
1442340595408:}
1442340599243:setwd(paste0(pth, "/", out_dir))
1442340605129:foreach(i = 1:nchunks) %dopar% {
1442340605328:names <- NA
1442340605481:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442340605776:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340605932:chunk <- read.csv(file, row.names=NULL)
1442340606073:if(is.na("names")) {
1442340606218:names <- chunk[,1]
1442340606360:row.names(hor_chunk) <- names
1442340606497:}
1442340606624:chunk <- chunk[,-1]
1442340606825:hor_chunk <- cbind(hor_chunk, chunk)
1442340607192:}
1442340613170:names <- NA
1442340613329:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442340613459:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340613624:chunk <- read.csv(file, row.names=NULL)
1442340613784:if(is.na("names")) {
1442340613920:names <- chunk[,1]
1442340614056:row.names(hor_chunk) <- names
1442340614192:}
1442340614321:chunk <- chunk[,-1]
1442340614456:hor_chunk <- cbind(hor_chunk, chunk)
1442340614705:}
1442340635648:names <- NA
1442340635784:hor_chunk <- matrix(NA, nrow=ncolx/nchunks, ncol=0)
1442340635920:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340636057:chunk <- read.csv(file, row.names=NULL)
1442340636202:print(head(chunk))
1442340636344:if(is.na("names")) {
1442340636472:names <- chunk[,1]
1442340636624:row.names(hor_chunk) <- names
1442340636776:}
1442340636929:chunk <- chunk[,-1]
1442340637105:hor_chunk <- cbind(hor_chunk, chunk)
1442340637353:}
1442340708131:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340708131:chunk <- read.csv(file, row.names=NULL)
1442340708132:print(file)
1442340708132:#print(head(chunk))
1442340708132:if(is.na("names")) {
1442340708132:names <- chunk[,1]
1442340708132:row.names(hor_chunk) <- names
1442340708133:}
1442340708133:chunk <- chunk[,-1]
1442340708133:hor_chunk <- cbind(hor_chunk, chunk)
1442340708133:}
1442340748358:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340748618:chunk <- read.csv(file, row.names=NULL)
1442340748770:print(file)
1442340748897:#print(head(chunk))
1442340749035:#       if(is.na("names")) {
1442340749226:#         names <- chunk[,1]
1442340749378:#         row.names(hor_chunk) <- names
1442340749505:#       }
1442340749633:chunk <- chunk[,-1]
1442340750089:hor_chunk <- cbind(hor_chunk, chunk)
1442340750242:}
1442340786201:View(chunk)
1442340797962:ncolx/nchunks
1442340822921:hor_chunk <- matrix(NA)
1442340823112:for(file in list.files(pattern=paste0("_", i, "r"))) {
1442340823265:chunk <- read.csv(file, row.names=NULL)
1442340823417:print(file)
1442340823585:#print(head(chunk))
1442340823745:if(is.na("names")) {
1442340823898:names <- chunk[,1]
1442340824033:row.names(hor_chunk) <- names
1442340824193:}
1442340824344:chunk <- chunk[,-1]
1442340824504:hor_chunk <- cbind(hor_chunk, chunk)
1442340824784:}
1442340906966:View(hor_chunk)
1442340948624:ncolx <- ncol(expression_matrix)
1442341064517:dim(cor_ep)
1442341280354:for(file in list.files(pattern=paste0("r", i, "c"))[-i]) { # nieeleganckie
1442341282652:chunk <- t(read.csv(file, row.names=1))
1442341282834:hor_chunk <- cbind(hor_chunk, chunk)
1442341283210:}
1442341513669:hor_chunk <- hor_chunk[,-1]
1442341810373:View(e)
1442341850288:View(ep)
1442341861155:View(expression_matrix)
1442341904330:e <- as.matrix(read.table("/mnt/DATAPART1/rnaseq/expression.gene.tsv"))
1442341910052:dim(e)
1442341960568:View(e)
1442342002797:e <- as.matrix(read.table("/mnt/DATAPART1/rnaseq/expression.gene.v2.tsv"))
1442342011685:View(e)
1442342021560:dim(e)
1442346093526:hist(colSums(ep))
1442346118301:hist(colSums(ep)-mean(colSums(ep)))
1442346130906:hist(colSums(ep))
1442346535086:cor(ep[1,])
1442346547852:cor(as.matrix(ep[1,]))
1442346552307:cor(as.matrix(ep[,1]))
1442346561483:cor(as.matrix(ep[,1]), ep)
1442346570859:cor(ep[,1], ep)
1442346584357:cor(ep, ep[,1])
1442346612601:cor(ep, ep[1,])
1442346626701:cor(ep, t(ep[1,]))
1442346634225:cor(t(ep), ep[1,])
1442346791625:ep[,1]
1442346795801:ep[1,]
1442346812151:View(e)
1442349020626:X <- e
1442349037401:apply(X,1,var)
1442349050037:sum(apply(X,1,var)==0)
1442349060325:sum(apply(X,1,var)>1)
1442349073379:sum(apply(X,1,var)<1)
1442349103376:sum(apply(X,2,var)==0)
1442349209412:cor(ep[,1], ep)
1442349218307:cor(ep[1,], ep)
1442349226626:cor(ep[1,], t(ep)
1442349228426:)
1442349284751:dim(ep)
1442349298001:cor(t(ep))
1442349411832:dim(cor(ep))
1442349420211:dim(ep)
1442349473635:ep <- t(ep)
1442349531517:ep <- t(ep)
1442349918998:correlation.selected <- function(X=e, tx_input_indices=c(1,2,3)) {
1442349927087:correlation.selected <- function(X=e, tx_input_indices=c(1,2,3)) {
1442349927309:out <- matrix(NA)
1442349927559:for( tx in tx_input_indices ) { #better done with a for loop - parallelisation or mclapply
1442349927560:new <- cor(X, X[tx,])
1442349927952:out <- cbind(out, new)
1442349927953:}
1442349927975:out
1442349928334:}
1442349939609:correlation.selected <- function(X=e, tx_input_indices=c(1,2,3)) {
1442349939829:out <- matrix(NA)
1442349940051:for( tx in tx_input_indices ) { #better done with a for loop - parallelisation or mclapply
1442349940274:new <- cor(X, X[tx,])
1442349940275:out <- cbind(out, new)
1442349940652:}
1442349941188:out
1442349941476:}
1442349948225:out
1442349953606:out <- matrix(NA)
1442349959154:tx_input_indices=c(1,2,3)
1442349961426:X=e
1442349963386:out <- matrix(NA)
1442349964003:for( tx in tx_input_indices ) { #better done with a for loop - parallelisation or mclapply
1442349964401:new <- cor(X, X[tx,])
1442349964622:out <- cbind(out, new)
1442349964844:}
1442350057626:which(names(ep) == "DRR001344")
1442350065106:names(ep)
1442350075929:head(ep)
1442350092776:col.names(ep)
1442350096350:colnames(ep)
1442350102829:which(colnames(ep) == "DRR001344")
1442350111858:which(colnames(ep) == "DRR001622")
1442350117775:which(colnames(ep) == "DRR001626")
1442350138126:which(colnames(ep) == c("DRR001626", "DRR001641)
1442350141434:which(colnames(ep) == c("DRR001626", "DRR001641")
1442350145950:which(colnames(ep) == c("DRR001626", "DRR001641"))
1442350279102:?stopif
1442350282376:?stopifnot
1442350325632:correlation.selected <- function(X=e, tx_input_list=c("1","2","3")) {
1442350327735:out <- matrix(NA)
1442350328037:for( tx in tx_input_list ) { #better done with a for loop - parallelisation or mclapply
1442350328241:i <- which(colnames(X)==tx)
1442350328452:stopifnot(i<0)
1442350328478:new <- cor(X, X[i,])
1442350328673:out <- cbind(out, new)
1442350329043:}
1442350329044:out
1442350329044:}
1442350351851:z <- correlation.selected()
1442350380830:out <- matrix(NA)
1442350390775:tx_input_list=c("1","2","3")
1442350777900:cor(ep[,1], ep)
1442350783859:z
1442350804326:cor(ep[1,], t(ep))
1442350817906:z <- cor(ep[2,], t(ep))
1442350819083:z
1442350826757:ep[2,]
1442350855575:ep[1,]
1442350869025:dim(ep)
1442350898551:ep <- t(ep)
1442350906708:z <- cor(ep[2,], t(ep))
1442350907732:z
1442350957276:z <- cor(ep[2,], t(ep))
1442350958550:z
1442350969557:z <- cor(ep[2,], ep)
1442350982201:dim(ep)
1442350996501:dim(ep[2,])
1442351002351:length(ep[2,])
1442351093955:z <- cor(ep, ep[2,])
1442351101375:z <- cor(t(ep), ep[2,])
1442351102925:z
1442351113526:z <- cor(ep, ep[,2])
1442351114833:z
1442351127951:langth(z)
1442351131282:length(z)
1442351178476:rownames(z)
1442351187252:class(rownames(z))
1442351353369:correlation.selected <- function(X=e, tx_input_list=c("1","2","9","12","13")) {
1442351353758:out <- matrix(NA)
1442351353953:for( tx in tx_input_list ) { #better done with a for loop - parallelisation or mclapply
1442351354136:i <- which(colnames(X)==tx)
1442351354303:stopifnot(i<0)
1442351354481:new <- cor(X, X[,i])
1442351354624:out <- cbind(out, new)
1442351354800:}
1442351355025:out
1442351355232:}
1442351361130:out
1442351371637:correlation.selected()
1442351425286:correlation.selected <- function(X=e, tx_input_list=c("1","2","9","12","13")) {
1442351425786:out <- matrix(NA)
1442351425889:for( tx in tx_input_list ) { #better done with a for loop - parallelisation or mclapply
1442351425916:i <- which(colnames(X)==tx)
1442351425917:stopifnot(i<0)
1442351426228:new <- cor(X, X[,i])
1442351426382:out <- rbind(out, new)
1442351426524:}
1442351426669:out
1442351426800:}
1442351433800:correlation.selected()
1442351512734:i <- which(colnames(X)==tx)
1442351529460:X <-ep
1442351537918:out <- matrix(NA)
1442351538679:for( tx in tx_input_list ) { #better done with a for loop - parallelisation or mclapply
1442351538902:i <- which(colnames(X)==tx)
1442351545554:i <- which(colnames(X)==tx)
1442351555127:i <- which(colnames(X)==tx)
1442351561335:new <- cor(X, X[,i])
1442351569376:View(new)
1442351576954:dim(new)
1442351612800:i=9
1442351616382:new <- cor(X, X[,i])
1442351620451:dim(new)
1442351751514:colnames(new) <- tx
1442351791434:rownames(X)
1442351795776:colnames(X)
1442351832890:out <- matrix(NA)
1442351833088:rownames(out) <- colnames(X)
1442351896481:out <- matrix(NA, nrow=length(colnames(X)))
1442351898439:rownames(out) <- colnames(X)
1442351905726:View(out)
1442351934401:dim(e)
1442351939126:colnames(e)
1442351942975:rownames(e)
1442351952976:home(rownames(e))
1442351958251:head(rownames(e))
1442352254891:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352255389:tx_input_list <- as.character(tx_input_list)
1442352255529:out <- matrix(NA, nrow=length(colnames(X)))
1442352255553:rownames(out) <- colnames(X)
1442352255817:for( tx in tx_input_list ) { #better done with a for loop - parallelisation or mclapply
1442352255817:i <- which(colnames(X)==tx)
1442352256064:stopifnot(i<0)
1442352256223:new <- cor(X, X[,i])
1442352256381:colnames(new) <- tx
1442352256536:out <- cbind(out, new)
1442352256691:}
1442352256877:out
1442352257630:}
1442352265501:correlation.selected()
1442352293401:class(colnaems(X))
1442352297357:class(colnames(X))
1442352307976:which(colnames(X)==tx)
1442352323086:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352323585:tx_input_list <- as.character(tx_input_list)
1442352323725:out <- matrix(NA, nrow=length(colnames(X)))
1442352323763:rownames(out) <- colnames(X)
1442352323764:for( tx in tx_input_list ) { #better done with a for loop - parallelisation or mclapply
1442352323764:i <- which(colnames(X)==tx)
1442352323765:stopifnot(i>0)
1442352324312:new <- cor(X, X[,i])
1442352324313:colnames(new) <- tx
1442352324313:out <- cbind(out, new)
1442352324660:}
1442352324854:out
1442352325732:}
1442352330951:correlation.selected()
1442352336427:z <-correlation.selected()
1442352341082:View(z)
1442352411130:library(DESeq2, ggplot2, parallel)
1442352417956:library(DESeq2, ggplot2, doParallel)
1442352454677:library(doParallel)
1442352477776:library(c(DESeq2, ggplot2, doParallel))
1442352495839:?library()
1442352524955:library(DESeq2, ggplot2)
1442352544928:library(ggplot2)
1442352545905:library(doParallel)
1442352584197:foreach( tx = tx_input_list ) %dopar% { #better done with a for loop - parallelisation or mclapply
1442352593104:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352593105:tx_input_list <- as.character(tx_input_list)
1442352593105:out <- matrix(NA, nrow=length(colnames(X)))
1442352593105:rownames(out) <- colnames(X)
1442352593106:foreach( tx = tx_input_list ) %dopar% { #better done with a for loop - parallelisation or mclapply
1442352593106:i <- which(colnames(X)==tx)
1442352593106:stopifnot(i>0)
1442352593106:new <- cor(X, X[,i])
1442352593107:colnames(new) <- tx
1442352593107:out <- cbind(out, new)
1442352593107:}
1442352593107:out
1442352593108:}
1442352609106:correlation.selected()
1442352616451:z <- correlation.selected()
1442352619252:View(z)
1442352651070:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352651084:tx_input_list <- as.character(tx_input_list)
1442352651156:out <- matrix(NA, nrow=length(colnames(X)))
1442352651156:rownames(out) <- colnames(X)
1442352651228:foreach( tx = tx_input_list ) %dopar% { #better done with a for loop - parallelisation or mclapply
1442352651272:print(tx)
1442352651272:i <- which(colnames(X)==tx)
1442352651389:stopifnot(i>0)
1442352651389:new <- cor(X, X[,i])
1442352651436:colnames(new) <- tx
1442352651436:out <- cbind(out, new)
1442352651437:}
1442352651437:out
1442352651483:}
1442352651701:### process further?
1442352656634:correlation.selected()
1442352662550:z <0correlation.selected()
1442352666506:z < -correlation.selected()
1442352670801:z <- correlation.selected()
1442352747081:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352747579:tx_input_list <- as.character(tx_input_list)
1442352747646:out <- matrix(NA, nrow=length(colnames(X)))
1442352747673:rownames(out) <- colnames(X)
1442352747733:foreach(tx = tx_input_list) %dopar% { #better done with a for loop - parallelisation or mclapply
1442352747768:print(tx)
1442352747874:i <- which(colnames(X)==tx)
1442352747981:stopifnot(i>0)
1442352748133:new <- cor(X, X[,i])
1442352748304:colnames(new) <- tx
1442352748428:out <- cbind(out, new)
1442352748583:}
1442352748734:out
1442352749028:}
1442352758976:z <- correlation.selected()
1442352790734:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352790908:tx_input_list <- as.character(tx_input_list)
1442352791084:out <- matrix(NA, nrow=length(colnames(X)))
1442352792532:rownames(out) <- colnames(X)
1442352793117:foreach(tx = tx_input_list) %dopar% { #better done with a for loop - parallelisation or mclapply
1442352793356:print(tx)
1442352795445:}
1442352796967:out
1442352797112:}
1442352802731:correlation.selected()
1442352863925:foreach(i in tx_input_list) { print(i) }
1442352873001:foreach(i = tx_input_list) { print(i) }
1442352879778:foreach(i = tx_input_list) %dopar% { print(i) }
1442352912734:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352912992:tx_input_list <- as.character(tx_input_list)
1442352913365:out <- matrix(NA, nrow=length(colnames(X)))
1442352914181:rownames(out) <- colnames(X)
1442352915238:foreach(tx = tx_input_list) %dopar% { #better done with a for loop - parallelisation or mclapply
1442352915754:print(tx)
1442352917659:}
1442352918636:}
1442352922956:correlation.selected()
1442352944335:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442352944593:tx_input_list <- as.character(tx_input_list)
1442352944754:out <- matrix(NA, nrow=length(colnames(X)))
1442352948890:rownames(out) <- colnames(X)
1442352949347:foreach(tx = tx_input_list) %dopar% { #better done with a for loop - parallelisation or mclapply
1442352949884:print(class(tx))
1442352951722:}
1442352952401:}
1442352956375:correlation.selected()
1442352986052:i <- which(colnames(X)==tx)
1442352992976:which(colnames(X)==tx)
1442353002839:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442353003338:tx_input_list <- as.character(tx_input_list)
1442353003405:out <- matrix(NA, nrow=length(colnames(X)))
1442353003435:rownames(out) <- colnames(X)
1442353003494:foreach(tx = tx_input_list) %dopar% { #better done with a for loop - parallelisation or mclapply
1442353003534:i <- which(colnames(X)==tx)
1442353003535:stopifnot(i>0)
1442353003633:new <- cor(X, X[,i])
1442353003633:colnames(new) <- tx
1442353003661:out <- cbind(out, new)
1442353003817:}
1442353003984:out
1442353004237:}
1442353010351:z <- correlation.selected()
1442353050882:?mclapply
1442353197522:Xi <- X[,(rownames(X) %in% tx_input_list)]
1442353208354:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442353213058:View(Xi)
1442353226399:tx_input_list=c("1","2","9","12","13")
1442353229426:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442353412337:out <- mclapply(Xi, function(tx, matrix=X) { cor(tx, matrix) } )
1442353459993:out <- mclapply(Xi, function(tx, matrix=X) { cor(tx, matrix) }, mc.cores=nthreads )
1442353487787:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442353506636:out <- mclapply(t(Xi), function(tx, matrix=X) { cor(tx, matrix) }, mc.cores=nthreads )
1442353519102:out <- mclapply(t(Xi), function(tx, matrix=X) { cor(matrix, tx) }, mc.cores=nthreads )
1442353533061:out <- mclapply(t(Xi), function(tx, matrix=X) { print(tx) }, mc.cores=nthreads )
1442353556430:out <- mclapply(t(Xi), function(tx, matrix=X) { print(tx)
1442353556560:print("dw")}, mc.cores=nthreads )
1442353595503:out <- mclapply(t(Xi), mean, mc.cores=nthreads )
1442353603676:out
1442353613238:out <- mclapply(t(Xi), function(tx, matrix=X) { cor(matrix, tx) }, mc.cores=nthreads )
1442353686636:mclapply(t(Xi), pinrt(x))
1442353694778:mclapply(t(Xi), print(x))
1442353707351:mclapply(t(Xi), print
1442353709106:)
1442353792827:mclapply(t(Xi), function(X) {print()} )
1442353803001:mclapply(t(Xi), function() { print() } )
1442353809276:mclapply(t(Xi), function(x) { print(x) } )
1442353823636:out <- mclapply(t(Xi), function(tx, matrix=X) { cor(matrix, tx) }, mc.cores=nthreads )
1442353837931:out
1442353852556:out <- mclapply(Xi, function(tx, matrix=X) { cor(matrix, tx) }, mc.cores=nthreads )
1442353883641:out <- mclapply(t(Xi), function(tx) { cor(X, tx) }, mc.cores=nthreads )
1442353889729:out
1442353925981:out <- mclapply(t(Xi), function(tx) { cor(X, t(tx)) }, mc.cores=nthreads )
1442353934475:out <- mclapply(Xi, function(tx) { cor(X, t(tx)) }, mc.cores=nthreads )
1442353939101:Xi
1442353942554:dim(Xi)
1442353971263:out <- mclapply(Xi, 2, function(tx) { cor(X, t(tx)) }, mc.cores=nthreads )
1442353982388:out <- mclapply(Xi, 2, function(tx) { print(tx) }, mc.cores=nthreads )
1442353985227:out
1442354002168:out <- mclapply(Xi, function(tx) { print(tx) }, mc.cores=nthreads )
1442354004476:out
1442354029214:out <- mclapply(Xi, function { print(tx) }, mc.cores=nthreads )
1442354052603:out <- mclapply(Xi, function(tx) { print(dim(tx)) }, mc.cores=nthreads )
1442354055912:out
1442354073932:out <- mclapply(Xi, function(tx) { print(length(tx)) }, mc.cores=nthreads )
1442354076058:out
1442354085788:out <- mcapply(Xi, function(tx) { print(length(tx)) }, mc.cores=nthreads )
1442354321682:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442354322795:out <- mcapply(1:ncol(Xi),
1442354323005:function(i) { cor(X, Xi[,i]) },
1442354323255:mc.cores=nthreads )
1442354371748:out <- mcapply(1:ncol(Xi),
1442354371927:function(i) { Xi[,i] },
1442354380978:View(out)
1442354401641:out <- mcapply(1:ncol(Xi),
1442354401812:function(i) { Xi[,i] },
1442354401981:mc.cores=nthreads )
1442354407311:out <- mclapply(1:ncol(Xi),
1442354407477:function(i) { Xi[,i] },
1442354407663:mc.cores=nthreads )
1442354412930:View(out)
1442354527644:out <- unlist(out)
1442354535705:out
1442354580402:out <- mclapply(1:ncol(Xi),
1442354580557:function(i) { Xi[,i] },
1442354580746:mc.cores=nthreads )
1442354592726:dim(out[2])
1442354595628:dim(out[1])
1442354601012:dim(out[[1]])
1442354611726:length(out[1])
1442354616526:out[1]
1442354620354:length(out[[1]])
1442354641741:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442354641926:out <- mclapply(1:ncol(Xi),
1442354642163:function(i) { cor(X, Xi[,i]) },
1442354642388:mc.cores=nthreads )
1442354691047:out <- mclapply(1:ncol(Xi),
1442354691215:function(i) { cor(X, Xi[,i]) },
1442354691393:mc.cores=nthreads )
1442354693726:out
1442354698706:out[[1]]
1442354768142:z <- list(c(1,2,3,), c(4,5,6))
1442354778489:z <- list(c(1,2,3), c(4,5,6))
1442354782726:z[[1]]
1442354785701:z[1]
1442354792350:unlist(z)
1442354818380:out <- matrix(unlist(out), ncol=length(out))
1442354823100:View(out)
1442354838161:out <- matrix(unlist(out), ncol=length(out[[1]]))
1442354841296:out <- mclapply(1:ncol(Xi),
1442354841436:function(i) { cor(X, Xi[,i]) },
1442354841615:mc.cores=nthreads )
1442354842480:out <- matrix(unlist(out), ncol=length(out[[1]]))
1442354867177:out <- mclapply(1:ncol(Xi),
1442354867309:function(i) { cor(X, Xi[,i]) },
1442354867437:mc.cores=nthreads )
1442354868296:out <- matrix(unlist(out), ncol=length(out1))
1442354874438:out <- matrix(unlist(out), ncol=length(out))
1442355199909:View(cor_ep)
1442355385344:View(cor_ep)
1442355436193:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442355436373:tx_input_list <- as.character(tx_input_list)
1442355436556:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442355436732:out <- mclapply(1:ncol(Xi),
1442355436910:function(i) { cor(X, Xi[,i]) },
1442355437101:mc.cores=nthreads )
1442355437285:out <- matrix(unlist(out), ncol=length(out))
1442355439726:out
1442355439900:}
1442355448699:z <- correlation.selected()
1442355453605:library(doParallel)
1442355460144:z <- correlation.selected()
1442355479044:nthreads <- 10
1442355484321:z <- correlation.selected()
1442355524435:z
1442355564242:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442355569592:X <- ep
1442355571176:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442355583421:tx_input_list=c("1","2","9","12","13")
1442355586719:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442355591002:dim(Xi)
1442355608967:colnames(X)
1442355627347:x<- t(X)
1442355635293:X <- t(X)
1442355639985:rm(x)
1442355649727:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442355654359:dim(Xi)
1442355660810:out <- mclapply(1:ncol(Xi),
1442355661054:function(i) { cor(X, Xi[,i]) },
1442355661238:mc.cores=nthreads )
1442355662036:out <- matrix(unlist(out), ncol=length(out))
1442355667592:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442355667746:tx_input_list <- as.character(tx_input_list)
1442355667909:X <- t(X)
1442355668054:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442355668210:out <- mclapply(1:ncol(Xi),
1442355668360:function(i) { cor(X, Xi[,i]) },
1442355668522:mc.cores=nthreads )
1442355668705:out <- matrix(unlist(out), ncol=length(out))
1442355672064:out
1442355672226:}
1442355676829:z<- correlation.selected()
1442355683719:View(z)
1442355702215:View(cor_ep[,1:5])
1442355727766:sum(is.na(cor_ep))
1442355747466:cor_ep <- cor(X)
1442355801521:View(cor_ep[,1:5])
1442355862501:colnames(out) <- colnames(Xi)
1442355862660:out
1442356737362:rownames(X)
1442356748363:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442356748363:tx_input_list <- as.character(tx_input_list)
1442356748364:X <- t(X)
1442356748364:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442356748364:out <- mclapply(1:ncol(Xi),
1442356748364:function(i) { cor(X, Xi[,i]) },
1442356748365:mc.cores=nthreads )
1442356748365:out <- matrix(unlist(out), ncol=length(out))
1442356748365:colnames(out) <- colnames(Xi)
1442356748366:rownames(out) <- colnames(X)
1442356748366:out
1442356748366:}
1442356753836:z <- correlation.selected()
1442356760902:library(doParallel)
1442356762453:nthreads <- 10
1442356767865:z <- correlation.selected()
1442356771945:View(z)
1442356814382:sum(cor_ep[,1:5]!=z)
1442356835225:which(cor_ep[,1:5]!=z)
1442356864351:sum(colSums(cor_ep[,1:5])!=colSums(z))
1442356873633:colSums(cor_ep[,1:5])
1442356879203:colSums(z)
1442356939380:sum(is.na(z))
1442356961301:which(round(cor_ep[,1:5], 2)!=round(z,2)
1442356963301:)
1442356969276:sum(round(cor_ep[,1:5], 2)!=round(z,2))
1442357179280:?sort
1442357212937:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442357213148:out <- mclapply(1:ncol(Xi),
1442357213304:function(i) { sort(cor(X, Xi[,i]), decreasing=T)[1:50] },
1442357213482:mc.cores=nthreads )
1442357217385:out
1442357265624:out <- mclapply(1:ncol(Xi),
1442357265794:function(i) {
1442357265926:names(sort(cor(X, Xi[,i]), decreasing=T))[1:50]
1442357266102:},
1442357266410:mc.cores=nthreads )
1442357269013:out
1442357279945:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442357280122:out <- mclapply(1:ncol(Xi),
1442357280286:function(i) {
1442357280550:colnames(sort(cor(X, Xi[,i]), decreasing=T))[1:50]
1442357280716:},
1442357281137:mc.cores=nthreads )
1442357282976:out
1442357290620:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442357290755:out <- mclapply(1:ncol(Xi),
1442357290892:function(i) {
1442357291054:(sort(cor(X, Xi[,i]), decreasing=T))[1:50]
1442357291330:},
1442357291584:mc.cores=nthreads )
1442357293607:out
1442357303051:names(out[[2]])
1442357305626:names(out[2])
1442357320000:out[1]
1442357407939:out <- mclapply(1:ncol(Xi),
1442357408428:function(i) { cor(X, Xi[,i]) },
1442357408455:mc.cores=nthreads )
1442357408518:out <- matrix(unlist(out), ncol=length(out))
1442357408541:colnames(out) <- colnames(Xi)
1442357408587:rownames(out) <- colnames(X)
1442357408613:out
1442357418301:out[,1]
1442357591567:X <- out
1442357595662:out <- mclapply(1:ncol(X)
1442357596479:function(i) { names(sort(i)) }
1442357596903:mc.cores=nthreads
1442357610210:out <- mclapply(1:ncol(X),
1442357610473:function(i) { names(sort(i)) },
1442357610726:mc.cores=nthreads
1442357610977:)
1442357619726:out
1442357627825:X <- ep
1442357630302:tx_input_list <- as.character(tx_input_list)
1442357630570:X <- t(X)
1442357630810:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442357630815:out <- mclapply(1:ncol(Xi),
1442357631094:function(i) { cor(X, Xi[,i]) },
1442357631116:mc.cores=nthreads )
1442357631597:out <- matrix(unlist(out), ncol=length(out))
1442357631600:colnames(out) <- colnames(Xi)
1442357632265:rownames(out) <- colnames(X)
1442357632714:out
1442357633737:}
1442357641400:correlation.selected <- function(X, tx_input_list=c("1","2","9","12","13")) {
1442357641401:tx_input_list <- as.character(tx_input_list)
1442357641401:X <- t(X)
1442357641401:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442357641402:out <- mclapply(1:ncol(Xi),
1442357641402:function(i) { cor(X, Xi[,i]) },
1442357641402:mc.cores=nthreads )
1442357641402:out <- matrix(unlist(out), ncol=length(out))
1442357641403:colnames(out) <- colnames(Xi)
1442357641403:rownames(out) <- colnames(X)
1442357641403:out
1442357641404:}
1442357656892:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442357656892:tx_input_list <- as.character(tx_input_list)
1442357656892:X <- t(X)
1442357656893:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442357656893:out <- mclapply(1:ncol(Xi),
1442357656893:function(i) { cor(X, Xi[,i]) },
1442357656894:mc.cores=nthreads )
1442357656894:out <- matrix(unlist(out), ncol=length(out))
1442357656894:colnames(out) <- colnames(Xi)
1442357656894:rownames(out) <- colnames(X)
1442357656895:out
1442357656895:}
1442357662608:X <- correlation.selected()
1442357673511:out <- mclapply(1:ncol(X),
1442357673709:function(i) { names(sort(i)) },
1442357673877:mc.cores=nthreads
1442357674077:)
1442357677954:out
1442357702514:out <- mclapply(1:ncol(X),
1442357702678:function(i) { names(sort(X[,i])) },
1442357702836:mc.cores=nthreads
1442357703004:)
1442357705876:out
1442357761631:get.most.correlated <- function(X, how.many=50) {
1442357761880:out <- mclapply(1:ncol(X),
1442357762131:function(i) { names(sort(X[,i])) },
1442357762131:mc.cores=nthreads
1442357762564:)
1442357762600:out <- matrix(unlist(out), ncol=ncol(X))
1442357763156:}
1442357776650:get.most.correlated(X)
1442357783776:z <- get.most.correlated(X)
1442357785551:z
1442357797839:get.most.correlated <- function(X, how.many=50) {
1442357797839:out <- mclapply(1:ncol(X),
1442357797840:function(i) { names(sort(X[,i])) },
1442357797840:mc.cores=nthreads
1442357797840:)
1442357797840:out <- matrix(unlist(out), ncol=ncol(X))
1442357797841:out
1442357797841:}
1442357801651:z <- get.most.correlated(X)
1442357804007:View(z)
1442357826603:get.most.correlated <- function(X, how.many=50) {
1442357826756:out <- mclapply(1:ncol(X),
1442357826895:function(i) { names(sort(X[,i]))[1:how.many] },
1442357827044:mc.cores=nthreads
1442357827224:)
1442357827391:out <- matrix(unlist(out), ncol=ncol(X))
1442357827611:out
1442357827901:}
1442357836926:View(z)
1442357851463:get.most.correlated <- function(X, how.many=50) {
1442357851464:out <- mclapply(1:ncol(X),
1442357851464:function(i) { names(sort(X[,i]))[1:how.many] },
1442357851464:mc.cores=nthreads
1442357851464:)
1442357851465:out <- matrix(unlist(out), ncol=ncol(X))
1442357851465:out
1442357851465:}
1442357854426:}
1442357885051:z <- get.most.correlated(correlation.selected())
1442357890876:View(z)
1442357932451:rownames(z) <- NULL
1442419858261:??strreplace
1442419880702:class(getwd())
1442419913505:pth <- stringr("/R", "", getwd())
1442419957977:pth <- gsub("/R", "", getwd())
1442421930574:out.dir <- paste0(pth, "/data")
1442421932006:if(!file.exists(out.dir)) {
1442421933702:dir.create(out.dir)
1442421933922:}
1442422111822:adres <- paste0("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2", gene2, ".gz")
1442422125020:adres <- paste0("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2", "go.gz")
1442422126491:download.file(adres, out.dir)
1442422173682:?file.create()
1442422286815:download.file(adres, out.dir)
1442422315915:map.file <- paste0(pth, "/data/gene2", "go.gz")
1442422327790:if(!file.exists(map.file)) {
1442422328359:file.create(map.file)
1442422328793:}
1442422341232:adres <- paste0("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2", "go.gz")
1442422341870:download.file(adres, out.dir)
1442422349692:download.file(adres, map.file)
1442422395140:?load
1442424925355:?gzfile
1442425044306:map <- gzfile(adres, open="r")
1442425069013:map <- gzfile(map.file, open="r")
1442425089533:con <- gzfile(map.file, open="r")
1442425093356:rm(map)
1442425456961:map <- read.table(con, sep="\t")
1442425477655:View(map)
1442425543736:map <- read.table(con, skip=1, sep="\t")
1442425548434:con <- gzfile(map.file, open="r")
1442425549006:map <- read.table(con, skip=1, sep="\t")
1442425564587:View(map)
1442425573691:con <- gzfile(map.file, open="r")
1442425573893:map <- read.table(con, sep="\t")
1442425633086:names(map <- c("taxon.id", "", "go.id", ))
1442425876601:names(map <- c("tax_id", "Gene_ID", "GO_ID", "Evidence", "Qualifier", "GO_term", "PubMed", "Category"))
1442425886005:names(map) <- c("tax_id", "Gene_ID", "GO_ID", "Evidence", "Qualifier", "GO_term", "PubMed", "Category")
1442425895437:adres <- paste0("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2", "go.gz")
1442425896283:download.file(adres, map.file)
1442425936125:con <- gzfile(map.file, open="r")
1442425936297:map <- read.table(con, sep="\t")
1442425946192:names(map) <- c("tax_id", "Gene_ID", "GO_ID", "Evidence", "Qualifier", "GO_term", "PubMed", "Category")
1442425989931:names(map) <- c("tax_ID", "Gene_ID", "GO_ID", "Evidence", "Qualifier", "GO_term", "PubMed", "Category")
1442426730492:rm(X, Xi, z,mart,ehist,url)
1442426742455:close(conn)
1442426762905:con()
1442426777505:rm(tx_input_list)
1442426803905:View(out)
1442426863560:X <- get.most.correlated(correlation.selected)
1442426872683:get.most.correlated <- function(X, how.many=50) {
1442426872683:# X - output of correlation.selected()
1442426872683:out <- mclapply(1:ncol(X),
1442426872683:function(i) { names(sort(X[,i]))[1:how.many] },
1442426872684:mc.cores=nthreads
1442426872684:)
1442426872684:out <- matrix(unlist(out), ncol=ncol(X))
1442426872684:rownames(out) <- NULL
1442426872684:out
1442426872685:}
1442426875329:X <- get.most.correlated(correlation.selected)
1442426880207:library(doParallel)
1442426884231:X <- get.most.correlated(correlation.selected)
1442426939487:X <- get.most.correlated(correlation.selected())
1442426968313:X <- correlation.selected()
1442426982480:out==X
1442426989655:sum(out!=X)
1442427009031:X <- get.most.correlated(X)
1442427044456:X <- get.most.correlated(X)
1442427051314:get.most.correlated <- function(X, how.many=50) {
1442427051314:# X - output of correlation.selected()
1442427051315:out <- mclapply(1:ncol(X),
1442427051315:function(i) { names(sort(X[,i]))[1:how.many] },
1442427051315:mc.cores=nthreads
1442427051315:)
1442427051315:#out <- matrix(unlist(out), ncol=ncol(X))
1442427051316:#rownames(out) <- NULL
1442427051316:out
1442427051316:}
1442427053580:get.most.correlated <- function(X, how.many=50) {
1442427053581:# X - output of correlation.selected()
1442427053581:out <- mclapply(1:ncol(X),
1442427053581:function(i) { names(sort(X[,i]))[1:how.many] },
1442427053581:mc.cores=nthreads
1442427053582:)
1442427053582:#out <- matrix(unlist(out), ncol=ncol(X))
1442427053582:#rownames(out) <- NULL
1442427053582:out
1442427053582:}
1442427059881:X <- get.most.correlated(X)
1442427077465:get.most.correlated <- function(X, how.many=50) {
1442427077466:# X - output of correlation.selected()
1442427077466:out <- mclapply(1:ncol(X),
1442427077466:function(i) { names(sort(X[,i]))[1:how.many] },
1442427077466:mc.cores=nthreads
1442427077467:)
1442427077467:#out <- matrix(unlist(out), ncol=ncol(X))
1442427077467:#rownames(out) <- NULL
1442427077467:out
1442427077467:}
1442427080080:X <- get.most.correlated(X)
1442427117914:get.most.correlated <- function(X, how.many=50) {
1442427117915:# X - output of correlation.selected()
1442427117915:out <- mclapply(1:ncol(X),
1442427117915:function(i) { colnames(sort(X[,i]))[1:how.many] },
1442427117915:mc.cores=nthreads
1442427117916:)
1442427117916:#out <- matrix(unlist(out), ncol=ncol(X))
1442427117916:#rownames(out) <- NULL
1442427117916:out
1442427117916:}
1442427121080:X <- get.most.correlated(X)
1442427140006:X <- correlation.selected()
1442427154306:Xi <- get.most.correlated(X)
1442427161807:Xi[[1]]
1442427171723:get.most.correlated <- function(X, how.many=50) {
1442427171723:# X - output of correlation.selected()
1442427171723:out <- mclapply(1:ncol(X),
1442427171724:function(i) { colnames(sort(X[,i]))[1:how.many] },
1442427171724:mc.cores=nthreads
1442427171724:)
1442427171724:#out <- matrix(unlist(out), ncol=ncol(X))
1442427171724:#rownames(out) <- NULL
1442427171725:out
1442427171725:}
1442427174305:Xi[[1]]
1442427175105:Xi[[1]]
1442427177264:Xi <- get.most.correlated(X)
1442427179930:Xi[[1]]
1442427221614:i=1
1442427227039:sort(X[,i])
1442427233812:names(sort(X[,i]))
1442427246081:View(X)
1442427277756:X <- correlation.selected()
1442427285830:colnames(X)
1442427295433:colnames(ep)
1442427495379:X <- correlation.selected()
1442427525246:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442427525246:tx_input_list <- as.character(tx_input_list)
1442427525246:X <- t(X)
1442427525247:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442427525247:out <- mclapply(1:ncol(Xi),
1442427525247:function(i) { cor(X, Xi[,i]) },
1442427525247:mc.cores=nthreads )
1442427525248:out <- matrix(unlist(out), ncol=length(out))
1442427525248:colnames(out) <- colnames(Xi)
1442427525249:rownames(out) <- colnames(X)
1442427525249:colnames(X)
1442427525249:#out
1442427525250:}
1442427528439:X <- correlation.selected()
1442427529980:X
1442427556497:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442427556497:tx_input_list <- as.character(tx_input_list)
1442427556497:X <- t(X)
1442427556498:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442427556498:out <- mclapply(1:ncol(Xi),
1442427556498:function(i) { cor(X, Xi[,i]) },
1442427556499:mc.cores=nthreads )
1442427556499:out <- data.frame(unlist(out), ncol=length(out))
1442427556499:colnames(out) <- colnames(Xi)
1442427556500:rownames(out) <- colnames(X)
1442427556500:out
1442427556500:}
1442427560730:X <- correlation.selected()
1442427591267:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442427591267:tx_input_list <- as.character(tx_input_list)
1442427591267:X <- t(X)
1442427591268:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442427591268:out <- mclapply(1:ncol(Xi),
1442427591268:function(i) { cor(X, Xi[,i]) },
1442427591268:mc.cores=nthreads )
1442427591269:out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442427591269:colnames(out) <- colnames(Xi)
1442427591269:rownames(out) <- colnames(X)
1442427591270:out
1442427591270:}
1442427597460:X <- correlation.selected()
1442427598905:X
1442427605805:View(X)
1442427624136:get.most.correlated <- function(X, how.many=50) {
1442427624136:# X - output of correlation.selected()
1442427624136:out <- mclapply(1:ncol(X),
1442427624137:function(i) { names(sort(X[,i]))[1:how.many] },
1442427624137:mc.cores=nthreads
1442427624137:)
1442427624137:out <- matrix(unlist(out), ncol=ncol(X))
1442427624137:rownames(out) <- NULL
1442427624138:out
1442427624138:}
1442427661962:Xi <- get.most.correlated()
1442430706579:library(parallel)
1442430706579:library(limma)
1442430706580:# Globals
1442430706580:NCPU = detectCores()
1442430706604:CACHE.DIR = "cache"
1442430706604:if (!dir.exists(CACHE.DIR)) {
1442430706605:dir.create(CACHE.DIR)
1442430706605:}
1442430706606:###############
1442430706606:# Preprocessing
1442430706606:###############
1442430706606:# Other possibilities:
1442430706607:# - use a min mean and min variance cutoff to reduce # of genes (faster downstream processing w/o much loss)
1442430706607:# - if there are missing values, impute using knnimpute or similar
1442430706607:preprocess = function(X) {
1442430706607:# remove genes & samples w/ zero variance
1442430706607:X = X[apply(X,1,var) > 0,]
1442430706608:X = X[,apply(X,2,var) > 0]
1442430706608:stopifnot(nrow(X) > 0)
1442430706608:stopifnot(ncol(X) > 0)
1442430706608:# quantile normalize
1442430706609:normalizeBetweenArrays(as.matrix(X))
1442430706609:}
1442430706609:##############
1442430706610:# Correlations
1442430706610:##############
1442430706610:# the slow version, for matrices containing NaN, could be used as a fallback
1442430706610:#top.correlated = function(X, k=50) {
1442430706611:#    k = min(k,nrow(X)-1)
1442430706611:#    Xt = t(X)
1442430706611:#    o = mclapply(colnames(Xt), function(ix) {
1442430706611:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1442430706611:#        r = r[!is.na(r)]
1442430706611:#        o = NULL
1442430706612:#        if (length(r) >= k) {
1442430706612:#            o = names(r)[order(r, decreasing=T)]
1442430706612:#        }
1442430706612:#        o
1442430706612:#    }, mc.cores=NCPU)
1442430706613:#    names(o) = colnames(Xt)
1442430706613:#    o
1442430706613:#}
1442430706613:top.correlated = function(X, subset=NULL, k=50) {
1442430706613:k = min(k, nrow(X) - 1)
1442430706614:X = as.matrix(X)
1442430706614:stopifnot(sum(is.na(X)) == 0)
1442430706614:Xs = t(apply(X,1,scale))
1442430706615:o = mclapply(1:nrow(Xs), function(i) {
1442430706615:if ((i > 0) && (i %% 100 == 0)) {
1442430706615:sprintf("Calculating correlations for row: %d", i)
1442430706615:}
1442430706615:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442430706616:oo = names(r)[order(r, decreasing=T)]
1442430706616:if (!is.null(subset)) {
1442430706616:oo = oo[oo %in% subset]
1442430706616:}
1442430706617:oo[1:min(k, length(oo))]
1442430706617:}, mc.cores=NCPU)
1442430706617:names(o) = rownames(Xs)
1442430706618:o
1442430706618:}
1442430706619:#################################################
1442430706619:# Gene Ontology names and mappings (for all taxa)
1442430706619:#################################################
1442430706619:go.path = file.path(CACHE.DIR, "GO.rda")
1442430706620:if (!file.exists(go.path)) {
1442430706620:path = file.path(CACHE.DIR, "gene2go.gz")
1442430706620:if (!file.exists(path)) {
1442430706620:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2go.gz", path)
1442430706620:}
1442430706621:h = gzfile(path, open="r")
1442430706621:o = read.table(h, skip=1, sep="\t",
1442430706621:col.names=c("Taxon ID", "Gene ID", "Term ID", "Evidence", "Qualifier", "Term Name", "PMID", "Category"))
1442430706622:nv = o$Term.Name
1442430706622:names(nv) = o$Term.ID
1442430706622:GO = list(
1442430706622:table=o,
1442430706623:terms=nv[unique(names(nv))],
1442430706623:annotation=by(o, o$Taxon.ID,
1442430706623:function(ts) {
1442430706623:by(ts, ts$Term.ID, function(x) {
1442430706624:unique(x$Gene.ID)
1442430706624:})
1442430706624:}))
1442430706625:save(GO, file=go.path)
1442430706625:} else {
1442430706625:if (!("GO" %in% ls())) {
1442430706625:load(go.path)
1442430706626:}
1442430706626:}
1442430751549:#######################################
1442430751550:# Function prediction by kNN FET method
1442430751550:#######################################
1442430751550:# could improve to output p-value, odds ratio ("estimate"), and N for each term-gene pair
1442430751550:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442430751551:taxon.id = as.character(taxon.id)
1442430751551:At = A$annotation[[taxon.id]]
1442430751551:background = intersect(unique(unlist(At)), rownames(X))
1442430751551:r = top.correlated(X, subset=background, k=k)
1442430751552:mclapply(r[1:50], function(c1) {
1442430751552:c1 = as.integer(background %in% c1)
1442430751552:o = sapply(At[1:50], function(c2) {
1442430751552:c2 = as.integer(background %in% c2)
1442430751553:oo = NULL
1442430751553:if (sum(c2) > 0) {
1442430751553:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442430751553:if (ct[1,1] >= min.count) {
1442430751554:fet = fisher.test(ct)
1442430751554:#oo = list(p=fet$p.value, OR=fet$estimate)
1442430751554:oo = as.numeric(fet$estimate)
1442430751555:}
1442430751555:}
1442430751555:oo
1442430751556:})
1442430751556:unlist(o)
1442430751556:}, mc.cores=NCPU)
1442430751556:}
1442430779863:X = read.table("expression/expression.gene.v2.tsv")
1442430793740:X = read.table("expression.gene.v2.tsv")
1442430800884:Xp = preprocess(X)
1442430810931:library(limma)
1442430829556:?biocLite
1442430889246:biocLite(c(limma))
1442430896205:source("http://bioconductor.org/biocLite.R")
1442430900755:biocLite(c(limma))
1442430906760:biocLite(c("limma"))
1442432482937:Xp = preprocess(X)
1442432491366:library(parallel)
1442432491518:library(limma)
1442432497268:Xp = preprocess(X)
1442432526281:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[1:1000]
1442432527256:Xp.q = Xp[q,]
1442432533085:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442432536884:print(predictions)
1442433054980:pred <- top.correlated(Xp)
1442433497290:pred[[1]]
1442436404776:head(e)
1442436908456:?intersect
1442436974289:intersect(c(1,2,3), c(3,4,5))
1442438351605:At <- GO$annotation[[9606]]
1442438369639:At <- GO$annotation[["9606"]]
1442438381706:head(unlist(At))
1442438409505:unlist(At0)
1442438411607:unlist(At)
1442438501205:length(At)
1442438514230:AT[1]
1442438517130:At[1]
1442438528355:At[3]
1442438545980:head(unlist(At))
1442438873530:taxon.id <- "9606"
1442438878932:taxon.id = as.character(taxon.id)
1442438881236:At = A$annotation[[taxon.id]]
1442438884988:background = intersect(unique(unlist(At)), rownames(X))
1442438890805:background
1442438912089:head(unlist(At))
1442438937380:names(unlist(At))
1442438979205:At[1]
1442438988205:At[3]
1442438992134:At[21]
1442439024534:At[names(At)=="GO:0000028"]
1442439034335:unlist(At)[names(At)=="GO:0000028"]
1442439049755:unlist(At)[names(unlist(At)=="GO:0000028"]
1442439094232:A <- GO
1442439100267:taxon.id = as.character(taxon.id)
1442439100556:At = A$annotation[[taxon.id]]
1442439107305:summary(A)
1442439109580:summary(At)
1442439120530:summary(A)
1442439312030:summary(A$annotation)
1442439448128:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442439448128:taxon.id = as.character(taxon.id)
1442439448128:At = A$annotation[[taxon.id]]
1442439448128:background = intersect(unique(unlist(At)), rownames(X))
1442439448129:r = top.correlated(X, subset=background, k=k)
1442439448129:mclapply(r[1:50], function(c1) {
1442439448129:c1 = as.integer(background %in% c1)
1442439448130:o = sapply(At[1:50], function(c2) {
1442439448130:c2 = as.integer(background %in% c2)
1442439448130:oo = NULL
1442439448130:if (sum(c2) > 0) {
1442439448131:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442439448131:if (ct[1,1] >= min.count) {
1442439448131:fet = fisher.test(ct)
1442439448132:#oo = list(p=fet$p.value, OR=fet$estimate)
1442439448132:#oo = as.numeric(fet$estimate)
1442439448132:oo = fet$p.value
1442439448132:}
1442439448133:}
1442439448133:oo
1442439448133:})
1442439448134:unlist(o)
1442439448134:}, mc.cores=NCPU)
1442439448134:}
1442439478257:pred.p <- predict.annotations.knn(Xp.q, GO, 9606)
1442439496880:pred.p[1]
1442439504280:pred.p[7]
1442439589439:predictions[7]
1442439617134:predictions[1]
1442440057568:unlist(At)[names(unlist(At))=="GO:0000045"]
1442440083105:names(unlist(At))=="GO:0000045"
1442440090767:unlist(At)[names(unlist(At))=="GO:0000045"]
1442440528667:pred.p[7]
1442440531380:predictions[7]
1442440823805:GO$annotation$`3702`
1442440838280:GO$annotation$`3702`[1]
1442440842230:GO$annotation$`3702`[3]
1442440902583:GO$annotation$`3702`$G0000003
1442440910355:GO$annotation$`3702`$GO:000003
1442440919280:GO$annotation$`3702`$`GO:000003`
1442440925730:GO$annotation$`3702`$`GO:0000003`
1442441020035:GO$annotation$`9606`$`GO:0000003`
1442441022805:GO$annotation$`9606`
1442441102851:human <-GO$annotation[[9606]]
1442441109007:human <-GO$annotation[["9606"]]
1442441115513:class(human)
1442441126405:head(unlist(human))
1442441405060:correlated <- top.correlated(X)
1442443926297:rm(mart, out, X, Xi, z, ehist, ex_mat, L1, L2, tx_input_list,url)
1442443934870:rm(nthreads)
1442443953305:library(parallel)
1442443953333:library(limma)
1442443953656:# Globals
1442443953657:NCPU = detectCores()
1442443953665:CACHE.DIR = "cache"
1442443953665:if (!dir.exists(CACHE.DIR)) {
1442443953666:dir.create(CACHE.DIR)
1442443953666:}
1442443953667:###############
1442443953667:# Preprocessing
1442443953667:###############
1442443953667:# Other possibilities:
1442443953667:# - use a min mean and min variance cutoff to reduce # of genes (faster downstream processing w/o much loss)
1442443953668:# - if there are missing values, impute using knnimpute or similar
1442443953668:preprocess = function(X) {
1442443953668:# remove genes & samples w/ zero variance
1442443953668:X = X[apply(X,1,var) > 0,]
1442443953669:X = X[,apply(X,2,var) > 0]
1442443953669:stopifnot(nrow(X) > 0)
1442443953669:stopifnot(ncol(X) > 0)
1442443953669:# quantile normalize
1442443953670:normalizeBetweenArrays(as.matrix(X))
1442443953670:}
1442443953670:##############
1442443953671:# Correlations
1442443953671:##############
1442443953671:# the slow version, for matrices containing NaN, could be used as a fallback
1442443953671:#top.correlated = function(X, k=50) {
1442443953672:#    k = min(k,nrow(X)-1)
1442443953672:#    Xt = t(X)
1442443953672:#    o = mclapply(colnames(Xt), function(ix) {
1442443953672:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1442443953672:#        r = r[!is.na(r)]
1442443953672:#        o = NULL
1442443953673:#        if (length(r) >= k) {
1442443953673:#            o = names(r)[order(r, decreasing=T)]
1442443953673:#        }
1442443953673:#        o
1442443953673:#    }, mc.cores=NCPU)
1442443953674:#    names(o) = colnames(Xt)
1442443953674:#    o
1442443953674:#}
1442443953674:top.correlated = function(X, subset=NULL, k=50) {
1442443953674:k = min(k, nrow(X) - 1)
1442443953675:X = as.matrix(X)
1442443953675:stopifnot(sum(is.na(X)) == 0)
1442443953675:Xs = t(apply(X,1,scale))
1442443953675:o = mclapply(1:nrow(Xs), function(i) {
1442443953676:if ((i > 0) && (i %% 100 == 0)) {
1442443953676:sprintf("Calculating correlations for row: %d", i)
1442443953676:}
1442443953676:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442443953677:oo = names(r)[order(r, decreasing=T)]
1442443953677:if (!is.null(subset)) {
1442443953677:oo = oo[oo %in% subset]
1442443953677:}
1442443953678:oo[1:min(k, length(oo))]
1442443953678:}, mc.cores=NCPU)
1442443953678:names(o) = rownames(Xs)
1442443953679:o
1442443953679:}
1442443953680:#################################################
1442443953680:# Gene Ontology names and mappings (for all taxa)
1442443953680:#################################################
1442443953680:go.path = file.path(CACHE.DIR, "GO.rda")
1442443953681:if (!file.exists(go.path)) {
1442443953681:path = file.path(CACHE.DIR, "gene2go.gz")
1442443953681:if (!file.exists(path)) {
1442443953681:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2go.gz", path)
1442443953682:}
1442443953682:h = gzfile(path, open="r")
1442443953682:o = read.table(h, skip=1, sep="\t",
1442443953682:col.names=c("Taxon ID", "Gene ID", "Term ID", "Evidence", "Qualifier", "Term Name", "PMID", "Category"))
1442443953683:nv = o$Term.Name
1442443953683:names(nv) = o$Term.ID
1442443953683:GO = list(
1442443953684:table=o,
1442443953684:terms=nv[unique(names(nv))],
1442443953684:annotation=by(o, o$Taxon.ID,
1442443953684:function(ts) {
1442443953685:by(ts, ts$Term.ID, function(x) {
1442443953685:unique(x$Gene.ID)
1442443953685:})
1442443953686:}))
1442443953686:save(GO, file=go.path)
1442443953686:} else {
1442443953686:if (!("GO" %in% ls())) {
1442443953687:load(go.path)
1442443953687:}
1442443953687:}
1442443955197:#######################################
1442443955197:# Function prediction by kNN FET method
1442443955197:#######################################
1442443955198:# could improve to output p-value, odds ratio ("estimate"), and N for each term-gene pair
1442443955198:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442443955198:taxon.id = as.character(taxon.id)
1442443955198:At = A$annotation[[taxon.id]]
1442443955199:background = intersect(unique(unlist(At)), rownames(X))
1442443955199:r = top.correlated(X, subset=background, k=k)
1442443955199:mclapply(r[1:50], function(c1) {
1442443955199:c1 = as.integer(background %in% c1)
1442443955200:o = sapply(At[1:50], function(c2) {
1442443955200:c2 = as.integer(background %in% c2)
1442443955200:oo = NULL
1442443955200:if (sum(c2) > 0) {
1442443955201:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442443955201:if (ct[1,1] >= min.count) {
1442443955201:fet = fisher.test(ct)
1442443955202:#oo = list(p=fet$p.value, OR=fet$estimate)
1442443955202:#oo = as.numeric(fet$estimate)
1442443955202:oo = fet$p.value
1442443955203:}
1442443955203:}
1442443955203:oo
1442443955203:})
1442443955204:unlist(o)
1442443955204:}, mc.cores=NCPU)
1442443955204:}
1442443966756:X = read.table("expression.gene.v2.tsv")
1442444027027:Xp = preprocess(X)
1442444048313:length(X)
1442444246917:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442444246917:taxon.id = as.character(taxon.id)
1442444246917:At = A$annotation[[taxon.id]]
1442444246917:background = intersect(unique(unlist(At)), rownames(X))
1442444246917:r = top.correlated(X, subset=background, k=k)
1442444246918:mclapply(r[1:50], function(c1) {
1442444246918:c1 = as.integer(background %in% c1)
1442444246918:o = sapply(At[1:50], function(c2) {
1442444246919:c2 = as.integer(background %in% c2)
1442444246919:oo = NULL
1442444246919:if (sum(c2) > 0) {
1442444246920:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442444246920:if (ct[1,1] >= min.count) {
1442444246920:fet = fisher.test(ct)
1442444246920:#oo = list(p=fet$p.value, OR=fet$estimate)
1442444246921:#oo = as.numeric(fet$estimate)
1442444246921:oo = fet$p.value[fet$p.value!=1.0]
1442444246921:}
1442444246922:}
1442444246922:oo
1442444246922:})
1442444246923:unlist(o)
1442444246923:}, mc.cores=NCPU)
1442444246923:}
1442444254932:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[1:1000]
1442444255157:Xp.q = Xp[q,]
1442444259236:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442444264917:print(predictions)
1442444278515:length(predictions)
1442444307631:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442444320840:predictions[50]
1442444345560:print(predictions)
1442444422806:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442444422806:taxon.id = as.character(taxon.id)
1442444422806:At = A$annotation[[taxon.id]]
1442444422807:background = intersect(unique(unlist(At)), rownames(X))
1442444422807:r = top.correlated(X, subset=background, k=k)
1442444422807:mclapply(r[1:50], function(c1) {
1442444422808:c1 = as.integer(background %in% c1)
1442444422808:o = sapply(At[1:50], function(c2) {
1442444422808:c2 = as.integer(background %in% c2)
1442444422809:oo = NULL
1442444422809:if (sum(c2) > 0) {
1442444422809:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442444422809:if (ct[1,1] >= min.count) {
1442444422810:fet = fisher.test(ct)
1442444422810:#oo = list(p=fet$p.value, OR=fet$estimate)
1442444422810:#oo = as.numeric(fet$estimate)
1442444422811:oo = log(fet$p.value)#[fet$p.value!=1.0]
1442444422811:}
1442444422811:}
1442444422812:oo
1442444422812:})
1442444422812:unlist(o)
1442444422813:}, mc.cores=NCPU)
1442444422813:}
1442444427641:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442444431065:print(predictions)
1442444657421:taxon.id <- "9606"
1442444665331:A <- GO
1442444675941:taxon.id = as.character(taxon.id)
1442444676812:At = A$annotation[[taxon.id]]
1442444678138:background = intersect(unique(unlist(At)), rownames(X))
1442444678397:r = top.correlated(X, subset=background, k=k)
1442444683440:k=50
1442444685618:r = top.correlated(X, subset=background, k=k)
1442445318198:c1 <- r[1]
1442445355649:c2 <- At[1]
1442445487140:c1 = as.integer(background %in% c1)
1442445507307:c1
1442445516340:sum(c1)
1442445526914:background
1442445545399:c2 = as.integer(background %in% c2)
1442445548931:sum(c2)
1442501557039:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442501557040:taxon.id = as.character(taxon.id)
1442501557040:At = A$annotation[[taxon.id]]
1442501557040:background = intersect(unique(unlist(At)), rownames(X))
1442501557041:r = top.correlated(X, subset=background, k=k)
1442501557041:mclapply(r[1:50], function(c1) {
1442501557041:c1 = as.integer(background %in% c1)
1442501557042:o = sapply(At[1:50], function(c2) {
1442501557042:c2 = as.integer(background %in% c2)
1442501557042:oo = NULL
1442501557042:if (sum(c2) > 0) {
1442501557043:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442501557043:if (ct[1,1] >= min.count) {
1442501557043:fet = fisher.test(ct)
1442501557044:#oo = list(p=fet$p.value, OR=fet$estimate)
1442501557044:#oo = as.numeric(fet$estimate)
1442501557044:#oo = log(fet$p.value)#[fet$p.value!=1.0]
1442501557045:oo<-fet
1442501557045:}
1442501557045:}
1442501557046:oo
1442501557046:})
1442501557046:unlist(o)
1442501557047:}, mc.cores=NCPU)
1442501557047:}
1442501590895:z <- predict.annotations.knn(Xp.q,GO,9606)
1442501603802:library(parallel)
1442501604008:library(limma)
1442501605766:NCPU = detectCores()
1442501605954:CACHE.DIR = "cache"
1442501606092:if (!dir.exists(CACHE.DIR)) {
1442501606317:dir.create(CACHE.DIR)
1442501606396:}
1442501613131:z <- predict.annotations.knn(Xp.q,GO,9606)
1442501622990:class(z)
1442501625404:class(z[1])
1442501628901:class(z[[1])
1442501630882:class(z[[1]])
1442501634636:z[[1]]
1442501692842:z[1][1]
1442502127081:r[1][1]
1442502378203:At[1]
1442502386863:At[2]
1442502995024:?table
1442503029326:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442503041968:sum(c1)
1442503043494:sum(c2)
1442503048933:length(c1)
1442503050342:length(c2)
1442503065267:c2[2]<-1
1442503069271:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442503090322:sum(c2)
1442503127467:table(c1,c2))[c("1","0"),c("1","0")
1442503131471:table(c1,c2))[c("1","0"),c("1","0")]
1442503140969:(table(c1,c2))[c("1","0"),c("1","0")]
1442503148319:table(c1,c2)
1442503299328:View(table(c1,c2))
1442503544247:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób contingency table
1442503570645:c1[4] <- 1
1442503578642:View(table(c1,c2))
1442503610875:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób contingency table
1442503616317:View(ct)
1442503859337:z[1][1]
1442504269792:fisher.test(ct)
1442504331045:fisher.test(ct)$p.value
1442504341560:log(fisher.test(ct)$p.value)
1442504449418:ct <- matrix(c(20,20), c(20,20))
1442504452442:log(fisher.test(ct)$p.value)
1442504462366:ct <- matrix(c(20,20), c(20,20), 2,2)
1442504463817:log(fisher.test(ct)$p.value)
1442504480693:ct <- matrix(c(1,1), c(1,1), 2,2)
1442504482442:log(fisher.test(ct)$p.value)
1442504488479:ct
1442504501278:ct <- matrix(c(1,1,1,1), 2,2)
1442504502192:ct
1442504504417:log(fisher.test(ct)$p.value)
1442504518242:ct <- matrix(c(100,1,100,1), 2,2)
1442504519125:log(fisher.test(ct)$p.value)
1442504528942:ct <- matrix(c(100,100,100,100), 2,2)
1442504530518:log(fisher.test(ct)$p.value)
1442504543549:ct <- matrix(c(100,100,0,10), 2,2)
1442504545003:log(fisher.test(ct)$p.value)
1442504549741:ct
1442504590549:fisher.test(ct)$p.value
1442504605242:log(fisher.test(ct)$p.value), fisher.test(ct)$p.value
1442504610167:c(log(fisher.test(ct)$p.value), fisher.test(ct)$p.value)
1442504635446:ct <- matrix(c(0,0,100,100), 2,2)
1442504636792:ct <- matrix(c(0,0,100,100), 2,2)
1442504637442:c(log(fisher.test(ct)$p.value), fisher.test(ct)$p.value)
1442504653173:ct <- matrix(c(10,10,0,0), 2,2)
1442504653669:c(log(fisher.test(ct)$p.value), fisher.test(ct)$p.value)
1442504672417:ct <- matrix(c(100,10,100,10), 2,2)
1442504673278:c(log(fisher.test(ct)$p.value), fisher.test(ct)$p.value)
1442504678778:ct <- matrix(c(100,10,10,100), 2,2)
1442504679903:c(log(fisher.test(ct)$p.value), fisher.test(ct)$p.value)
1442504719998:ct <- matrix(c(10,100,100,10), 2,2)
1442504721445:ct <- matrix(c(10,100,100,10), 2,2)
1442504722126:c(log(fisher.test(ct)$p.value), fisher.test(ct)$p.value)
1442504878417:c(log(fisher.test(ct)$p.value), fisher.test(ct))
1442505143902:summary(GO)
1442505157242:GO$temrs
1442505160392:GO$terms
1442505640847:summary(GO)
1442505653577:summary(GO$terms)
1442506106951:ct <- matrix(c(10,100,100,10), 2)
1442506112205:fisher.test((ct))
1442506133977:ct <- matrix(c(100,100,100,100), 2); fisher.test(ct)
1442506168777:ct <- matrix(c(100,100,10,10), 2); fisher.test(ct)
1442506181683:ct <- matrix(c(10,100,10,100), 2); fisher.test(ct)
1442506186042:ct <- matrix(c(10,100,100,10), 2); fisher.test(ct)
1442506194767:ct
1442506236333:ct <- matrix(c(100,10,10,100), 2); fisher.test(ct)
1442506280392:log(95)
1442506283400:log(0.1)
1442506888283:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz", path)
1442506912367:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz", "gene_info.gz")
1442507104317:conn <- gzfile("gene_info.gz", open="r")
1442507150618:gene.info <- read.table(conn, sep="\t")
1442507156894:gene.info <- read.table(conn, skip=1sep="\t")
1442507159594:gene.info <- read.table(conn, skip=1,sep="\t")
1442507193546:close(conn)
1442507219128:close(conn)
1442507225217:rm(conn)
1442507322409:predictions[1]
1442507338483:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442507338483:taxon.id = as.character(taxon.id)
1442507338483:At = A$annotation[[taxon.id]]
1442507338484:background = intersect(unique(unlist(At)), rownames(X))
1442507338484:r = top.correlated(X, subset=background, k=k)
1442507338484:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442507338485:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442507338485:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442507338485:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442507338485:oo = NULL
1442507338486:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442507338486:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442507338486:if (ct[1,1] >= min.count) {
1442507338487:fet = fisher.test(ct)
1442507338487:#oo = list(p=fet$p.value, OR=fet$estimate)
1442507338487:#oo = as.numeric(fet$estimate)
1442507338487:#oo = log(fet$p.value)#[fet$p.value!=1.0]
1442507338488:oo<-fet
1442507338488:}
1442507338488:}
1442507338489:oo
1442507338489:})
1442507338489:unlist(o)
1442507338489:}, mc.cores=NCPU)
1442507338490:}
1442507369417:preditions.all <- predict.annotations.knn(Xp.q, GO, 9606)
1442507379696:library(parallel)
1442507379850:library(limma)
1442507386817:preditions.all <- predict.annotations.knn(Xp.q, GO, 9606)
1442507400067:predictions.all[1]
1442507412642:predictions.all <- preditions.all
1442507420617:rm(preditions.all)
1442507429372:predictions.all[1]
1442507631719:if (!file.exists(info.path)) {
1442507631719:path = file.path(CACHE.DIR, "gene_info.gz")
1442507631720:if (!file.exists(path)) {
1442507631720:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz", path)
1442507631720:}
1442507631720:h = gzfile(path, open="r")
1442507631721:o = read.table(h, skip=1, sep="\t")
1442507631721:}
1442507635901:info.path = file.path(CACHE.DIR, "gene_info.rda")
1442507635902:if (!file.exists(info.path)) {
1442507635902:path = file.path(CACHE.DIR, "gene_info.gz")
1442507635902:if (!file.exists(path)) {
1442507635902:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz", path)
1442507635903:}
1442507635903:h = gzfile(path, open="r")
1442507635904:o = read.table(h, skip=1, sep="\t")
1442507635904:}
1442507750573:o = read.table(h, skip=1, sep="\t")
1442507761367:o = read.table(h, skip=1\)
1442507767909:o = read.table(h)
1442507791642:o = read.table(h, skip=1000)
1442507989587:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442507989588:taxon.id = as.character(taxon.id)
1442507989588:At = A$annotation[[taxon.id]]
1442507989588:background = intersect(unique(unlist(At)), rownames(X))
1442507989588:r = top.correlated(X, subset=background, k=k)
1442507989589:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442507989589:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442507989589:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442507989589:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442507989590:oo = NULL
1442507989590:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442507989590:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442507989590:if (ct[1,1] >= min.count) {
1442507989591:fet = fisher.test(ct)
1442507989591:oo = list(p=fet$p.value, OR=fet$estimate)
1442507989591:#oo = as.numeric(fet$estimate)
1442507989592:#oo = log(fet$p.value)#[fet$p.value!=1.0]
1442507989592:#oo<-fet
1442507989592:}
1442507989593:}
1442507989593:oo
1442507989593:})
1442507989593:unlist(o)
1442507989594:}, mc.cores=NCPU)
1442507989594:}
1442508041536:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442508041536:taxon.id = as.character(taxon.id)
1442508041536:At = A$annotation[[taxon.id]]
1442508041536:background = intersect(unique(unlist(At)), rownames(X))
1442508041536:r = top.correlated(X, subset=background, k=k)
1442508041537:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442508041537:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442508041537:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442508041538:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442508041538:oo = NULL
1442508041538:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442508041539:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442508041539:if (ct[1,1] >= min.count) {
1442508041539:fet = fisher.test(ct)
1442508041539:oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442508041540:#oo = as.numeric(fet$estimate)
1442508041540:#oo = log(fet$p.value)#[fet$p.value!=1.0]
1442508041540:#oo<-fet
1442508041541:}
1442508041541:}
1442508041541:oo
1442508041542:})
1442508041542:unlist(o)
1442508041542:}, mc.cores=NCPU)
1442508041543:}
1442508097317:ct <- matrix(c(100,10,10,100), 2); fisher.test(ct)
1442508098919:ct
1442508131467:ct <- matrix(c(10,100,100,10), 2); fisher.test(ct)
1442508174542:ct <- matrix(c(10,10,100,100), 2); fisher.test(ct)
1442508179267:ct
1442508196017:ct <- matrix(c(10,100,10,100), 2); fisher.test(ct)
1442508312748:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442508312749:taxon.id = as.character(taxon.id)
1442508312749:At = A$annotation[[taxon.id]]
1442508312749:background = intersect(unique(unlist(At)), rownames(X))
1442508312749:r = top.correlated(X, subset=background, k=k)
1442508312750:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442508312750:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442508312750:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442508312751:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442508312751:oo = NULL
1442508312751:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442508312752:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442508312752:if (ct[1,1] >= min.count) {
1442508312752:fet = fisher.test(ct)
1442508312753:oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442508312753:#oo = as.numeric(fet$estimate)
1442508312753:#oo = log(fet$p.value)#[fet$p.value!=1.0]
1442508312754:#oo<-fet
1442508312754:}
1442508312754:}
1442508312754:oo
1442508312755:})
1442508312755:unlist(o)
1442508312756:}, mc.cores=NCPU)
1442508312756:}
1442508343880:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1442508397913:predictions[1][1]
1442508406517:summary(predictions)
1442508586867:which(rownames(X)=="221150")
1442508758190:top.correlated(X, subset="221150" k=1000)
1442508761573:top.correlated(X, subset="221150", k=1000)
1442509428680:unlist(predictions[1])
1442509438916:unlist(predictions[1][1])
1442509452789:(predictions[1])
1442509497246:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1442509509942:library(parallel)
1442509510109:library(limma)
1442509511606:NCPU = detectCores()
1442509511768:CACHE.DIR = "cache"
1442509511926:if (!dir.exists(CACHE.DIR)) {
1442509512036:dir.create(CACHE.DIR)
1442509512180:}
1442509525012:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442509525012:taxon.id = as.character(taxon.id)
1442509525012:At = A$annotation[[taxon.id]]
1442509525013:background = intersect(unique(unlist(At)), rownames(X))
1442509525013:r = top.correlated(X, subset=background, k=k)
1442509525013:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442509525014:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442509525014:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442509525014:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442509525014:oo = NULL
1442509525015:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442509525015:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442509525015:if (ct[1,1] >= min.count) {
1442509525015:fet = fisher.test(ct)
1442509525016:oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442509525016:#oo = as.numeric(fet$estimate)
1442509525016:#oo = log(fet$p.value)#[fet$p.value!=1.0]
1442509525017:#oo<-fet
1442509525017:}
1442509525017:}
1442509525018:oo
1442509525018:})
1442509525018:unlist(o)
1442509525019:}, mc.cores=NCPU)
1442509525019:}
1442509536409:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442509548011:unlist(predictions[1])
1442509565735:predictions[1]
1442509570499:predictions[1][1]
1442509577013:classs(predictions[1])
1442509579596:class(predictions[1])
1442509592629:class(predictions$`1890`[1])
1442509599464:predictions$`1890`[1]
1442509608834:predictions[1][1]
1442509615559:predictions[[1]]
1442509622527:class(predictions[[1]])
1442509631657:View(predictions[[1]])
1442509644600:View(predictions[[1]])
1442509933765:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442509933766:taxon.id = as.character(taxon.id)
1442509933766:At = A$annotation[[taxon.id]]
1442509933766:background = intersect(unique(unlist(At)), rownames(X))
1442509933766:r = top.correlated(X, subset=background, k=k)
1442509933767:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442509933767:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442509933767:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442509933768:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442509933768:oo = NULL
1442509933768:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442509933768:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442509933769:if (ct[1,1] >= min.count) {
1442509933769:fet = fisher.test(ct)
1442509933769:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442509933769:oo = list(as.numeric(fet$estimate), fet$p.value, lof(fet$p.value))
1442509933770:#oo<-fet
1442509933770:}
1442509933770:}
1442509933771:oo
1442509933771:})
1442509933771:unlist(o)
1442509933772:}, mc.cores=NCPU)
1442509933772:}
1442509939601:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442509961067:#######################################
1442509963541:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442509963541:taxon.id = as.character(taxon.id)
1442509963541:At = A$annotation[[taxon.id]]
1442509963541:background = intersect(unique(unlist(At)), rownames(X))
1442509963542:r = top.correlated(X, subset=background, k=k)
1442509963542:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442509963542:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442509963543:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442509963543:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442509963543:oo = NULL
1442509963544:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442509963544:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442509963544:if (ct[1,1] >= min.count) {
1442509963545:fet = fisher.test(ct)
1442509963545:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442509963545:oo = list(as.numeric(fet$estimate), fet$p.value, log(fet$p.value))
1442509963546:#oo<-fet
1442509963546:}
1442509963546:}
1442509963547:oo
1442509963547:})
1442509963548:unlist(o)
1442509963548:}, mc.cores=NCPU)
1442509963548:}
1442509966977:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442509976560:predictions[1]
1442509983043:predictions[2]
1442510009233:class(predictions[1])
1442510112108:predictions[2][1]
1442510114008:predictions[2][2]
1442510142364:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442510142364:taxon.id = as.character(taxon.id)
1442510142365:At = A$annotation[[taxon.id]]
1442510142365:background = intersect(unique(unlist(At)), rownames(X))
1442510142365:r = top.correlated(X, subset=background, k=k)
1442510142366:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442510142366:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442510142367:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442510142367:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442510142368:oo = NULL
1442510142368:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442510142368:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442510142369:if (ct[1,1] >= min.count) {
1442510142369:fet = fisher.test(ct)
1442510142370:oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442510142370:#oo<-fet
1442510142371:}
1442510142371:}
1442510142372:oo
1442510142372:})
1442510142373:unlist(o)
1442510142373:}, mc.cores=NCPU)
1442510142374:}
1442510148784:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442510155120:predictions[1][1]
1442510159248:predictions[1][2]
1442510313860:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442510313860:taxon.id = as.character(taxon.id)
1442510313860:At = A$annotation[[taxon.id]]
1442510313861:background = intersect(unique(unlist(At)), rownames(X))
1442510313861:r = top.correlated(X, subset=background, k=k)
1442510313861:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442510313862:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442510313862:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442510313862:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442510313862:oo = NULL
1442510313863:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442510313863:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442510313863:if (ct[1,1] >= min.count) {
1442510313863:fet = fisher.test(ct)
1442510313864:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442510313864:oo = fet$p.value
1442510313864:}
1442510313865:}
1442510313865:oo
1442510313865:})
1442510313866:unlist(o)
1442510313866:}, mc.cores=NCPU)
1442510313866:}
1442510313867:### Get Go terms associated with each tx
1442510313867:assign.terms <-function(predictions, A) {
1442510313867:p.val <- mclapply((predictions), function(tx) {
1442510313868:}, mc.mores=NCPU)
1442510313868:}
1442510317267:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442510410165:predictions[1]>0.5
1442510418092:unlist(predictions[1])>0.5
1442510441067:unlist(predictions[1])<0.05
1442510444882:unlist(predictions[1])<0.5
1442510504696:assign.terms <-function(predictions, A) {
1442510504696:o <- mclapply((predictions), function(tx) {
1442510504696:oo <- tx[unlist(tx) < 0.05]
1442510504697:}, mc.mores=NCPU)
1442510504697:}
1442510519817:assign.terms(predictions, A)
1442510536817:tx <- predictions[1]
1442510539929:oo <- tx[unlist(tx) < 0.05]
1442510647617:ska.cor <- top.correlated(X, subset="221150", k=100)
1442510814641:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[1:3000]
1442510822135:Xp.q = Xp[q,]
1442510870751:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1442510878430:library(parallel)
1442510878600:library(limma)
1442510879261:# Globals
1442510879387:NCPU = detectCores()
1442510879539:CACHE.DIR = "cache"
1442510879681:if (!dir.exists(CACHE.DIR)) {
1442510879853:dir.create(CACHE.DIR)
1442510880165:}
1442510889313:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1442510933772:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442510933772:taxon.id = as.character(taxon.id)
1442510933772:At = A$annotation[[taxon.id]]
1442510933772:background = intersect(unique(unlist(At)), rownames(X))
1442510933773:r = top.correlated(X, subset=background, k=k)
1442510933773:mclapply(r, function(c1) { # dla każdego transkryptu
1442510933773:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442510933774:o = sapply(At[1:100], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442510933774:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442510933774:oo = NULL
1442510933775:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442510933775:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442510933775:if (ct[1,1] >= min.count) {
1442510933776:fet = fisher.test(ct)
1442510933776:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442510933776:oo = fet$p.value
1442510933777:}
1442510933777:}
1442510933777:oo
1442510933778:})
1442510933778:unlist(o)
1442510933778:# o
1442510933778:}, mc.cores=NCPU)
1442510933779:}
1442510935814:predictions <- predict.annotations.knn(Xp.q, GO, 9606)
1442511184038:predictions$`221150`
1442511341984:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2000:3000]
1442511342224:Xp.q = Xp[q,]
1442511357439:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442511357439:taxon.id = as.character(taxon.id)
1442511357439:At = A$annotation[[taxon.id]]
1442511357440:background = intersect(unique(unlist(At)), rownames(X))
1442511357440:r = top.correlated(X, subset=background, k=k)
1442511357441:mclapply(r, function(c1) { # dla każdego transkryptu
1442511357441:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442511357441:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442511357442:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442511357442:oo = NULL
1442511357442:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442511357443:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442511357443:if (ct[1,1] >= min.count) {
1442511357443:fet = fisher.test(ct)
1442511357443:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442511357444:oo = fet$p.value
1442511357444:}
1442511357444:}
1442511357445:oo
1442511357445:})
1442511357445:unlist(o)
1442511357446:# o
1442511357446:}, mc.cores=NCPU)
1442511357446:}
1442511382829:which(rownames(Xp.q)=="221150")
1442511397664:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2000:2100]
1442511398320:Xp.q = Xp[q,]
1442511398853:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442511432965:predictions$`221150`
1442511524655:assign.terms <-function(predictions, A) {
1442511524655:o <- mclapply((predictions), function(tx) {
1442511524655:oo <- tx[unlist(tx) < 0.05]
1442511524656:}, mc.mores=NCPU)
1442511524656:}
1442511534994:assign.terms(predicitons, A)
1442511543496:assign.terms(predicitons, GO)
1442511559215:assign.terms(predictions, GO)
1442511583910:predictions[1] <0.05
1442511604568:unlist(predictions[1]) <0.05
1442511628002:predictions[unlist(predictions[1]) <0.05]
1442511751531:unlist(predictions[1]) <0.05
1442511757724:sum(unlist(predictions[1]) <0.05)
1442511884222:hist(colSums(e))
1442511903561:hist(colSums(e-colMeans(e)))
1442511917082:hist(colSums(e-mean(e)))
1442511919273:hist(colSums(e))
1442512005129:class(unlist(predictions[1]) <0.05)
1442512024128:(predictions[1])[unlist(predictions[1]) <0.05)]
1442512035930:z<- predictions[1]
1442512045628:z[unlist(z) <0.05)]
1442512049937:z[unlist(z) <0.05]
1442512056168:unlist(z)[unlist(z) <0.05]
1442512233710:### Get Go terms associated with each tx
1442512233710:assign.terms <-function(predictions, A) {
1442512233710:o <- mclapply((predictions), function(tx) {
1442512233710:oo <- unlist(tx)[unlist(tx) < 0.05]
1442512233711:}, mc.mores=NCPU)
1442512233711:}
1442512331701:?unlist
1442512358275:### Get Go terms associated with each tx
1442512358276:assign.terms <-function(predictions, A) {
1442512358276:o <- mclapply((predictions), function(tx) {
1442512358276:oo <- unlist(tx, use.names=F)[unlist(tx, use.names=F) < 0.05]
1442512358277:}, mc.mores=NCPU)
1442512358278:}
1442512407078:z <- assign.terms(predictions, GO)
1442512450747:### Get Go terms associated with each tx
1442512450747:assign.terms <-function(predictions, A) {
1442512450747:o <- mclapply((predictions), function(tx) {
1442512450748:oo <- unlist(tx)[unlist(tx) < 0.05]
1442512450748:}, mc.mores=NCPU)
1442512450748:}
1442512454327:z <- assign.terms(predictions, GO)
1442512479093:tx <- predictions[1]
1442512483476:oo <- unlist(tx, use.names=F)[unlist(tx, use.names=F) < 0.05]
1442512510848:oo <- names(tx)[unlist(tx) < 0.05]
1442512634873:class(tx)
1442512637567:class(tx[1])
1442512641167:tx[1]
1442512644910:tx
1442512718767:tx[1][1]
1442512722593:tx[[1]]
1442512731079:class(tx[[1]])
1442512741617:names(tx[[1]])
1442512759617:### Get Go terms associated with each tx
1442512759617:assign.terms <-function(predictions, A) {
1442512759617:o <- mclapply((predictions), function(tx) {
1442512759618:oo <- class(oo)
1442512759618:#(tx)[unlist(tx) < 0.05]
1442512759618:}, mc.mores=NCPU)
1442512759619:}
1442512781824:assign.terms(predictions[1:2], GO)
1442512811704:predictions$221150
1442512819067:predictions$`221150`
1442512823867:ska <- predictions$`221150`
1442512879632:### Get Go terms associated with each tx
1442512879781:assign.terms <-function(predictions, A) {
1442512879933:o <- mclapply((predictions), function(tx) {
1442512880076:oo <- names(tx)
1442512880227:#(tx)[unlist(tx) < 0.05]
1442512880371:}, mc.mores=NCPU)
1442512880527:}
1442512880713:#########
1442512900551:z <- assign.terms(predictions, GO)
1442512949375:### Get Go terms associated with each tx
1442512949376:assign.terms <-function(predictions, A) {
1442512949376:o <- mclapply((predictions), function(tx) {
1442512949376:oo <- names(tx)
1442512949376:#(tx)[unlist(tx) < 0.05]
1442512949376:oo
1442512949377:}, mc.mores=NCPU)
1442512949377:}
1442512955750:z <- assign.terms(predictions, GO)
1442512972250:### Get Go terms associated with each tx
1442512972251:assign.terms <-function(predictions, A) {
1442512972251:o <- mclapply((predictions), function(tx) {
1442512972251:#oo <- names(tx)
1442512972251:#(tx)[unlist(tx) < 0.05]
1442512972251:tx
1442512972252:}, mc.mores=NCPU)
1442512972252:}
1442512974300:z <- assign.terms(predictions, GO)
1442513006903:### Get Go terms associated with each tx
1442513006903:assign.terms <- function(predictions, A) {
1442513006904:o <- mclapply((predictions), function(tx) {
1442513006904:#oo <- names(tx)
1442513006904:#(tx)[unlist(tx) < 0.05]
1442513006904:tx
1442513006905:}, mc.mores=NCPU)
1442513006905:o
1442513006905:}
1442513012842:z <- assign.terms(predictions, GO)
1442513027092:ska <- predictions$`221150`
1442513041867:ska[ska<0.05]
1442513090842:as.data.frame(ska[ska<0.05])
1442513121732:ska.d <- as.data.frame(ska[ska<0.05])
1442513152978:ska.d$GO.id <- rownames(ska.d)
1442513189389:ska.d
1442513212155:GO$terms[[9606]]
1442513254867:class(GO$terms)
1442513268617:head(GO$terms)
1442513300541:head(name(GO$terms)
1442513300542:head(names(GO$terms)
1442513306242:head(names(GO$terms)
1442513308551:)
1442513378168:ska.e <- merge(ska.d, as.data.frame(GO$terms), all=F)
1442513384617:View(ska.e)
1442513409593:ska.d
1442513445825:GO.terms <- as.data.frame(GO$terms)
1442513472303:GO.terms$GO.id <- rownames(GO.terms)
1442513474817:View(GO.terms)
1442513481892:ska.e <- merge(ska.d, as.data.frame(GO$terms), all=F)
1442513490842:ska.e <- merge(ska.d, as.data.frame(GO$terms), all.x=T)
1442513495772:ska.e <- merge(ska.d, as.data.frame(GO$terms), all.y=F)
1442513509903:ska.d(GO.id)
1442513516717:ska.d$GO.id
1442513539622:ska.d$GO.id <- as.character(ska.d$GO.id)
1442513560142:GO.terms$GO.id <- as.character(GO.terms$GO.id)
1442513565567:ska.e <- merge(ska.d, as.data.frame(GO$terms), all=F)
1442513579119:ska.e <- merge(ska.d, GO.terms, all=F)
1442513583192:View(ska.e)
1442514823998:sign(1)
1442514826517:sign(23)
1442514833217:sign(-2)
1442515055142:?og
1442515056817:?log
1442515090056:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515090056:taxon.id = as.character(taxon.id)
1442515090056:At = A$annotation[[taxon.id]]
1442515090057:background = intersect(unique(unlist(At)), rownames(X))
1442515090057:r = top.correlated(X, subset=background, k=k)
1442515090057:mclapply(r, function(c1) { # dla każdego transkryptu
1442515090057:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515090058:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515090058:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515090058:oo = NULL
1442515090059:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515090059:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515090059:if (ct[1,1] >= min.count) {
1442515090059:fet = fisher.test(ct)
1442515090060:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515090060:oo = sign(log10(fet$estimate) * fet$p.value)
1442515090060:}
1442515090061:}
1442515090061:oo
1442515090061:})
1442515090062:unlist(o)
1442515090062:}, mc.cores=NCPU)
1442515090062:}
1442515124178:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515199192:ska <- predictions$`221150`
1442515233746:ska.d <- as.data.frame(ska[ska<0.05])
1442515267374:ska.d$GO.id <- rownames(ska.d)
1442515277524:ska.d$GO.id <- as.character(rownames(ska.d))
1442515293750:ska.e <- merge(ska.d, GO.terms, all=F)
1442515300095:View(ska.d)
1442515318624:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515318625:taxon.id = as.character(taxon.id)
1442515318625:At = A$annotation[[taxon.id]]
1442515318625:background = intersect(unique(unlist(At)), rownames(X))
1442515318625:r = top.correlated(X, subset=background, k=k)
1442515318626:mclapply(r, function(c1) { # dla każdego transkryptu
1442515318626:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515318626:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515318626:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515318627:oo = NULL
1442515318627:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515318627:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515318628:if (ct[1,1] >= min.count) {
1442515318628:fet = fisher.test(ct)
1442515318628:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515318628:oo = sign(log10(fet$estimate) * fet$p.value)
1442515318629:}
1442515318629:}
1442515318629:oo
1442515318630:})
1442515318630:unlist(o)
1442515318630:}, mc.cores=NCPU)
1442515318631:}
1442515418337:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515418338:taxon.id = as.character(taxon.id)
1442515418338:At = A$annotation[[taxon.id]]
1442515418338:background = intersect(unique(unlist(At)), rownames(X))
1442515418338:r = top.correlated(X, subset=background, k=k)
1442515418339:mclapply(r, function(c1) { # dla każdego transkryptu
1442515418339:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515418339:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515418340:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515418340:oo = NULL
1442515418340:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515418340:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515418341:if (ct[1,1] >= min.count) {
1442515418341:fet = fisher.test(ct)
1442515418341:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515418342:oo = sign(log10(fet$estimate) * fet$p.value)
1442515418342:}
1442515418342:}
1442515418342:oo
1442515418343:})
1442515418343:unlist(o)
1442515418343:}, mc.cores=NCPU)
1442515418344:}
1442515425109:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515438249:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2050]
1442515439154:Xp.q = Xp[q,]
1442515440273:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515450073:ska <- predictions$`221150`
1442515472552:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2051:2100]
1442515473243:Xp.q = Xp[q,]
1442515473467:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515480845:ska <- predictions$`221150`
1442515502922:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515502922:taxon.id = as.character(taxon.id)
1442515502923:At = A$annotation[[taxon.id]]
1442515502923:background = intersect(unique(unlist(At)), rownames(X))
1442515502923:r = top.correlated(X, subset=background, k=k)
1442515502924:mclapply(r, function(c1) { # dla każdego transkryptu
1442515502924:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515502924:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515502925:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515502925:oo = NULL
1442515502925:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515502925:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515502926:if (ct[1,1] >= min.count) {
1442515502926:fet = fisher.test(ct)
1442515502926:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515502927:oo = sign(log10(fet$estimate)) * fet$p.value
1442515502927:}
1442515502927:}
1442515502928:oo
1442515502928:})
1442515502928:unlist(o)
1442515502929:}, mc.cores=NCPU)
1442515502929:}
1442515509482:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515537944:ska <- predictions$`221150`
1442515546167:ska
1442515581792:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515581792:taxon.id = as.character(taxon.id)
1442515581792:At = A$annotation[[taxon.id]]
1442515581792:background = intersect(unique(unlist(At)), rownames(X))
1442515581793:r = top.correlated(X, subset=background, k=k)
1442515581793:mclapply(r, function(c1) { # dla każdego transkryptu
1442515581793:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515581794:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515581794:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515581794:oo = NULL
1442515581794:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515581795:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515581795:if (ct[1,1] >= min.count) {
1442515581795:fet = fisher.test(ct)
1442515581796:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515581796:oo = paste(sign(log10(fet$estimate)), fet$p.value)
1442515581796:}
1442515581797:}
1442515581797:oo
1442515581797:})
1442515581797:unlist(o)
1442515581798:}, mc.cores=NCPU)
1442515581798:}
1442515585130:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515604672:ska <- predictions$`221150`
1442515606667:ska
1442515702705:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515702705:taxon.id = as.character(taxon.id)
1442515702706:At = A$annotation[[taxon.id]]
1442515702706:background = intersect(unique(unlist(At)), rownames(X))
1442515702706:r = top.correlated(X, subset=background, k=k)
1442515702707:mclapply(r, function(c1) { # dla każdego transkryptu
1442515702707:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515702707:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515702707:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515702708:oo = NULL
1442515702708:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515702708:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515702708:if (ct[1,1] >= min.count) {
1442515702709:fet = fisher.test(ct)
1442515702709:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515702709:#oo = paste(sign(log10(fet$estimate)), fet$p.value)
1442515702710:oo = fet$p.value
1442515702710:}
1442515702710:}
1442515702710:oo
1442515702711:})
1442515702711:unlist(o)
1442515702711:}, mc.cores=NCPU)
1442515702712:}
1442515709017:ska <- predictions$`221150`
1442515714101:ska
1442515721901:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515721901:taxon.id = as.character(taxon.id)
1442515721902:At = A$annotation[[taxon.id]]
1442515721902:background = intersect(unique(unlist(At)), rownames(X))
1442515721902:r = top.correlated(X, subset=background, k=k)
1442515721903:mclapply(r, function(c1) { # dla każdego transkryptu
1442515721903:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515721903:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515721903:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515721904:oo = NULL
1442515721904:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515721904:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515721905:if (ct[1,1] >= min.count) {
1442515721905:fet = fisher.test(ct)
1442515721905:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515721905:#oo = paste(sign(log10(fet$estimate)), fet$p.value)
1442515721906:oo = fet$p.value
1442515721906:}
1442515721906:}
1442515721907:oo
1442515721907:})
1442515721907:unlist(o)
1442515721908:}, mc.cores=NCPU)
1442515721908:}
1442515727946:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442515727947:taxon.id = as.character(taxon.id)
1442515727947:At = A$annotation[[taxon.id]]
1442515727947:background = intersect(unique(unlist(At)), rownames(X))
1442515727947:r = top.correlated(X, subset=background, k=k)
1442515727948:mclapply(r, function(c1) { # dla każdego transkryptu
1442515727948:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442515727948:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442515727949:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442515727949:oo = NULL
1442515727949:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442515727950:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442515727950:if (ct[1,1] >= min.count) {
1442515727950:fet = fisher.test(ct)
1442515727950:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442515727951:#oo = paste(sign(log10(fet$estimate)), fet$p.value)
1442515727951:oo = fet$p.value
1442515727951:}
1442515727952:}
1442515727952:oo
1442515727952:})
1442515727953:unlist(o)
1442515727953:}, mc.cores=NCPU)
1442515727953:}
1442515734470:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515765201:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515774773:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2051:2070]
1442515774980:Xp.q = Xp[q,]
1442515775543:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515783450:ska <- predictions$`221150`
1442515821078:print(predictions)
1442515833970:View(predict.annotations.knn)
1442515840642:View(predict.annotations.knn)
1442515894256:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2051:2150]
1442515894646:Xp.q = Xp[q,]
1442515895849:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442515913051:ska <- predictions$`221150`
1442515915022:ska
1442515938844:ska.d <- as.data.frame(ska[ska<0.05])
1442515943492:View(ska.d)
1442515991655:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2100]
1442515992422:Xp.q = Xp[q,]
1442515992716:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442516008027:print(predictions)
1442516011652:ska <- predictions$`221150`
1442516012668:ska.d <- as.data.frame(ska[ska<0.05])
1442516017302:View(ska.d)
1442516092542:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442516092543:taxon.id = as.character(taxon.id)
1442516092543:At = A$annotation[[taxon.id]]
1442516092543:background = intersect(unique(unlist(At)), rownames(X))
1442516092543:r = top.correlated(X, subset=background, k=k)
1442516092544:mclapply(r, function(c1) { # dla każdego transkryptu
1442516092544:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442516092544:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442516092544:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442516092545:oo = NULL
1442516092545:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442516092545:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442516092546:if (ct[1,1] >= min.count) {
1442516092546:fet = fisher.test(ct)
1442516092546:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442516092546:oo = sign(log10(fet$estimate)) * fet$p.value
1442516092547:#oo = fet$p.value
1442516092547:}
1442516092547:}
1442516092548:oo
1442516092548:})
1442516092548:unlist(o)
1442516092549:}, mc.cores=NCPU)
1442516092549:}
1442516105908:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442516126426:ska <- predictions$`221150`
1442516126870:ska.d <- as.data.frame(ska[ska<0.05])
1442516145367:ska
1442516165073:ska.d <- as.data.frame(ska[ska<0.05])
1442516180206:ska.d
1442516201570:ska.d <- as.data.frame(ska[ska<0.05& ska>0]) #enrichment not depletion
1442516204170:ska.d
1442516258074:oo = paste((log10(fet$estimate)), fet$p.value)
1442516312796:ska.d <- as.data.frame(ska[ska>0.05& ska<0]) #enrichment not depletion
1442516315242:ska.d
1442516333376:ska.d <- as.data.frame(ska[ska<0.05& ska>0]) #enrichment not depletion
1442516344428:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442516344428:taxon.id = as.character(taxon.id)
1442516344429:At = A$annotation[[taxon.id]]
1442516344429:background = intersect(unique(unlist(At)), rownames(X))
1442516344429:r = top.correlated(X, subset=background, k=k)
1442516344430:mclapply(r, function(c1) { # dla każdego transkryptu
1442516344430:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442516344430:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442516344430:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442516344431:oo = NULL
1442516344431:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442516344431:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442516344432:if (ct[1,1] >= min.count) {
1442516344432:fet = fisher.test(ct)
1442516344432:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442516344433:#oo = sign(log10(fet$estimate)) * fet$p.value
1442516344433:oo = fet$p.value
1442516344433:}
1442516344434:}
1442516344434:oo
1442516344434:})
1442516344435:unlist(o)
1442516344435:}, mc.cores=NCPU)
1442516344435:}
1442516351073:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442516366392:ska <- predictions$`221150`
1442516367069:ska.d <- as.data.frame(ska[ska<0.05& ska>0]) #enrichment not depletion
1442516387505:View(ska.d)
1442516482174:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2300]
1442516482602:Xp.q = Xp[q,]
1442516483819:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442516548805:ska <- predictions$`221150`
1442516549642:ska.d <- as.data.frame(ska[ska<0.05 & ska>0]) #enrichment not depletion
1442516552870:View(ska.d)
1442516566978:ska.d$GO.id <- as.character(rownames(ska.d))
1442516568154:ska.e <- merge(ska.d, GO.terms, all=F)
1442516570347:View(ska.e)
1442516669193:names(ska.e) <- c("GO.ID", "signed.p", "GO.term")
1442516701857:ska.e
1442516791342:predictions = predict.annotations.knn(Xp, GO, 9606)
1442517065166:nrow(X)
1442517100642:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2300]
1442517101151:Xp.q = Xp[q,]
1442517112872:predictions = predict.annotations.knn(Xp.q, GO, 9606, k=100)
1442517116377:Q
1442517120480:library(parallel)
1442517120611:library(limma)
1442517121782:NCPU = detectCores()
1442517126120:predictions = predict.annotations.knn(Xp.q, GO, 9606, k=100)
1442517137200:ska <- predictions$`221150`
1442517141269:ska
1442517157338:preprocess = function(X) {
1442517157338:# remove genes & samples w/ zero variance
1442517157338:X = X[apply(X,1,var) > 0,]
1442517157338:X = X[,apply(X,2,var) > 0]
1442517157338:stopifnot(nrow(X) > 0)
1442517157339:stopifnot(ncol(X) > 0)
1442517157339:# quantile normalize
1442517157339:normalizeBetweenArrays(as.matrix(X))
1442517157340:}
1442517157340:##############
1442517157341:# Correlations
1442517157341:##############
1442517157341:# the slow version, for matrices containing NaN, could be used as a fallback
1442517157341:#top.correlated = function(X, k=50) {
1442517157342:#    k = min(k,nrow(X)-1)
1442517157342:#    Xt = t(X)
1442517157342:#    o = mclapply(colnames(Xt), function(ix) {
1442517157342:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1442517157342:#        r = r[!is.na(r)]
1442517157343:#        o = NULL
1442517157343:#        if (length(r) >= k) {
1442517157343:#            o = names(r)[order(r, decreasing=T)]
1442517157343:#        }
1442517157343:#        o
1442517157344:#    }, mc.cores=NCPU)
1442517157344:#    names(o) = colnames(Xt)
1442517157344:#    o
1442517157344:#}
1442517157344:# 221150
1442517157345:top.correlated = function(X, subset="NULL", k=50) {
1442517157345:k = min(k, nrow(X) - 1)
1442517157345:X = as.matrix(X)
1442517157345:stopifnot(sum(is.na(X)) == 0)
1442517157346:Xs = t(apply(X,1,scale))
1442517157346:o = mclapply(1:nrow(Xs), function(i) {
1442517157346:if ((i > 0) && (i %% 100 == 0)) {
1442517157346:sprintf("Calculating correlations for row: %d", i)
1442517157347:}
1442517157347:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442517157347:oo = names(r)[order(r, decreasing=T)]
1442517157347:if (!is.null(subset)) {
1442517157348:oo = oo[oo %in% subset]
1442517157348:}
1442517157348:oo[1:min(k, length(oo))]
1442517157348:}, mc.cores=NCPU)
1442517157349:names(o) = rownames(Xs)
1442517157349:o
1442517157349:}
1442517157350:#################################################
1442517157350:# Gene Ontology names and mappings (for all taxa)
1442517157350:#################################################
1442517157350:go.path = file.path(CACHE.DIR, "GO.rda")
1442517157351:if (!file.exists(go.path)) {
1442517157351:path = file.path(CACHE.DIR, "gene2go.gz")
1442517157351:if (!file.exists(path)) {
1442517157351:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2go.gz", path)
1442517157352:}
1442517157352:h = gzfile(path, open="r")
1442517157352:o = read.table(h, skip=1, sep="\t",
1442517157352:col.names=c("Taxon ID", "Gene ID", "Term ID", "Evidence", "Qualifier", "Term Name", "PMID", "Category"))
1442517157353:nv = o$Term.Name
1442517157353:names(nv) = o$Term.ID
1442517157353:GO = list(
1442517157353:table=o,
1442517157354:terms=nv[unique(names(nv))],
1442517157354:annotation=by(o, o$Taxon.ID,
1442517157354:function(ts) {
1442517157354:by(ts, ts$Term.ID, function(x) {
1442517157355:unique(x$Gene.ID)
1442517157355:})
1442517157355:}))
1442517157355:save(GO, file=go.path)
1442517157356:} else {
1442517157356:if (!("GO" %in% ls())) {
1442517157356:load(go.path)
1442517157357:}
1442517157357:}
1442517157358:#gene.info\
1442517157358:info.path = file.path(CACHE.DIR, "gene_info.rda")
1442517157359:if (!file.exists(info.path)) {
1442517157359:path = file.path(CACHE.DIR, "gene_info.gz")
1442517157359:if (!file.exists(path)) {
1442517157359:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz", path)
1442517157359:}
1442517157360:h = gzfile(path, open="r")
1442517157360:o = read.table(h, skip=1, sep="\t")
1442517157360:}
1442517157388:#   # col.names=c("Taxon ID", "Gene ID", "Term ID", "Evidence", "Qualifier", "Term Name", "PMID", "Category"))
1442517157388:#   o <- o[,1,2,3,5,6,9,10,12]
1442517157388:#
1442517157388:#   nv = o$Term.Name
1442517157388:#   names(nv) = o$Term.ID
1442517157389:#
1442517157389:#   gene.info = list(
1442517157389:#     table=o,
1442517157389:#     terms=nv[unique(names(nv))],
1442517157389:#     annotation=by(o, o$Taxon.ID,
1442517157390:#                   function(ts) {
1442517157390:#                     by(ts, ts$Term.ID, function(x) {
1442517157390:#                       unique(x$Gene.ID)
1442517157390:#                     })
1442517157390:#                   }))
1442517157391:#   save(GO, file=info.path)
1442517157391:# } else {
1442517157391:#   if (!("GO" %in% ls())) {
1442517157391:#     load(info.path)
1442517157391:#   }
1442517157391:# }
1442517157392:#######################################
1442517157392:# Function prediction by kNN FET method
1442517157392:#######################################
1442517157392:# could improve to output p-value, odds ratio ("estimate") + log(OR), and N ct(1,1) for each term-gene pair
1442517157393:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442517157393:taxon.id = as.character(taxon.id)
1442517157393:At = A$annotation[[taxon.id]]
1442517157393:background = intersect(unique(unlist(At)), rownames(X))
1442517157393:r = top.correlated(X, subset=background, k=k)
1442517157394:mclapply(r, function(c1) { # dla każdego transkryptu
1442517157394:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442517157394:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442517157395:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442517157395:oo = NULL
1442517157395:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442517157395:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442517157396:if (ct[1,1] >= min.count) {
1442517157396:fet = fisher.test(ct)
1442517157396:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442517157396:oo = sign(log10(fet$estimate)) * fet$p.value
1442517157397:#oo = fet$p.value
1442517157397:}
1442517157397:}
1442517157398:oo
1442517157398:})
1442517157398:unlist(o)
1442517157398:}, mc.cores=NCPU)
1442517157399:}
1442517164975:predictions = predict.annotations.knn(Xp.q, GO, 9606, k=100)
1442517236176:ska <- predictions$`221150`
1442517239886:ska
1442517260469:ska.d <- as.data.frame(ska[ska<0.05 & ska>0]) #enrichment not depletion
1442517263495:ska.d
1442517299545:predictions = predict.annotations.knn(Xp.q, GO, 9606, k=50)
1442517362642:ska.d <- as.data.frame(ska[ska<0.05 & ska>0]) #enrichment not depletion
1442517364306:ska.d
1442517507867:q
1442517527599:dim(Xp)
1442517595860:plot(apply(e, 2, sum))
1442517613320:plot(sort(apply(e, 2, sum)))
1442517620600:plot(sort(apply(Xp, 2, sum)))
1442517628153:plot(sort(apply(Xp,1, sum)))
1442517657566:plot(sort(apply(e, 1, sum)))
1442517667280:plot(sort(apply(X, 1, sum)))
1442517696719:plot(scale(c(X)))
1442517722947:plot(scale(X))
1442517740176:plot(X[1],)
1442517744250:plot(X[1],X[2])
1442517772042:plot(scale(X), cex=.3)
1442517804702:plot(scale(X), cex=.1)
1442517808250:plot(scale(X), cex=.2)
1442517820742:plot(X, cex=.2)
1442517865217:plot(X[,1],X[,2], cex=.2)
1442517898500:plot(X[,1], cex=.2)
1442517908893:plot(X[,1],X[,2], cex=.2)
1442517947779:plot(sort(apply(X, 1, sum)), cex=.2)
1442517972276:dim(X)
1442517981356:plot(sort(apply(X, 2, sum)), cex=.2)
1442518003803:length(sort(apply(X, 2, sum)))
1442518040325:hist(sort(apply(X, 2, sum)))
1442518077869:hist((c(colMeans(X) - apply(X, 2, sum)))
1442518083717:hist((c(colMeans(X) - apply(X, 2, sum))))
1442518094167:hist((c(rowMeans(X) - apply(X, 2, sum))))
1442518125949:plot(X, cex=.2)
1442518132747:hist(X)
1442518139596:hist(as.numeric(X)
1442518193347:)
1442518202817:hist(as.numeric(matrix(X)))
1442518269868:hist(abs(apply(X, 2, sum)-colSums(X)))
1442518278592:hist(abs(colSums(X)-apply(X, 2, sum)))
1442518284192:?abs
1442518321342:hist(abs(colMeans(X)-apply(X, 2, sum)))
1442518336842:hist(abs(mean(X)-apply(X, 2, sum)))
1442518344949:hist(abs(c(mean(X))-apply(X, 2, sum)))
1442518354692:hist(abs(c(mean(colSums(X)))-apply(X, 2, sum)))
1442518386461:plot(sort(apply(X, 2, sum)), cex=.2)
1442518392376:plot(sort(apply(X, 1, sum)), cex=.2)
1442518601617:plot(Xp[,1:2)
1442518605842:plot(Xp[,1:2])
1442518623767:plot(Xp[,1:2], cex=.2)
1442518645967:plot(X[,1:2], cex=.2)
1442518661103:plot(Xp[,1:2], cex=.2)
1442518693842:plot(log(Xp[,1:2]), cex=.2)
1442518703125:plot(log2(Xp[,1:2]), cex=.2)
1442518790476:hist(X[,1])
1442519039517:plot(Xp[,1:2])
1442519046668:plot(Xp[,1:2], cex=.2)
1442519141617:?rlog
1442519147442:library(DESeq2)
1442519159017:?rlog
1442519164101:rlog(X)
1442519196417:Xl <- log2(Xp)
1442519216292:Xl.q <- Xl[q,]
1442519219801:predictions = predict.annotations.knn(Xp.q, GO, 9606, k=100)
1442519306743:predictions.l = predict.annotations.knn(Xl.q, GO, 9606)
1442520303670:ska
1442520373246:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442520373246:tx_input_list <- as.character(tx_input_list)
1442520373247:X <- t(X)
1442520373247:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442520373247:out <- mclapply(1:ncol(Xi),
1442520373248:function(i) { cor(X, Xi[,i]) },
1442520373248:mc.cores=nthreads )
1442520373248:out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442520373249:colnames(out) <- colnames(Xi)
1442520373249:rownames(out) <- colnames(X)
1442520373249:out
1442520373250:}
1442520394642:correlation.selected(X=Xp, c("221150"))
1442520413471:library(parallel)
1442520413803:library(limma)
1442520414681:NCPU = detectCores()
1442520427173:nthreads <- NCPU
1442520452267:correlation.selected(X=Xp, c("221150"))
1442520529968:top.correlated(Xp, subset="221150")
1442520664144:## GET COR FOR SPECIFIED GENES
1442520664144:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442520664144:tx_input_list <- as.character(tx_input_list)
1442520664145:#X <- t(X)
1442520664145:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442520664146:out <- mclapply(1:ncol(Xi),
1442520664146:function(i) { cor(X, Xi[,i]) },
1442520664146:mc.cores=nthreads )
1442520664147:out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442520664148:colnames(out) <- colnames(Xi)
1442520664148:rownames(out) <- colnames(X)
1442520664149:out
1442520664149:}
1442520680173:correlation.selected(Xp, c("221150"))
1442520689091:library(parallel)
1442520691148:correlation.selected(Xp, c("221150"))
1442520698661:Q
1442520705171:nthreads <- NCPU
1442520707867:correlation.selected(Xp, c("221150"))
1442520772355:Xp[rownames(Xp)=="221150",]
1442520784510:cor(Xp[rownames(Xp)=="221150",], Xp)
1442520811223:colnames(X)
1442520841447:cor(Xp[rownames(Xp)=="221150",], t(Xp))
1442520852279:z <- cor(Xp[rownames(Xp)=="221150",], t(Xp))
1442520855448:View(z)
1442521030175:background
1442521040377:r = top.correlated(Xp, subset=background, k=k)
1442521744028:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442521744029:taxon.id = as.character(taxon.id)
1442521744029:At = A$annotation[[taxon.id]]
1442521744029:background = intersect(unique(unlist(At)), rownames(X))
1442521744030:r = top.correlated(X, subset=background, k=k)
1442521744030:mclapply(r, function(c1) { # dla każdego transkryptu
1442521744031:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442521744031:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442521744031:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442521744031:oo = NULL
1442521744032:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442521744032:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442521744032:if (ct[1,1] >= min.count) {
1442521744033:fet = fisher.test(ct)
1442521744033:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442521744033:oo = sign(log10(fet$estimate)) * fet$p.value
1442521744033:#oo = fet$p.value
1442521744034:}
1442521744034:}
1442521744034:oo
1442521744035:})
1442521744035:#unlist(o)
1442521744035:}, mc.cores=NCPU)
1442521744036:r
1442521744036:}
1442521757997:r <- predict.annotations.knn(Xp, GO, 9606)
1442521790133:library(parallel)
1442521790290:library(limma)
1442521792129:NCPU = detectCores()
1442521811194:r <- predict.annotations.knn(Xp, GO, 9606)
1442522226911:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442522226912:taxon.id = as.character(taxon.id)
1442522226912:At = A$annotation[[taxon.id]]
1442522226913:background = intersect(unique(unlist(At)), rownames(X))
1442522226913:r = top.correlated(X, subset=background, k=k)
1442522226913:mclapply(r, function(c1) { # dla każdego transkryptu
1442522226913:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442522226914:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442522226914:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442522226914:oo = NULL
1442522226915:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442522226915:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442522226915:if (ct[1,1] >= min.count) {
1442522226915:fet = fisher.test(ct)
1442522226916:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442522226916:oo = sign(log10(fet$estimate)) * fet$p.value
1442522226916:#oo = fet$p.value
1442522226917:}
1442522226917:}
1442522226917:oo
1442522226918:})
1442522226918:unlist(o)
1442522226918:}, mc.cores=NCPU)
1442522226919:}
1442522269736:r <-top.correlated(Xp.q, background)
1442522274072:library(parallel)
1442522274195:library(limma)
1442522275543:NCPU = detectCores()
1442522277809:r <-top.correlated(Xp.q, background)
1442522291123:dim(Xp)
1442522293973:dim(Xp.q)
1442522320933:length(unique(rownames((Xp.q))))
1442522347155:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:2300]
1442522348432:Xp.q = Xp[q,]
1442522350508:length(unique(rownames((Xp.q))))
1442522366565:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:3000]
1442522367189:Xp.q = Xp[q,]
1442522393541:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2001:3000]
1442522394491:Xp.q = Xp[q,]
1442522399659:r <-top.correlated(Xp.q, background)
1442522426018:class(r)
1442522432818:r$`221150`
1442522454981:z <- r$`221150`
1442522464458:z <- as.data.frame(z)
1442522489873:names(z) <- "gene.ID"
1442522578547:zi <- cor(Xp.q[,rownames(Xp.q)=="221150"], t(Xp.q))
1442522597003:zi <- cor(Xp.q[rownames(Xp.q)=="221150",], t(Xp.q))
1442522599696:zi
1442522606239:names(zi)
1442522613289:zi
1442522623529:zi<- as.data.frame(zi)
1442522633974:zi <- t(zi)
1442522640208:zi<- as.data.frame(zi)
1442522656360:rownames(zi)
1442522667439:rownames(z) %in%rownames(zi)
1442522689567:class(rownames(z)); class(rownames(zi))
1442522702513:rownames(z)
1442522716400:z[,1] %in%rownames(zi)
1442522774964:View(z)
1442522825704:r <-top.correlated(Xp.q, background)
1442522837278:r$`221150`
1442522864017:View(z)
1442522906967:head(GO$table)
1442523128845:path = file.path(CACHE.DIR, "gene_info.gz")
1442523138546:h = gzfile(path, open="r")
1442523139283:o = read.table(h)
1442523223023:o = readLines(h, skip=1, sep="\t")
1442523229453:o = readLines(h)
1442523358928:o = readLines(h, 2)
1442523362017:o = readLines(h, 1)
1442523367224:h = gzfile(path, open="r")
1442523370101:o = readLines(h, 1)
1442523374817:o
1442523380796:o = readLines(h, 100)
1442523383324:o
1442523417517:o = read.table(h, 100, sep="\t")
1442523420950:o
1442523604442:within(df, o<-data.frame(do.call('rbind', strsplit(as.character(o), '\t', fixed=TRUE))))
1442523629967:a <- within(as.data.frame(o), o<-data.frame(do.call('rbind', strsplit(as.character(o), '\t', fixed=TRUE))))
1442523754258:h = gzfile(path, open="r")
1442523754461:o = read.table(h, skip=1, sep="\t")
1442523825677:readLines(h, n=846)
1442523952053:a <- read.table(path, sep="\t")
1442524427877:info.path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.rda")
1442524428510:if (!file.exists(info.path)) {
1442524429710:path = file.path(CACHE.DIR, "Homo_sapiens.gene_info.gz")
1442524430237:if (!file.exists(path)) {
1442524430238:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/GENE_INFO/Mammalia/Homo_sapiens.gene_info.gz", path) #TODO: now HOMO SAPIENS ONLY
1442524431250:}
1442524436689:}
1442524480101:h = gzfile(path, open="r")
1442524481299:o = read.table(h, skip=1, sep="\t")
1442524505978:o = readLines(h)
1442524531542:head(o)
1442524541568:class(o)
1442524606167:o <- read.table(path, sep="t")
1442524613198:print(path)
1442524622397:o <- read.table(paste(path), sep="t")
1442524658642:o <- read.table(path, sep="t", dec = ",,,,,,")
1442524669015:o <- read.table(path, sep="t", dec = ",")
1442524674442:o <- read.table(path, sep="t", dec = "")
1442524679864:o <- read.table(path, sep="t", dec = "ł")
1442524689367:o <- read.table(path, sep="t")
1442524701617:?read.table
1442524733117:o <- read.table(path, sep="t", header=T)
1442524760792:o <- read.table(path, skip=1, sep="t")
1442524770773:o <- read.table(path, skip=1, sep="t", quote="")
1442524796752:o <- read.table(path, skip=1, sep="t", as.is=T)
1442524846242:o <- read.table(path, skip=1, sep="t", fill=T)
1442524850892:View(o)
1442524913992:readLines(h, 1)
1442524920045:readLines(h, 2)
1442524924749:readLines(h, n=2)
1442524934142:h = gzfile(path, open="r")
1442524938148:readLines(h, n=2)
1442524965655:o <- read.table(path, skip=1, sep="\t", fill=T)
1442524995301:o[846,]
1442525026559:o = read.table(h, skip=1, sep="\t")
1442525044272:h = gzfile(path, open="r")
1442525044767:o = read.table(h, skip=1, sep="\t", fill=T)
1442525070052:head(o)
1442525089856:o[45:46,]
1442525095354:View(o)
1442525157717:which(o$V7=="")
1442525291318:length(which(o$V7==""))
1442525514095:col.names=c("Taxon ID", "Gene ID", "Symbol", "LocusTag", "Synonyms", "dbXrefs", "chromosome", "map_location", "description", "type_of_gene",
1442525514611:"Symbol_from_nomenclature_authority", "Full_name_from_nomenclature_authority","Nomenclature_status","Other_designations","Modification_date")
1442525556599:o = read.table(h, skip=1, sep="\t", fill=T, col.names=c("Taxon ID", "Gene ID", "Symbol", "LocusTag", "Synonyms", "dbXrefs", "chromosome", "map_location", "description",
1442525557134:"type_of_gene", "Symbol_from_nomenclature_authority", "Full_name_from_nomenclature_authority","Nomenclature_status",
1442525557134:"Other_designations","Modification_date"))
1442525586972:View(o)
1442525598172:o = read.table(h, skip=1, sep="\t", fill=T, col.names=c("Taxon ID", "Gene ID", "Symbol", "LocusTag", "Synonyms", "dbXrefs", "chromosome", "map_location", "description",
1442525598773:"type_of_gene", "Symbol_from_nomenclature_authority", "Full_name_from_nomenclature_authority","Nomenclature_status",
1442525598774:"Other_designations","Modification_date"))
1442525618430:o = read.table(h, skip=1, sep="\t", fill=T)
1442525650141:h = gzfile(path, open="r")
1442525651132:o = read.table(h, skip=1, sep="\t", fill=T, col.names=c("Taxon ID", "Gene ID", "Symbol", "LocusTag", "Synonyms", "dbXrefs", "chromosome", "map_location", "description",
1442525651695:"type_of_gene", "Symbol_from_nomenclature_authority", "Full_name_from_nomenclature_authority","Nomenclature_status",
1442525651695:"Other_designations","Modification_date"))
1442525659317:View(o)
1442525752343:which(o)=="31"
1442525760493:which(o=="31")
1442525784192:?grepl
1442525797592:which(grepl("ska", o))
1442525813694:which(o$Gene.ID=="221150")
1442525833421:which(o$Gene.ID==221150)
1442525848893:sum(o$Gene.ID==221150)
1442525881893:names(z) <- "Gene.ID"
1442525910592:zi <- merge(z, o[,c(2,3,4)])
1442525913692:View(zi)
1442525929442:View(z)
1442525945368:z <- sort(z[,1])
1442525959294:z<- as.data.frame(z)
1442525961367:View(z)
1442525989476:zi<- zi[sort(zi$Gene.ID),]
1442525992227:View(zi)
1442526024942:class(z$Gene.ID)
1442526034717:class(z$z)
1442526049669:z <- as.data.frame(as.character(z))
1442526052567:View(z)
1442526069724:z <- r$`221150`
1442526080817:z <- as.data.frame(Z)
1442526083317:z <- as.data.frame(z)
1442526095067:names(z) <- "Gene.ID"
1442526105597:zi < merge(z, o)
1442526117267:View(z)
1442526132117:zi <- merge(z, o[,c(2,3,4)])
1442526159246:zi <- merge(z, o[,c(2,3,5)])
1442526234446:zi <- merge(z, o[,c(2,3,5,12)])
1442526289950:write.table(zi, "correlated_with_SKA3.tsv")
1442526299417:zi <- merge(z, o[,c(2,3,5,12)], all.x=T)
1442526302792:View(zi)
1442526313167:write.table(zi, "correlated_with_SKA3.tsv")
1442526536442:write.table(zi, "correlated_with_SKA3.tsv", row.names = NULL)
1442526543417:write.table(zi, "correlated_with_SKA3.tsv", row.names=F)
1442586372078:View(res)
1442586421107:res <- read.csv("output_lysosomes/measurements.csv")
1442586426270:View(res)
1442586470255:res <- read.csv("output/measurements.csv")
1442586472226:View(res)
1442586791711:a
1442586791879:a
1442586792099:a
1442586795105:res$red_area_pixels <- res$red_area_fraction*area_p
1442586795491:res$red_area_um <- res$red_area_fraction*area_um
1442586795803:res$red_area_pixels_per_cell <- res$red_area_fraction*area_p/res$cell_count
1442586796062:res$red_area_um_per_cell <- res$red_area_fraction*area_um/res$cell_count
1442586801678:View(res)
1442586871737:res <- res[,1:24]
1442586874392:View(res)
1442586914352:area_p <- 1024^2
1442586914502:area_um <- 18211.8110
1442586915356:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1442586915525:res$yellow_area_um <- res$yellow_area_fraction*area_um
1442586915922:res$yellow_area_pixels_per_cell <- res$yellow_area_fraction*area_p/res$cell_count
1442586916083:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res$cell_count
1442586916518:#red
1442586916692:res$red_area_pixels <- res$red_area_fraction*area_p
1442586916851:res$red_area_um <- res$red_area_fraction*area_um
1442586917981:res$red_area_pixels_per_cell <- res$red_area_fraction*area_p/res$cell_count
1442586918147:res$red_area_um_per_cell <- res$red_area_fraction*area_um/res$cell_count
1442586935652:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442586935836:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442586942900:View(agg1)
1442586945426:View(agg2)
1442586972672:View(agg1)
1442587013879:agg1 <- agg1[,-c(4,6,7,8,)]
1442587021781:agg1 <- agg1[,-c(4,6,7,8)]
1442587023614:View(agg1)
1442587068039:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442587089701:agg1 <- agg1[,-c(4,5,6,7,8)]
1442587170354:names(agg2)[1:2] <- c("cell_line", "treatment")
1442587173988:View(agg1)
1442587174929:View(agg2)
1442587179557:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442587179763:agg1 <- agg1[,-c(4,5,6,7,8)]
1442587179964:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1442587180220:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442587180407:agg2<- agg2[,-c(3,4,5,6,7)]
1442587180651:names(agg2)[1:2] <- c("cell_line", "treatment")
1442587183268:View(agg1)
1442587183855:View(agg2)
1442587198180:write.csv(res, "output/measurements.csv", row.names=F)
1442587198379:write.csv(agg1, "output/summary1.csv", row.names=F)
1442587198775:write.csv(agg2, "output/summary2.csv", row.names=F)
1442587276010:View(res)
1442587398035:res$green_in_nuclei_mean_per_cell <- res$green_in_nuclei_mean/res$cell_count
1442587400211:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442587400399:agg1 <- agg1[,-c(4,5,6,7,8)]
1442587400572:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1442587400736:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442587400912:agg2<- agg2[,-c(3,4,5,6,7)]
1442587401078:names(agg2)[1:2] <- c("cell_line", "treatment")
1442587402659:write.csv(res, "output/measurements.csv", row.names=F)
1442587402835:write.csv(agg1, "output/summary1.csv", row.names=F)
1442587403058:write.csv(agg2, "output/summary2.csv", row.names=F)
1442587497824:res <- res[,-33]
1442587500210:View(res)
1442587510216:res$green_area_pixels <- res$green_area_fraction*area_p
1442587510702:res$green_area_um <- res$green_area_fraction*area_um
1442587511051:res$green_area_pixels_per_cell <- res$green_area_fraction*area_p/res$cell_count
1442587511285:res$green_area_um_per_cell <- res$green_area_fraction*area_um/res$cell_count
1442587513048:res$green_in_nuclei_mean_per_cell <- res$green_in_nuclei_mean/res$cell_count
1442587527653:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442587527882:agg1 <- agg1[,-c(4,5,6,7,8)]
1442587528212:names(agg1)[1:3] <- c("cell_line", "treatment", "date")
1442587528528:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442587528809:agg2<- agg2[,-c(3,4,5,6,7)]
1442587529119:names(agg2)[1:2] <- c("cell_line", "treatment")
1442587531116:write.csv(res, "output/measurements.csv", row.names=F)
1442587531305:write.csv(agg1, "output/summary1.csv", row.names=F)
1442587531642:write.csv(agg2, "output/summary2.csv", row.names=F)
1442587540148:system("mkdir output")
1442587547177:View(agg1)
1442587626680:pth <- "/mnt/DATAPART1/Sasi"
1442587628932:file_list_coloc <- list.files(paste0(pth, "/colocalisation"), pattern=".tsv")
1442587629498:file_list_count <- list.files(paste0(pth, "/count"), pattern=".tsv")
1442587629869:file_list_measure_lsm <- list.files(paste0(pth, "/input"), pattern=".tsv")
1442587630474:file_list_in_nuclei <- list.files(paste0(pth, "/in_nuclei"), pattern=".tsv")
1442587631114:# measure RGB channels on converted .lsm images
1442587631581:measure_lsm_data <- matrix(NA)
1442587632365:for( file in file_list_measure_lsm) {
1442587632546:Label <- c(gsub(".lsm_measure_lsm.tsv", "", as.character(file)))
1442587632738:new <- cbind(read.csv(paste0(pth, "/input/", file), header=T, sep="\t"), Label)
1442587632941:measure_lsm_data <- merge(measure_lsm_data, new, all=T)
1442587633136:}
1442587633419:measure_lsm_data <- measure_lsm_data[,-6]
1442587633816:measure_lsm_data$parameter <- as.character(measure_lsm_data$parameter)
1442587634129:measure_lsm <- matrix(NA)
1442587634473:for( i in unique(measure_lsm_data$parameter)) {
1442587634729:new <- measure_lsm_data[measure_lsm_data$parameter == i,]
1442587634968:new <- new[,-1]
1442587635217:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442587635447:measure_lsm <- merge(measure_lsm, new)
1442587635659:}
1442587635866:measure_lsm <- measure_lsm[,-2]
1442587636098:# colocalisation data; only measure yellow, which is blue. Put 0's where no measurement available
1442587636321:coloc_data <- matrix(NA)
1442587636549:for(file in file_list_coloc) {
1442587636768:Label <- c(gsub("C1-", "", gsub(".tif_coloc.tsv", "", as.character(file))))
1442587636994:new <- cbind(read.csv(paste0(pth, "/colocalisation/", file), header=T, sep="\t"), Label)
1442587637226:coloc_data <- merge(coloc_data, new, all=T)
1442587637441:}
1442587637656:coloc_data <- coloc_data[,-6]
1442587637944:coloc_data$parameter <- as.character(coloc_data$parameter)
1442587639216:coloc <- matrix(NA)
1442587639369:for( i in unique(coloc_data$parameter)) {
1442587639552:new <- coloc_data[coloc_data$parameter == i,]
1442587639730:new <- new[,-1]
1442587639905:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442587640057:coloc <- merge(coloc, new)
1442587640232:}
1442587640393:coloc <- coloc[,c(1,5,8,11)]
1442587640560:names(coloc)[1] <- "Label"
1442587640722:#
1442587640881:count_data <- matrix(NA, 0, 13)
1442587641042:for ( file in file_list_count) {
1442587641199:new <-read.csv(paste0(pth, "/count/", file), header=T, sep="\t")
1442587641360:count_data <- rbind(count_data, new)
1442587641544:}
1442587641791:count <- count_data[count_data$Area > 99,]
1442587641905:count <- as.data.frame(xtabs(~Label, count))
1442587642072:count$Label <- unlist(lapply(as.character(count$Label), function(x) { gsub(".tif", "", gsub("C3-", "", x))} ))
1442587642241:# green in nuclei
1442587642416:if (!is.na(file_list_in_nuclei[1])) {
1442587642592:print("Green in nuclei data detected, adding...")
1442587642768:in_nuclei_data <- matrix(NA)
1442587642937:for (file in file_list_in_nuclei) {
1442587643098:Label <- c(gsub("C3-", "", gsub(".tif_in_nuc.tsv", "", as.character(file))))
1442587643256:new <- cbind(read.csv(paste0(pth, "/in_nuclei/", file), header=T, sep="\t"), Label)
1442587643425:in_nuclei_data <- merge(in_nuclei_data, new, all=T)
1442587643584:}
1442587646689:in_nuclei <- matrix(NA)
1442587646898:for( i in unique(in_nuclei_data$parameter)) {
1442587647080:new <- in_nuclei_data[in_nuclei_data$parameter == i,]
1442587647289:new <- new[,-1]
1442587647500:names(new) <- c(paste0("red_", i), paste0("green_", i), paste0("blue_", i), "Label") #blue = yellow
1442587647736:in_nuclei <- merge(in_nuclei, new)
1442587648791:}
1442587648959:in_nuclei <- in_nuclei[,c(1,6,9,12)]
1442587649184:names(in_nuclei) <- c("file", "green_in_nuclei_area_fraction", "green_in_nuclei_mean", "green_in_nuclei_stdev")
1442587649448:} else {
1442587649679:print("No green in nuclei data detected.")
1442587650023:}
1442587650455:### MERGE TABLES
1442587654367:res <- merge(measure_lsm, count, all=T)
1442587654542:res <- merge(res, coloc, by="Label", all=T)
1442587658328:View(res)
1442587696177:names(res) <- c("file", "red_area_fraction", "green_area_fraction", "blue_area_fraction", "red_mean", "green_mean", "blue_mean", "red_stdev","green_stdev",
1442587696385:"blue_stdev", "cell_count", "yellow_area_fraction", "yellow_mean", "yellow_stdev")
1442587699160:View(res)
1442587711743:res$red_mean_per_cell <- round(res$red_mean / res$cell_count, 5)
1442587711997:res$green_mean_per_cell <- round(res$green_mean / res$cell_count, 5)
1442587712193:res$yellow_mean_per_cell <- round(res$yellow_mean / res$cell_count, 5)
1442587721296:meta <- cbind(t(as.data.frame(strsplit(as.character(res$file), "_"))), as.data.frame(res$file))
1442587726153:meta <- meta[, -(1:5)]
1442587729839:names(meta) <- c("date", "cell_line", "image", "file")
1442587735233:res <- merge(meta,res)
1442587739552:levels(res$cell_line)[levels(res$cell_line)=="231"] <- "MDAMB231"
1442587739799:res$cell_line <- droplevels(res$cell_line)
1442588380259:res <- res[,c(1,2,3,4,14,5:13,15:20)]
1442588432653:if (!is.na(file_list_in_nuclei[1])) {
1442588432860:res <- merge(res, in_nuclei, all.x=T)
1442588433121:}
1442588433833:res$file <- gsub("_", "/", res$file)
1442588447503:area_p <- 1024^2
1442588447687:area_um <- 18211.8110
1442588447897:res$yellow_area_pixels <- res$yellow_area_fraction*area_p
1442588448135:res$yellow_area_um <- res$yellow_area_fraction*area_um
1442588448430:res$yellow_area_pixels_per_cell <- res$yellow_area_fraction*area_p/res$cell_count
1442588448599:res$yellow_area_um_per_cell <- res$yellow_area_fraction*area_um/res$cell_count
1442588449398:#red
1442588449591:res$red_area_pixels <- res$red_area_fraction*area_p
1442588449786:res$red_area_um <- res$red_area_fraction*area_um
1442588450174:res$red_area_pixels_per_cell <- res$red_area_fraction*area_p/res$cell_count
1442588450745:res$red_area_um_per_cell <- res$red_area_fraction*area_um/res$cell_count
1442588450905:#green
1442588451055:res$green_area_pixels <- res$green_area_fraction*area_p
1442588451230:res$green_area_um <- res$green_area_fraction*area_um
1442588451600:res$green_area_pixels_per_cell <- res$green_area_fraction*area_p/res$cell_count
1442588451766:res$green_area_um_per_cell <- res$green_area_fraction*area_um/res$cell_count
1442588451943:### INNE
1442588454088:res$green_in_nuclei_mean_per_cell <- res$green_in_nuclei_mean/res$cell_count
1442588456168:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442588456319:agg1 <- agg1[,-c(4,5,6,7,8)]
1442588464055:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442588488390:View(res)
1442588536144:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean)
1442588539910:agg1 <- aggregate(res, by=list(res$cell_line, res$treatment, res$date), FUN=mean, na.rm=T)
1442588554754:agg2 <- aggregate(res, by=list(res$cell_line, res$treatment), FUN=mean, na.rm=T)
1442588676937:length(res$cell_line, res$treatment, res$date)
1442588680462:length(res$cell_line)
1442588687764:length(res$treatment)
1442588752222:View(res)
1442588805402:agg1<- aggregate(res$cell_line, res$date)
1442588816876:agg1<- aggregate(res$cell_line, res$date, FUN=mean, na.rm=T)
1442588827658:agg1<- aggregate(c(res$cell_line, res$date), FUN=mean, na.rm=T)
1442588840737:agg1<- aggregate(res, by=list(res$cell_line, res$date), FUN=mean, na.rm=T)
1442588847202:View(agg1)
1442588920399:agg3 <- aggregate(res, by=list(res$cell_line, res$date), FUN=mean, na.rm=T)
1442588921689:agg3 <- agg3[,-c(3,4,5,6)]
1442588981501:View(agg3)
1442588985706:names(agg3)[1:2] <- c("cell_line", "date")
1442588997643:system("mkdir output")
1442588998835:write.csv(res, "output/measurements.csv", row.names=F)
1442589010476:write.csv(agg3, "output/summary.csv", row.names=F)
1442589051821:write.csv(res, "output/measurements_mito.csv", row.names=F)
1442589052001:write.csv(agg3, "output/summary_mito.csv", row.names=F)
1442591792505:View(GO$table$Taxon.ID)
1442591817717:class(GO$table$Taxon.ID)
1442591827367:dim(GO$table$Taxon.ID)
1442591835376:length(GO$table$Taxon.ID)
1442591845942:head(GO$table$Taxon.ID)
1442591869417:length(GO$table$Term.ID)
1442591881255:length(GO$table$PMID)
1442592621895:head(GO$table)
1442592733878:A <_ GO
1442592736017:A <- GO
1442592739474:subset <- A$table$Taxon.ID == taxon.id
1442592740218:o <- cbind(A$Gene.ID[subset], A$Term.ID[subset])
1442592771397:head(table(o))
1442592779092:head(o)
1442592790505:taxon.id = 9606
1442592793974:subset <- A$table$Taxon.ID == taxon.id
1442592797093:o <- cbind(A$Gene.ID[subset], A$Term.ID[subset])
1442592810992:sum(subset)
1442592844160:o <- cbind(A$table$Gene.ID[subset], A$table$Term.ID[subset])
1442592850142:head(table(o))
1442593359995:library(reshape2)
1442593368054:head(melt(o))
1442593378853:head(melt(data))
1442593384917:head(o)
1442593394292:View(o)
1442593457567:head(cast(o))
1442593493619:data <- cbind(as.character(A$table$Gene.ID[subset]), as.character(A$table$Term.ID[subset]))
1442593499092:head(melt(data))
1442593589292:?melt
1442593986710:terms <- A$table$Term.ID[subset]
1442594087342:length(unique(GO$table$Gene.ID))
1442594096742:length(unique(GO$table$Gene.ID[subset]))
1442594102242:length((GO$table$Gene.ID[subset]))
1442594402704:?"matrix"
1442594454378:matrix(c(0), 2,2, rownames=c("1", "2"))
1442594507170:matrix(c(0), 2,2, row.names=c("1", "2"))
1442594534417:rownames(matrix(c(0), 2,2)) <- c("", "1")
1442594568067:z <- matrix(c(0), 2,2)
1442594586604:rownames(z) <- c("1", "2")
1442594588168:z
1442594592699:rownames(z) <- c("1", "c")
1442594594042:z
1442594659596:dimnames()
1442594662272:dimnames(z)
1442594708249:dimnames(z) <- list(c("s", "F"), c("E", "A"))
1442594709866:dimnames(z)
1442594711547:z
1442594828216:o[1]
1442594834278:terms <- A$table$Term.ID[subset]
1442594834418:txs <- A$table$Gene.ID[subset]
1442594835154:o <- matrix(c(0), length(unique(txs), length(unique(terms))))
1442594852188:o <- matrix(c(0), nrow=length(unique(txs), ncol=length(unique(terms))))
1442594866747:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442594895007:dimnames(o) <- list(unique(txs), unique(terms))
1442595252999:table(data)
1442595270192:View(table(data))
1442595273691:?table
1442595437243:head(dcast(data))
1442595457092:summary(daat)
1442595459206:summary(data)
1442595472867:head(dcast(data, V1~V2))
1442595488267:head(data)
1442595499767:View(data)
1442595508567:head(dcast(data, "V1"~"V2"))
1442595544924:head(dcast(V1~V2, data=data))
1442595548717:head(dcast(V1~V2, data=data, length))
1442597837542:?dcast
1442597892593:names(data)
1442597902829:data <- as.data.frame()
1442597905067:data <- as.data.frame(data)
1442597909158:names(data)
1442597912892:names(data)
1442597917769:head(dcast(V1~V2, data=data))
1442598511353:term <- o[,2]
1442598519402:names(term)
1442598528467:head(term)
1442598540491:dim(term)
1442598612868:names(o)[2]
1442598619643:colnames(o)[2]
1442598643328:hits <- unique(txs[term %in% terms])
1442598670152:term
1442598682942:term <- colnames(o)[2]
1442598684744:term
1442598687975:hits <- unique(txs[term %in% terms])
1442598696980:oo <- hits %in% rownames(o)
1442598710767:length(oo)/sum(oo)
1442598738311:hits <- unique(txs[terms %in% term])
1442598740043:length(oo)/sum(oo)
1442598753668:length(terms)
1442598755567:length(term)
1442598786953:hits <- unique(txs[terms == term])
1442598797831:length(hits)
1442598800130:oo <- hits %in% rownames(o)
1442598807317:length(oo)/sum(oo)
1442598842451:oo <- rownames(o) %in% hits
1442598845071:length(oo)/sum(oo)
1442598851800:length(oo)
1442598855472:sum(oo)
1442598868446:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442598893795:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442598894036:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442598895074:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442598900401:dimnames(o) <- list(unique(txs), unique(terms))
1442598906844:o <- mclapply(colnames(o), function(term) {
1442598906844:hits <- unique(txs[terms == term])
1442598906845:oo <- rownames(o) %in% hits
1442598906845:}, mc.cores=NCPU)
1442598906846:}
1442598959581:library(parallel)
1442598959811:library(limma)
1442598960819:NCPU = detectCores()
1442598976490:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442598979141:dimnames(o) <- list(unique(txs), unique(terms))
1442598982266:o <- mclapply(colnames(o), function(term) {
1442598982267:hits <- unique(txs[terms == term])
1442598982267:oo <- rownames(o) %in% hits
1442598982268:}, mc.cores=NCPU)
1442599143160:y.labels <- function(A, taxon.id = 9606) {
1442599143161:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442599143161:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442599143171:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442599143174:dimnames(o) <- list(unique(txs), unique(terms))
1442599143175:o <- mclapply(colnames(o), function(term) {
1442599143175:hits <- unique(txs[terms == term])
1442599143175:oo <- rownames(o) %in% hits
1442599143176:}, mc.cores=NCPU)
1442599143176:}
1442599189767:size("Z")
1442599202122:??size
1442599220042:object.size("S")
1442599225967:object.size(TRUE)
1442599230142:object.size(1)
1442599249047:y.labels <- function(A, taxon.id = 9606) {
1442599249047:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442599249047:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442599249048:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442599249048:dimnames(o) <- list(unique(txs), unique(terms))
1442599249048:o <- mclapply(colnames(o), function(term) {
1442599249048:hits <- unique(txs[terms == term])
1442599249049:oo <- as.numeric(rownames(o) %in% hits)
1442599249049:}, mc.cores=NCPU)
1442599249049:}
1442599264342:o[1]
1442599270899:o[[1]]
1442599275347:o[1][1]
1442599288721:length(terms)
1442599292467:length(txs)
1442599300279:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442599300566:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442599302693:length(txs)
1442599304292:length(terms)
1442599316394:length(unique(terms))
1442599320667:length(unique(txs))
1442599412675:class(o)
1442599415570:names(o)
1442599467674:head(o)
1442599496751:o$`6`
1442599501392:o$2
1442599504942:o$`2`
1442599603250:o <- mclapply(t(o))
1442599625117:o <- mclapply(t(o), FUN=function(x) {x} )
1442599647952:o <- mclapply(t(o), FUN=function(x) {x^2} )
1442599671367:o <- mclapply(t(o), FUN=function(x) {x} )
1442599718588:### Get y and y_hat
1442599718588:y.labels <- function(A, taxon.id = 9606) {
1442599718589:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442599718589:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442599718589:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442599718590:dimnames(o) <- list(unique(txs), unique(terms))
1442599718590:o <- mclapply(rownames(o), function(tx) {
1442599718590:hits <- unique(terms[txs == tx])
1442599718591:oo <- as.numeric(colnames(o) %in% hits)
1442599718591:}, mc.cores=NCPU)
1442599718591:names(o)
1442599718592:}
1442599745467:y <- y.labels(GO)
1442600002512:hits <- unique(terms[txs == tx])
1442600016183:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442600038783:dimnames(o) <- list(unique(txs), unique(terms))
1442600064075:tx <- colnames(o)[2]
1442600064077:tx
1442600072003:tx
1442600077891:tx <- rownames(o)[2]
1442600080517:tx
1442600088093:hits <- unique(terms[txs == tx])
1442600097301:oo <- as.numeric(colnames(o) %in% hits)
1442600104000:sum(oo)
1442600133458:y.labels <- function(A=GO, taxon.id = 9606) {
1442600133458:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442600133458:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442600133459:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442600133459:dimnames(o) <- list(unique(txs), unique(terms))
1442600133459:o <- mclapply(rownames(o), function(tx) {
1442600133459:hits <- unique(terms[txs == tx])
1442600133460:oo <- as.numeric(colnames(o) %in% hits)
1442600133460:}, mc.cores=NCPU)
1442600133460:o
1442600133461:}
1442600140767:y <- y.labels(GO)
1442600388945:class(predictions)
1442600397867:predictions[1]
1442600457599:foo <- function(x) {x; x^2}
1442600461342:fo(2)
1442600464017:foo(2)
1442600478769:foo <- function(x) {return(x, x^2)}
1442600480248:foo(2)
1442600488472:rm(foo)
1442600518642:rm(c1, c2, h, z, zi, col.names)
1442601087622:names(predictions[1])
1442601095344:names(predictions[[1]])
1442601119448:tx
1442601124442:names(predictions$tx)
1442601127842:names(predictions$`tx`)
1442601144143:names(predictions$56)
1442601148576:names(predictions$`56`)
1442601182962:names(predictions$paste(56))
1442601213267:names(predictions)
1442601223050:names(predictions)tx
1442601241517:tx <- 1890
1442601248151:names(predictions$tx)
1442601255342:names(predictions)==tx
1442601281657:hits <- names(predictions)[names(predictions)==tx]
1442601283992:hist
1442601291467:hits
1442601299378:oo <- as.numeric(colnames(o) %in% hits)
1442601301367:oo
1442601771142:y_hat <- y.labels(y_hat)
1442601781867:y_hat <- y.labels("y_hat")
1442601799022:y_hat <- y.labels("y")
1442601808920:y_hat <- y.labels("y", GO,9606)
1442601823729:### Get y and y_hat; output=(y or y_hat)
1442601823729:y.labels <- function(output, A=GO, taxon.id = 9606) {
1442601823729:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442601823730:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442601823730:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442601823731:dimnames(o) <- list(unique(txs), unique(terms))
1442601823732:if(output=="y") {
1442601823732:o <- mclapply(rownames(o), function(tx) {
1442601823732:hits <- unique(terms[txs == tx])
1442601823732:oo <- as.numeric(colnames(o) %in% hits)
1442601823733:}, mc.cores=NCPU)
1442601823733:} else if(output=="y_hat") {
1442601823733:o <- mclapply(rownames(o), function(tx) {
1442601823733:hits <- names(predictions)[names(predictions)==tx]
1442601823734:oo <- as.numeric(colnames(o) %in% hits)
1442601823734:}, mc.cores=NCPU)
1442601823734:} else {
1442601823735:print('"output should be either "y" or "y_hat"')
1442601823736:}
1442601823736:o
1442601823736:}
1442601833218:y_hat <- y.labels("y", GO, 9606)
1442601982127:y <- y_hat
1442601987191:y_hat <- y.labels("y_hat", GO, 9606)
1442602588942:summary(y_hat)
1442602594393:summary(y)
1442603492201:predictions
1442603501297:predictions$`221150`
1442603504568:predictions$221150
1442603572545:which(rownames(X) =="2211150")
1442603575073:which(rownames(X) =="221150")
1442603611692:which(intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))=="221150")
1442603626819:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2051:2100]
1442603627749:Xp.q = Xp[q,]
1442603629749:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442603686313:predictions$`221150`
1442603782717:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442603782717:taxon.id = as.character(taxon.id)
1442603782717:At = A$annotation[[taxon.id]]
1442603782717:background = intersect(unique(unlist(At)), rownames(X))
1442603782718:r = top.correlated(X, subset=background, k=k)
1442603782718:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442603782719:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442603782719:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442603782719:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442603782720:oo = NULL
1442603782720:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442603782720:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442603782721:if (ct[1,1] >= min.count) {
1442603782721:fet = fisher.test(ct)
1442603782722:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442603782722:#oo = as.numeric(fet$estimate)
1442603782723:oo = sign(log(fet$estimate)) * fet$p.value
1442603782723:}
1442603782724:}
1442603782724:oo
1442603782724:})
1442603782725:unlist(o)
1442603782725:}, mc.cores=NCPU)
1442603782726:}
1442603787617:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442603801521:predictions$`221150`
1442603809342:predictions$
1442603818517:predictions$`221150`
1442603856423:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442603856424:taxon.id = as.character(taxon.id)
1442603856424:At = A$annotation[[taxon.id]]
1442603856424:background = intersect(unique(unlist(At)), rownames(X))
1442603856425:r = top.correlated(X, subset=background, k=k)
1442603856426:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442603856427:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442603856427:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442603856428:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442603856428:oo = NULL
1442603856429:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442603856429:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442603856429:if (ct[1,1] >= min.count) {
1442603856429:fet = fisher.test(ct)
1442603856430:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442603856430:#oo = as.numeric(fet$estimate)
1442603856430:oo = as.numeric(sign(log10(fet$estimate)) * fet$p.value)
1442603856431:}
1442603856431:}
1442603856431:oo
1442603856431:})
1442603856432:unlist(o)
1442603856432:}, mc.cores=NCPU)
1442603856432:}
1442603860692:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442603903342:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442603903342:taxon.id = as.character(taxon.id)
1442603903343:At = A$annotation[[taxon.id]]
1442603903344:background = intersect(unique(unlist(At)), rownames(X))
1442603903344:r = top.correlated(X, subset=background, k=k)
1442603903344:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442603903344:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442603903345:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442603903345:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442603903345:oo = NULL
1442603903345:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442603903346:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442603903346:if (ct[1,1] >= min.count) {
1442603903346:fet = fisher.test(ct)
1442603903347:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442603903347:#oo = as.numeric(fet$estimate)
1442603903347:oo = sign(log10(fet$estimate)) * fet$p.value
1442603903347:}
1442603903348:}
1442603903348:oo
1442603903348:})
1442603903349:o
1442603903349:}, mc.cores=NCPU)
1442603903349:}
1442603907601:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442603922374:predictions$`221150`
1442603941017:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442603941018:taxon.id = as.character(taxon.id)
1442603941018:At = A$annotation[[taxon.id]]
1442603941018:background = intersect(unique(unlist(At)), rownames(X))
1442603941018:r = top.correlated(X, subset=background, k=k)
1442603941019:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442603941019:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442603941019:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442603941019:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442603941020:oo = NULL
1442603941020:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442603941020:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442603941020:if (ct[1,1] >= min.count) {
1442603941021:fet = fisher.test(ct)
1442603941021:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442603941022:#oo = as.numeric(fet$estimate)
1442603941022:oo = list(sign(log10(fet$estimate)) * fet$p.value)
1442603941023:}
1442603941023:}
1442603941023:oo
1442603941024:})
1442603941025:o
1442603941026:}, mc.cores=NCPU)
1442603941026:}
1442603944204:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604012790:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604012790:taxon.id = as.character(taxon.id)
1442604012791:At = A$annotation[[taxon.id]]
1442604012791:background = intersect(unique(unlist(At)), rownames(X))
1442604012791:r = top.correlated(X, subset=background, k=k)
1442604012792:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442604012792:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442604012792:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442604012793:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442604012793:oo = NULL
1442604012794:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442604012794:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442604012794:if (ct[1,1] >= min.count) {
1442604012794:fet = fisher.test(ct)
1442604012795:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442604012795:#oo = as.numeric(fet$estimate)
1442604012796:oo = list(sign(log10(as.numeric(fet$estimate))) * as.numeric(fet$p.value))
1442604012796:}
1442604012796:}
1442604012797:oo
1442604012797:})
1442604012797:o
1442604012798:}, mc.cores=NCPU)
1442604012798:}
1442604020192:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604039117:predictions$`221150`
1442604064981:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604064981:taxon.id = as.character(taxon.id)
1442604064982:At = A$annotation[[taxon.id]]
1442604064985:background = intersect(unique(unlist(At)), rownames(X))
1442604064986:r = top.correlated(X, subset=background, k=k)
1442604064988:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442604064989:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442604064989:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442604064990:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442604064990:oo = NULL
1442604064990:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442604064991:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442604064991:if (ct[1,1] >= min.count) {
1442604064992:fet = fisher.test(ct)
1442604064993:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442604064994:#oo = as.numeric(fet$estimate)
1442604064995:oo = sign(log10(as.numeric(fet$estimate))) * as.numeric(fet$p.value)
1442604064995:}
1442604064996:}
1442604064998:oo
1442604064999:})
1442604065000:o
1442604065000:}, mc.cores=NCPU)
1442604065000:}
1442604068367:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604136682:dim(Xp.q)
1442604143467:dim(Xp)
1442604313857:X = read.table("expression.gene.v2.tsv")
1442604323041:Xp = preprocess(X)
1442604347318:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2051:2100]
1442604347383:Xp.q = Xp[q,]
1442604347385:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604388756:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604388757:taxon.id = as.character(taxon.id)
1442604388757:At = A$annotation[[taxon.id]]
1442604388757:background = intersect(unique(unlist(At)), rownames(X))
1442604388757:r = top.correlated(X, subset=background, k=k)
1442604388757:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442604388758:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442604388758:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442604388759:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442604388759:oo = NULL
1442604388759:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442604388759:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442604388760:if (ct[1,1] >= min.count) {
1442604388760:fet = fisher.test(ct)
1442604388760:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442604388760:#oo = as.numeric(fet$estimate)
1442604388761:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442604388761:}
1442604388761:}
1442604388762:oo
1442604388762:})
1442604388762:o
1442604388762:}, mc.cores=NCPU)
1442604388763:}
1442604392542:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604408807:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604408807:taxon.id = as.character(taxon.id)
1442604408807:At = A$annotation[[taxon.id]]
1442604408807:background = intersect(unique(unlist(At)), rownames(X))
1442604408808:r = top.correlated(X, subset=background, k=k)
1442604408808:mclapply(r[1:50], function(c1) {
1442604408808:c1 = as.integer(background %in% c1)
1442604408809:o = sapply(At[1:50], function(c2) {
1442604408809:c2 = as.integer(background %in% c2)
1442604408809:oo = NULL
1442604408809:if (sum(c2) > 0) {
1442604408810:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442604408810:if (ct[1,1] >= min.count) {
1442604408810:fet = fisher.test(ct)
1442604408811:#oo = list(p=fet$p.value, OR=fet$estimate)
1442604408811:#oo = as.numeric(fet$estimate)
1442604408811:oo = fet$p.value
1442604408811:}
1442604408812:}
1442604408812:oo
1442604408812:})
1442604408813:unlist(o)
1442604408813:}, mc.cores=NCPU)
1442604408813:}
1442604413392:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604440501:top.correlated = function(X, subset=NULL, k=50) {
1442604440501:k = min(k, nrow(X) - 1)
1442604440501:X = as.matrix(X)
1442604440501:stopifnot(sum(is.na(X)) == 0)
1442604440502:Xs = t(apply(X,1,scale))
1442604440502:o = mclapply(1:nrow(Xs), function(i) {
1442604440502:if ((i > 0) && (i %% 100 == 0)) {
1442604440502:sprintf("Calculating correlations for row: %d", i)
1442604440503:}
1442604440503:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442604440503:oo = names(r)[order(r, decreasing=T)]
1442604440503:if (!is.null(subset)) {
1442604440504:oo = oo[oo %in% subset]
1442604440504:}
1442604440504:oo[1:min(k, length(oo))]
1442604440505:}, mc.cores=NCPU)
1442604440505:names(o) = rownames(Xs)
1442604440505:o
1442604440505:}
1442604445167:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604485297:# Other possibilities:
1442604485297:# - use a min mean and min variance cutoff to reduce # of genes (faster downstream processing w/o much loss)
1442604485297:# - if there are missing values, impute using knnimpute or similar
1442604485297:preprocess = function(X) {
1442604485298:# remove genes & samples w/ zero variance
1442604485298:X = X[apply(X,1,var) > 0,]
1442604485298:X = X[,apply(X,2,var) > 0]
1442604485298:stopifnot(nrow(X) > 0)
1442604485298:stopifnot(ncol(X) > 0)
1442604485299:# quantile normalize
1442604485299:normalizeBetweenArrays(as.matrix(X))
1442604485299:}
1442604485300:##############
1442604485300:# Correlations
1442604485300:##############
1442604485301:# the slow version, for matrices containing NaN, could be used as a fallback
1442604485301:#top.correlated = function(X, k=50) {
1442604485301:#    k = min(k,nrow(X)-1)
1442604485301:#    Xt = t(X)
1442604485301:#    o = mclapply(colnames(Xt), function(ix) {
1442604485302:#        r = cor(Xt, Xt[,ix], use="pairwise.complete.obs")[,1]
1442604485302:#        r = r[!is.na(r)]
1442604485302:#        o = NULL
1442604485302:#        if (length(r) >= k) {
1442604485302:#            o = names(r)[order(r, decreasing=T)]
1442604485302:#        }
1442604485303:#        o
1442604485303:#    }, mc.cores=NCPU)
1442604485303:#    names(o) = colnames(Xt)
1442604485303:#    o
1442604485304:#}
1442604485304:top.correlated = function(X, subset=NULL, k=50) {
1442604485304:k = min(k, nrow(X) - 1)
1442604485304:X = as.matrix(X)
1442604485304:stopifnot(sum(is.na(X)) == 0)
1442604485305:Xs = t(apply(X,1,scale))
1442604485305:o = mclapply(1:nrow(Xs), function(i) {
1442604485305:if ((i > 0) && (i %% 100 == 0)) {
1442604485305:sprintf("Calculating correlations for row: %d", i)
1442604485306:}
1442604485306:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442604485306:oo = names(r)[order(r, decreasing=T)]
1442604485306:if (!is.null(subset)) {
1442604485307:oo = oo[oo %in% subset]
1442604485307:}
1442604485307:oo[1:min(k, length(oo))]
1442604485308:}, mc.cores=NCPU)
1442604485308:names(o) = rownames(Xs)
1442604485308:o
1442604485308:}
1442604485309:#################################################
1442604485309:# Gene Ontology names and mappings (for all taxa)
1442604485310:#################################################
1442604485310:go.path = file.path(CACHE.DIR, "GO.rda")
1442604485310:if (!file.exists(go.path)) {
1442604485311:path = file.path(CACHE.DIR, "gene2go.gz")
1442604485311:if (!file.exists(path)) {
1442604485311:download.file("ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2go.gz", path)
1442604485311:}
1442604485311:h = gzfile(path, open="r")
1442604485312:o = read.table(h, skip=1, sep="\t",
1442604485312:col.names=c("Taxon ID", "Gene ID", "Term ID", "Evidence", "Qualifier", "Term Name", "PMID", "Category"))
1442604485312:nv = o$Term.Name
1442604485312:names(nv) = o$Term.ID
1442604485313:GO = list(
1442604485313:table=o,
1442604485313:terms=nv[unique(names(nv))],
1442604485313:annotation=by(o, o$Taxon.ID,
1442604485314:function(ts) {
1442604485314:by(ts, ts$Term.ID, function(x) {
1442604485314:unique(x$Gene.ID)
1442604485314:})
1442604485315:}))
1442604485315:save(GO, file=go.path)
1442604485315:} else {
1442604485315:if (!("GO" %in% ls())) {
1442604485316:load(go.path)
1442604485316:}
1442604485316:}
1442604485317:#######################################
1442604485318:# Function prediction by kNN FET method
1442604485318:#######################################
1442604485318:# could improve to output p-value, odds ratio ("estimate"), and N for each term-gene pair
1442604485318:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604485318:taxon.id = as.character(taxon.id)
1442604485319:At = A$annotation[[taxon.id]]
1442604485319:background = intersect(unique(unlist(At)), rownames(X))
1442604485319:r = top.correlated(X, subset=background, k=k)
1442604485319:mclapply(r[1:50], function(c1) {
1442604485320:c1 = as.integer(background %in% c1)
1442604485320:o = sapply(At[1:50], function(c2) {
1442604485320:c2 = as.integer(background %in% c2)
1442604485320:oo = NULL
1442604485320:if (sum(c2) > 0) {
1442604485321:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442604485321:if (ct[1,1] >= min.count) {
1442604485321:fet = fisher.test(ct)
1442604485321:#oo = list(p=fet$p.value, OR=fet$estimate)
1442604485322:#oo = as.numeric(fet$estimate)
1442604485322:oo = fet$p.value
1442604485323:}
1442604485323:}
1442604485323:oo
1442604485323:})
1442604485324:unlist(o)
1442604485324:}, mc.cores=NCPU)
1442604485324:}
1442604485325:#########
1442604485325:# Example
1442604485325:#########
1442604496949:library(parallel)
1442604497159:library(limma)
1442604499676:NCPU = detectCores()
1442604507249:X = read.table("expression.gene.v2.tsv")
1442604513460:Xp = preprocess(X)
1442604526922:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[1:1000]
1442604527943:Xp.q = Xp[q,]
1442604529145:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604555606:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604555606:taxon.id = as.character(taxon.id)
1442604555606:At = A$annotation[[taxon.id]]
1442604555607:background = intersect(unique(unlist(At)), rownames(X))
1442604555607:r = top.correlated(X, subset=background, k=k)
1442604555607:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442604555608:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442604555608:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442604555608:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442604555608:oo = NULL
1442604555609:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442604555609:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442604555609:if (ct[1,1] >= min.count) {
1442604555609:fet = fisher.test(ct)
1442604555610:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442604555610:#oo = as.numeric(fet$estimate)
1442604555610:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442604555611:}
1442604555611:}
1442604555611:oo
1442604555612:})
1442604555612:o
1442604555612:}, mc.cores=NCPU)
1442604555612:}
1442604559545:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604637738:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604637739:taxon.id = as.character(taxon.id)
1442604637739:At = A$annotation[[taxon.id]]
1442604637739:background = intersect(unique(unlist(At)), rownames(X))
1442604637739:r = top.correlated(X, subset=background, k=k)
1442604637740:mclapply(r[1:50], function(c1) { # dla każdego transkryptu
1442604637740:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442604637740:o = sapply(At[1:50], function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442604637741:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442604637741:oo = NULL
1442604637741:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442604637741:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442604637742:if (ct[1,1] >= min.count) {
1442604637742:fet = fisher.test(ct)
1442604637742:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442604637743:#oo = as.numeric(fet$estimate)
1442604637743:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442604637743:}
1442604637744:}
1442604637744:oo
1442604637744:})
1442604637745:unlist(o)
1442604637745:}, mc.cores=NCPU)
1442604637745:}
1442604644442:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604675982:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[2051:2100]
1442604676405:Xp.q = Xp[q,]
1442604676751:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604692942:predictions$`221150`
1442604716525:q
1442604736760:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604736760:taxon.id = as.character(taxon.id)
1442604736760:At = A$annotation[[taxon.id]]
1442604736761:background = intersect(unique(unlist(At)), rownames(X))
1442604736761:r = top.correlated(X, subset=background, k=k)
1442604736761:mclapply(r, function(c1) { # dla każdego transkryptu
1442604736761:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442604736762:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442604736762:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442604736762:oo = NULL
1442604736763:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442604736763:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442604736763:if (ct[1,1] >= min.count) {
1442604736763:fet = fisher.test(ct)
1442604736764:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442604736764:#oo = as.numeric(fet$estimate)
1442604736764:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442604736765:}
1442604736765:}
1442604736765:oo
1442604736766:})
1442604736766:unlist(o)
1442604736766:}, mc.cores=NCPU)
1442604736767:}
1442604743142:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604763643:predictions$`221150`
1442604805900:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442604805900:taxon.id = as.character(taxon.id)
1442604805901:At = A$annotation[[taxon.id]]
1442604805901:background = intersect(unique(unlist(At)), rownames(X))
1442604805901:r = top.correlated(X, subset=background, k=k)
1442604805901:mclapply(r, function(c1) {
1442604805902:c1 = as.integer(background %in% c1)
1442604805902:o = sapply(At, function(c2) {
1442604805902:c2 = as.integer(background %in% c2)
1442604805902:oo = NULL
1442604805903:if (sum(c2) > 0) {
1442604805903:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")]
1442604805903:if (ct[1,1] >= min.count) {
1442604805903:fet = fisher.test(ct)
1442604805904:#oo = list(p=fet$p.value, OR=fet$estimate)
1442604805904:#oo = as.numeric(fet$estimate)
1442604805904:oo = fet$p.value
1442604805905:}
1442604805905:}
1442604805905:oo
1442604805905:})
1442604805906:unlist(o)
1442604805906:}, mc.cores=NCPU)
1442604805906:}
1442604808874:predictions = predict.annotations.knn(Xp.q, GO, 9606)
1442604825217:predictions$`221150`
1442604890509:length(predictions$`221150`)
1442604905002:length(predictions$`1628`)
1442604943996:length(predictions$`221150`<0.05)
1442604959067:sum(predictions$`221150`<0.05)
1442605022371:z <- top.correlated(Xp.q)
1442605032596:length(z[1])
1442605036626:length(z[[1])
1442605038892:length(z[[1]])
1442605103571:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442605103572:tx_input_list <- as.character(tx_input_list)
1442605103572:X <- t(X)
1442605103572:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605103572:out <- mclapply(1:ncol(Xi),
1442605103573:function(i) { cor(X, Xi[,i]) },
1442605103573:mc.cores=nthreads )
1442605103573:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605103573:#colnames(out) <- colnames(Xi)
1442605103574:#rownames(out) <- colnames(X)
1442605103574:out
1442605103574:}
1442605126275:correlation.selected(X, c("221150"))
1442605163448:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442605163448:tx_input_list <- as.character(tx_input_list)
1442605163448:X <- t(X)
1442605163448:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605163449:out <- mclapply(1:ncol(Xi),
1442605163449:function(i) { cor(X, Xi[,i]) },
1442605163449:mc.cores=NCPU )
1442605163449:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605163450:#colnames(out) <- colnames(Xi)
1442605163450:#rownames(out) <- colnames(X)
1442605163450:out
1442605163450:}
1442605166067:correlation.selected(X, c("221150"))
1442605205667:correlation.selected(X
1442605207191:)
1442605239025:sum(colnames(X) == "221150")
1442605246717:sum(rownames(X) == "221150")
1442605257900:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442605257900:tx_input_list <- as.character(tx_input_list)
1442605257900:#X <- t(X)
1442605257900:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605257901:out <- mclapply(1:ncol(Xi),
1442605257901:function(i) { cor(X, Xi[,i]) },
1442605257901:mc.cores=NCPU )
1442605257901:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605257902:#colnames(out) <- colnames(Xi)
1442605257902:#rownames(out) <- colnames(X)
1442605257902:out
1442605257902:}
1442605265367:correlation.selected(X, c("221150"))
1442605333125:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442605333303:tx_input_list <- as.character(tx_input_list)
1442605333452:#X <- t(X)
1442605333603:Xi <- t(X[(rownames(X) %in% tx_input_list),])
1442605333754:out <- mclapply(1:ncol(Xi),
1442605333942:function(i) { cor(X, Xi[,i]) },
1442605334095:mc.cores=NCPU )
1442605334250:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605334394:#colnames(out) <- colnames(Xi)
1442605334598:#rownames(out) <- colnames(X)
1442605334954:out
1442605335323:}
1442605345979:correlation.selected(X, c("221150"))
1442605373400:dim(ep)
1442605383895:dim(X)
1442605396369:dimnames(ep)
1442605408092:dimnames(X)
1442605421787:## GET COR FOR SPECIFIED GENES
1442605421787:correlation.selected <- function(X=ep, tx_input_list=c("1","2","9","12","13")) {
1442605421787:tx_input_list <- as.character(tx_input_list)
1442605421788:X <- t(X)
1442605421788:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605421788:out <- mclapply(1:ncol(Xi),
1442605421788:function(i) { cor(X, Xi[,i]) },
1442605421789:mc.cores=NCPU )
1442605421789:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605421789:#colnames(out) <- colnames(Xi)
1442605421789:#rownames(out) <- colnames(X)
1442605421790:out
1442605421790:}
1442605464642:correlation.selected()
1442605470775:correlation.selected(X)
1442605480001:correlation.selected(X, c("221150"))
1442605526668:correlation.selected <- function(X=ep, tx_input_list=c("1","221150")) {
1442605526669:tx_input_list <- as.character(tx_input_list)
1442605526669:X <- t(X)
1442605526669:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605526669:out <- mclapply(1:ncol(Xi),
1442605526669:function(i) { cor(X, Xi[,i]) },
1442605526670:mc.cores=NCPU )
1442605526670:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605526670:#colnames(out) <- colnames(Xi)
1442605526670:#rownames(out) <- colnames(X)
1442605526671:out
1442605526671:}
1442605532342:correlation.selected(X
1442605533496:)
1442605550953:tx_input_list=c("1","221150")
1442605555981:tx_input_list <- as.character(tx_input_list)
1442605561067:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605563643:Xi
1442605598623:tx_input_list
1442605615800:colnames(X)
1442605627142:Xi <- X[,(rownames(X) %in% tx_input_list)]
1442605658268:X <- t(X)
1442605660575:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605663242:Xi
1442605671567:head(Xi)
1442605690428:out <- mclapply(1:ncol(Xi),
1442605690619:function(i) { cor(X, Xi[,i]) },
1442605690853:mc.cores=NCPU )
1442605694142:out
1442605699367:head(out)
1442605783037:names(Xi)
1442605792693:colnames(XI)
1442605794943:colnames(Xi)
1442605814273:names(out)
1442605828392:names(out) <- colnames(Xi)
1442605830025:names(out)
1442605842846:correlation.selected <- function(X=ep, tx_input_list=c("1","221150")) {
1442605842846:tx_input_list <- as.character(tx_input_list)
1442605842846:X <- t(X)
1442605842847:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605842847:out <- mclapply(1:ncol(Xi),
1442605842847:function(i) { cor(X, Xi[,i]) },
1442605842848:mc.cores=NCPU )
1442605842848:names(out) <- colnames(Xi)
1442605842848:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605842849:#colnames(out) <- colnames(Xi)
1442605842849:#rownames(out) <- colnames(X)
1442605842849:out
1442605842850:}
1442605858267:z <- correlation.selected(X)
1442605885722:tx_input_list <- as.character(tx_input_list)
1442605890958:X <- t(X)
1442605899241:source('/mnt/DATAPART1/rnaseq/R/matrix_processing.R', echo=TRUE)
1442605913739:correlation.selected <- function(X=X, tx_input_list=c("1","221150")) {
1442605913740:tx_input_list <- as.character(tx_input_list)
1442605913740:X <- t(X)
1442605913740:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605913741:out <- mclapply(1:ncol(Xi),
1442605913741:function(i) { cor(X, Xi[,i]) },
1442605913741:mc.cores=NCPU )
1442605913741:names(out) <- colnames(Xi)
1442605913742:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605913742:#colnames(out) <- colnames(Xi)
1442605913742:#rownames(out) <- colnames(X)
1442605913742:out
1442605913743:}
1442605926442:z <- correlation.selected()
1442605948674:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442605948674:tx_input_list <- as.character(tx_input_list)
1442605948675:X <- t(X)
1442605948675:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605948675:out <- mclapply(1:ncol(Xi),
1442605948675:function(i) { cor(X, Xi[,i]) },
1442605948676:mc.cores=NCPU )
1442605948676:names(out) <- colnames(Xi)
1442605948676:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605948677:#colnames(out) <- colnames(Xi)
1442605948677:#rownames(out) <- colnames(X)
1442605948677:out
1442605948677:}
1442605956083:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442605956083:tx_input_list <- as.character(tx_input_list)
1442605956084:X <- t(X)
1442605956084:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442605956084:out <- mclapply(1:ncol(Xi),
1442605956084:function(i) { cor(X, Xi[,i]) },
1442605956084:mc.cores=NCPU )
1442605956085:names(out) <- colnames(Xi)
1442605956085:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442605956085:#colnames(out) <- colnames(Xi)
1442605956086:#rownames(out) <- colnames(X)
1442605956086:out
1442605956086:}
1442605961224:z <- correlation.selected(X)
1442605979343:z[[1]]
1442606000442:sort(z[[1]])
1442606027350:?sort
1442606045935:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442606045936:tx_input_list <- as.character(tx_input_list)
1442606045936:X <- t(X)
1442606045936:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442606045936:out <- mclapply(1:ncol(Xi),
1442606045937:function(i) { sort(cor(X, Xi[,i]), decreasing=T) },
1442606045937:mc.cores=NCPU )
1442606045937:names(out) <- colnames(Xi)
1442606045937:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442606045938:#colnames(out) <- colnames(Xi)
1442606045938:#rownames(out) <- colnames(X)
1442606045938:out
1442606045938:}
1442606081493:z <- correlation.selected(ep)
1442606100117:dim(cor_ep)
1442606148917:a <- cor_ep[rownames(cor_ep)=="221150",]
1442606160092:a
1442606180366:View(sort(a, decreasing=T))
1442606193467:View(as.data.frame(sort(a, decreasing=T)))
1442606205792:View(z$`221150`)
1442606217779:View(as.data.frame(z$`221150`))
1442606253017:View(as.data.frame(cbind(z$`221150`), names(z$`221150`)))
1442606292317:names(z$`221150`)
1442606299342:names(z$`221150`[1])
1442606304717:names(z[1][1])
1442606308943:names(z[[1]])
1442606313267:names(z[1][2])
1442606318642:names(z[2][1])
1442606320842:names(z[2])
1442606329369:z$`221150`
1442606365691:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442606365691:tx_input_list <- as.character(tx_input_list)
1442606365691:X <- t(X)
1442606365692:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442606365692:out <- mclapply(1:ncol(Xi),
1442606365692:function(i) { cor(X, Xi[,i]) },
1442606365693:mc.cores=NCPU )
1442606365693:names(out) <- colnames(Xi)
1442606365693:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442606365694:#colnames(out) <- colnames(Xi)
1442606365694:#rownames(out) <- colnames(X)
1442606365694:out
1442606365694:}
1442606372618:z <- correlation.selected(ep)
1442606388517:names(z$`221150`)
1442606392967:z$`221150`
1442606475949:## GET COR FOR SPECIFIED GENES
1442606475994:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442606475994:tx_input_list <- as.character(tx_input_list)
1442606476006:X <- t(X)
1442606476007:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442606476007:out <- mclapply(1:ncol(Xi),
1442606476008:function(i) {
1442606476008:new <- cor(X, Xi[,i])
1442606476008:oo <- new[sort(new, decreasing = T)]
1442606476008:},
1442606476009:mc.cores=NCPU )
1442606476009:names(out) <- colnames(Xi)
1442606476009:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442606476010:#colnames(out) <- colnames(Xi)
1442606476010:#rownames(out) <- colnames(X)
1442606476010:out
1442606476010:}
1442606480767:z <- correlation.selected(ep)
1442606514853:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442606514853:tx_input_list <- as.character(tx_input_list)
1442606514854:X <- t(X)
1442606514854:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442606514854:out <- mclapply(1:ncol(Xi),
1442606514855:function(i) { cor(X, Xi[,i]) },
1442606514855:mc.cores=NCPU )
1442606514855:names(out) <- colnames(Xi)
1442606514855:#out <- data.frame(matrix(unlist(out), ncol=length(out)))
1442606514856:#colnames(out) <- colnames(Xi)
1442606514856:#rownames(out) <- colnames(X)
1442606514856:out
1442606514857:}
1442606529367:z <- correlation.selected(ep)
1442606553517:View(z$`221150`[sort(z$`221150`)])
1442606562267:View(z$`221150`[sort(z$`221150`)])
1442606572166:View(sort(z$`221150''))
1442606584824:View(sort(z$`221150`))
1442606606267:View(as.data.frame(z$`221150`))
1442606636424:View(as.data.frame(sort(z$`221150`)))
1442606713283:round(z$`221150`, 3) %in% round(a, 3)
1442606719827:sum(round(z$`221150`, 3) %in% round(a, 3))
1442606734267:sum(!(round(z$`221150`, 3) %in% round(a, 3)))
1442606752771:sum(!(round(z$`221150`, 6) %in% round(a, 6)))
1442606757792:sum(!(round(z$`221150`, 7) %in% round(a, 7)))
1442606770867:sum(!(z$`221150` %in% a))
1442606822075:View(cbind(z$`221150`, a))
1442606993867:a <_ top_corr
1442607020194:a <- top.correlated(Xp.q)
1442607066794:get.most.correlated <- function(X, how.many=50) {
1442607066794:# X - output of correlation.selected()
1442607066795:out <- correlation.selected(X)
1442607066795:out <- mclapply(1:ncol(X),
1442607066795:function(i) { names(sort(X[,i]))[1:how.many] },
1442607066795:mc.cores=NCPU
1442607066795:)
1442607066796:out <- matrix(unlist(out), ncol=ncol(X))
1442607066796:rownames(out) <- NULL
1442607066796:out
1442607066796:}
1442607097302:get.most.correlated <- function(X, tx_input_list, how.many=50) {
1442607097321:# X - output of correlation.selected()
1442607097321:out <- correlation.selected(X, tx_input_list)
1442607097321:out <- mclapply(1:ncol(X),
1442607097322:function(i) { names(sort(X[,i]))[1:how.many] },
1442607097342:mc.cores=NCPU
1442607097342:)
1442607097344:out <- matrix(unlist(out), ncol=ncol(X))
1442607097344:rownames(out) <- NULL
1442607097344:out
1442607097345:}
1442607121642:z <- get.most.correlated(X, c("1", "221150"))
1442607139742:get.most.correlated <- function(X, tx_input_list, how.many=50) {
1442607139743:# X - output of correlation.selected()
1442607139743:out <- correlation.selected(X, tx_input_list)
1442607139743:out <- mclapply(1:ncol(X),
1442607139743:function(i) { names(sort(X[,i]))[1:how.many] },
1442607139743:mc.cores=NCPU
1442607139744:)
1442607139744:#out <- matrix(unlist(out), ncol=ncol(X))
1442607139744:#rownames(out) <- NULL
1442607139744:out
1442607139745:}
1442607142993:z <- get.most.correlated(X, c("1", "221150"))
1442607173867:z <- correlation.selected()
1442607179217:QQ
1442607185792:z <- correlation.selected(X)
1442607192351:sort(z$`1`)
1442607216830:sort(z$`1`)
1442607255892:max(sort(z$`1`))
1442607261150:## GET COR FOR SPECIFIED GENES
1442607261150:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442607261150:tx_input_list <- as.character(tx_input_list)
1442607261151:X <- t(X)
1442607261151:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442607261151:out <- mclapply(1:ncol(Xi),
1442607261151:function(i) { cor(X, Xi[,i]) },
1442607261152:mc.cores=NCPU )
1442607261152:names(out) <- colnames(Xi)
1442607261152:out
1442607261152:}
1442607261153:get.most.correlated <- function(X, tx_input_list, how.many=50) {
1442607261153:# X - output of correlation.selected()
1442607261153:out <- correlation.selected(X, tx_input_list)
1442607261154:out <- mclapply(1:ncol(X),
1442607261154:function(i) { names(sort(X[,i]))[2:how.many] },
1442607261154:mc.cores=NCPU
1442607261154:)
1442607261154:#out <- matrix(unlist(out), ncol=ncol(X))
1442607261155:#rownames(out) <- NULL
1442607261155:out
1442607261155:}
1442607271193:z <- get.most.correlated(X, c("1", "221150"))
1442607290634:get.most.correlated <- function(X, tx_input_list, how.many=50) {
1442607290635:# X - output of correlation.selected()
1442607290635:out <- correlation.selected(X, tx_input_list)
1442607290635:out <- mclapply(1:ncol(X),
1442607290635:function(i) { names(sort(X[,i]))[2:(how.many+1)] },
1442607290635:mc.cores=NCPU
1442607290636:)
1442607290636:#out <- matrix(unlist(out), ncol=ncol(X))
1442607290636:#rownames(out) <- NULL
1442607290636:out
1442607290637:}
1442607293942:z <- get.most.correlated(X, c("1", "221150"))
1442607407560:get.most.correlated <- function(X, tx_input_list, how.many=50) {
1442607407560:# X - output of correlation.selected()
1442607407560:out <- correlation.selected(X, tx_input_list)
1442607407560:out <- mclapply(1:ncol(X),
1442607407561:function(i) { names(sort(X[,i]))[2:(how.many+1)] },
1442607407561:mc.cores=NCPU
1442607407561:)
1442607407561:#out <- matrix(unlist(out), ncol=ncol(X))
1442607407562:#rownames(out) <- NULL
1442607407562:names(out) <- colnames(tx_input_list)
1442607407562:out
1442607407562:}
1442607410292:z <- get.most.correlated(X, c("1", "221150"))
1442607427767:names(z)
1442607443721:names(z) <- tx_input_list
1442607445993:names(z)
1442607471135:## GET COR FOR SPECIFIED GENES
1442607471135:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442607471136:tx_input_list <- as.character(tx_input_list)
1442607471136:X <- t(X)
1442607471136:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442607471136:out <- mclapply(1:ncol(Xi),
1442607471137:function(i) { cor(X, Xi[,i]) },
1442607471137:mc.cores=NCPU )
1442607471137:names(out) <- colnames(Xi)
1442607471138:out
1442607471138:}
1442607471139:get.most.correlated <- function(X, tx_input_list, how.many=50) {
1442607471139:# X - output of correlation.selected()
1442607471139:out <- correlation.selected(X, tx_input_list)
1442607471139:out <- mclapply(1:ncol(X),
1442607471140:function(i) { names(sort(X[,i]))[2:(how.many+1)] },
1442607471140:mc.cores=NCPU
1442607471140:)
1442607471140:#out <- matrix(unlist(out), ncol=ncol(X))
1442607471141:#rownames(out) <- NULL
1442607471141:names(out) <- tx_input_list
1442607471141:out
1442607471141:}
1442607522542:z <- get.most.correlated(X, c("1", "221150"))
1442607608449:names(sort(X[,1]))
1442607632796:names(sort(X[1]))
1442607636770:(sort(X[1]))
1442607648669:X = read.table("expression.gene.v2.tsv")
1442607656646:Xp = preprocess(X)
1442607664628:# for speed, in reality would simply pass X to prediction.annotations.knn
1442607664628:q = intersect(unique(unlist(GO$annotation[["9606"]])), rownames(X))[1:1000]
1442607664700:Xp.q = Xp[q,]
1442607684092:z <- correlation.selected(Xp)
1442607792148:View(correlation.selected)
1442607792483:View(correlation.selected)
1442607792641:View(correlation.selected)
1442607842767:z
1442607852074:names(z[1])
1442607855096:names(z[[1]])
1442607925428:z[1]
1442607934742:class(z[1])
1442607948847:names(z[1])
1442607952150:names(z)
1442607959292:names(z[1][1])
1442607961842:names(z[1][1][1])
1442607975042:names(z[[1]])
1442607981671:rownames(z[[1]])
1442608020477:rownames(z[1])
1442608027019:class(z[[1]])
1442608045517:class(as.vector(z[[1]]))
1442608125992:head(as.vector(z[[1]]))
1442608131145:(as.vector(z[[1]]))
1442608332795:?"as.vector"
1442608442437:get.most.correlated <- function(X, tx_input_list=c("1","221150"), how.many=50) {
1442608442437:# X - output of correlation.selected()
1442608442437:out <- correlation.selected(X, tx_input_list)
1442608442438:out <- mclapply(X,
1442608442438:function(tx) {
1442608442438:oo <- rownames(tx)[sort(tx[,1])]
1442608442438:oo <- oo[2:(how.many+1)]
1442608442438:},
1442608442439:mc.cores=NCPU
1442608442439:)
1442608442439:#out <- matrix(unlist(out), ncol=ncol(X))
1442608442439:#rownames(out) <- NULL
1442608442439:names(out) <- tx_input_list
1442608442440:out
1442608442440:}
1442608455801:zi <- get.most.correlated(Xp)
1442608503619:oo = oo[oo %in% subset]
1442608506759:out <- correlation.selected(X, tx_input_list)
1442608538377:tx
1442608559317:tx<-out[,1]
1442608563344:tx<-out[1]
1442608575266:oo <- rownames(tx[sort(tx[,1])])
1442608589952:class(tx)
1442608591992:tx
1442608620753:tx[1]
1442608624992:class(tx[1])
1442608634742:class(tx[[1]])
1442608684820:get.most.correlated <- function(X, tx_input_list=c("1","221150"), how.many=50) {
1442608684820:# X - output of correlation.selected()
1442608684820:out <- correlation.selected(X, tx_input_list)
1442608684821:out <- mclapply(X,
1442608684821:function(tx) {
1442608684821:#                    oo <- rownames(tx[sort(tx[,1])])
1442608684821:#                    oo <- oo[2:(how.many+1)]
1442608684822:oo <- class(tx)
1442608684822:},
1442608684822:mc.cores=NCPU
1442608684822:)
1442608684822:#out <- matrix(unlist(out), ncol=ncol(X))
1442608684823:#rownames(out) <- NULL
1442608684823:names(out) <- tx_input_list
1442608684823:out
1442608684823:}
1442608698592:z<- get.most.correlated(Xp)
1442608751739:get.most.correlated <- function(X, tx_input_list=c("1","221150"), how.many=50) {
1442608751739:# X - output of correlation.selected()
1442608751740:out <- correlation.selected(X, tx_input_list)
1442608751740:out <- mclapply(out,
1442608751740:function(tx) {
1442608751741:oo <- rownames(tx[sort(tx[,1])])
1442608751741:oo <- oo[2:(how.many+1)]
1442608751741:},
1442608751742:mc.cores=NCPU
1442608751742:)
1442608751742:#out <- matrix(unlist(out), ncol=ncol(X))
1442608751742:#rownames(out) <- NULL
1442608751743:names(out) <- tx_input_list
1442608751743:out
1442608751743:}
1442608756317:z<- get.most.correlated(Xp)
1442608777750:tx[1[]]
1442608779822:tx[1
1442608781624:]
1442608791926:tx == tx[1]
1442608799847:class(tx[1])
1442608803242:class(tx)
1442608809742:class(tx[[1]])
1442609016182:correlation.selected <- function(X, tx_input_list=c("1","221150")) {
1442609016183:tx_input_list <- as.character(tx_input_list)
1442609016183:X <- t(X)
1442609016183:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442609016183:out <- mclapply(1:ncol(Xi),
1442609016183:function(i) {
1442609016184:new <- cor(X, Xi[,i])
1442609016184:names <- rownames(new)
1442609016184:oo <- as.vector(new)
1442609016184:names(oo) <- names
1442609016185:oo
1442609016185:},
1442609016185:mc.cores=NCPU )
1442609016185:names(out) <- colnames(Xi)
1442609016185:out
1442609016186:}
1442609027717:out <- correlation.selected(Xp)
1442609071942:out[1]
1442609076667:sort(out[1])
1442609090017:tx <- out[1]
1442609095967:sort(tx)
1442609113467:order(tx)
1442609117917:tx
1442609199882:get.most.correlated <- function(X, tx_input_list=c("1","221150"), how.many=50) {
1442609199883:# X - output of correlation.selected()
1442609199883:out <- correlation.selected(X, tx_input_list)
1442609199883:out <- mclapply(out,
1442609199883:function(tx) { names(tx)[order(tx, decreasing = T] },
1442609199884:mc.cores=NCPU
1442609199884:)
1442609199884:#out <- matrix(unlist(out), ncol=ncol(X))
1442609199884:#rownames(out) <- NULL
1442609199885:#names(out) <- tx_input_list
1442609199885:out
1442609200419:}
1442609224958:get.most.correlated <- function(X, tx_input_list=c("1","221150"), how.many=50) {
1442609224958:# X - output of correlation.selected()
1442609224958:out <- correlation.selected(X, tx_input_list)
1442609224959:out <- mclapply(out,
1442609224959:function(tx) { names(tx)[order(tx, decreasing = T)] },
1442609224959:mc.cores=NCPU
1442609224959:)
1442609224960:#out <- matrix(unlist(out), ncol=ncol(X))
1442609224960:#rownames(out) <- NULL
1442609224960:#names(out) <- tx_input_list
1442609224960:out
1442609224960:}
1442609237825:z <_ get.most.correlated(Xp)
1442609241824:z <- get.most.correlated(Xp)
1442609269642:a
1442609377967:z$`221150`
1442609429689:get.most.correlated <- function(X, tx_input_list=c("1","221150"), how.many=50) {
1442609429689:# X - output of correlation.selected()
1442609429689:out <- correlation.selected(X, tx_input_list)
1442609429690:out <- mclapply(out,
1442609429690:function(tx) { names(tx)[order(tx, decreasing = T)][2:how.many] },
1442609429690:mc.cores=NCPU
1442609429690:)
1442609429690:#out <- matrix(unlist(out), ncol=ncol(X))
1442609429691:#rownames(out) <- NULL
1442609429691:#names(out) <- tx_input_list
1442609429691:out
1442609429691:}
1442609436297:z <- get.most.correlated(Xp)
1442609451050:get.most.correlated <- function(X, tx_input_list=c("1","221150"), how.many=50) {
1442609451050:# X - output of correlation.selected()
1442609451050:out <- correlation.selected(X, tx_input_list)
1442609451050:out <- mclapply(out,
1442609451051:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442609451051:mc.cores=NCPU
1442609451051:)
1442609451051:#out <- matrix(unlist(out), ncol=ncol(X))
1442609451052:#rownames(out) <- NULL
1442609451052:#names(out) <- tx_input_list
1442609451052:out
1442609451052:}
1442609453742:z <- get.most.correlated(Xp)
1442609461392:z$`221150`
1442609541711:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442609541711:taxon.id = as.character(taxon.id)
1442609541711:At = A$annotation[[taxon.id]]
1442609541711:background = intersect(unique(unlist(At)), rownames(X))
1442609541711:r = get.most.correlated(X, tx_input_list=c("1","221150"), how.many=50)
1442609541712:#r = top.correlated(X, subset=background, k=k)
1442609541712:mclapply(r, function(c1) { # dla każdego transkryptu
1442609541712:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442609541713:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442609541713:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442609541713:oo = NULL
1442609541713:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442609541714:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442609541714:if (ct[1,1] >= min.count) {
1442609541714:fet = fisher.test(ct)
1442609541714:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442609541715:#oo = as.numeric(fet$estimate)
1442609541715:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442609541715:}
1442609541716:}
1442609541716:oo
1442609541716:})
1442609541716:unlist(o)
1442609541717:}, mc.cores=NCPU)
1442609541717:}
1442609541718:### Get Go terms associated with each tx
1442609541718:assign.terms <-function(predictions) {
1442609541719:}
1442609760773:predictions <- predict.annotations.knn(Xp, GO, 9606)
1442609863492:predictions$`221150`
1442610112757:dim(X)
1442610213529:rownames(X) %in% subset
1442610220171:sum(rownames(X) %in% subset)
1442610248547:sum(rownames(X) %in% background)
1442610261713:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442610261713:correlation.selected <- function(X, subset=NULL, tx_input_list=c("1","221150")) {
1442610261713:tx_input_list <- as.character(tx_input_list)
1442610261714:if (!is.null(subset)) {
1442610261714:X = X[rownames(X) %in% subset,]
1442610261714:}
1442610261714:X <- t(X)
1442610261715:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442610261715:out <- mclapply(1:ncol(Xi),
1442610261715:function(i) {
1442610261715:new <- cor(X, Xi[,i])
1442610261716:names <- rownames(new)
1442610261716:oo <- as.vector(new)
1442610261716:names(oo) <- names
1442610261716:oo
1442610261717:},
1442610261717:mc.cores=NCPU )
1442610261717:names(out) <- colnames(Xi)
1442610261717:out
1442610261718:}
1442610261718:get.most.correlated <- function(X, subset=NULL, tx_input_list=c("1","221150"), how.many=50) {
1442610261719:# X - output of correlation.selected()
1442610261719:out <- correlation.selected(X, subset, tx_input_list)
1442610261719:out <- mclapply(out,
1442610261719:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442610261720:mc.cores=NCPU
1442610261720:)
1442610261720:#out <- matrix(unlist(out), ncol=ncol(X))
1442610261720:#rownames(out) <- NULL
1442610261720:#names(out) <- tx_input_list
1442610261721:out
1442610261721:}
1442610282542:z <- get.most.correlated(Xp)
1442610355008:# could improve to output p-value, odds ratio ("estimate") + log(OR), and N for each term-gene pair
1442610355008:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1) {
1442610355009:taxon.id = as.character(taxon.id)
1442610355009:At = A$annotation[[taxon.id]]
1442610355009:background = intersect(unique(unlist(At)), rownames(X))
1442610355009:r = get.most.correlated(X, subset=background, tx_input_list=c("1","221150"), how.many=50)
1442610355009:#r = top.correlated(X, subset=background, k=k)
1442610355010:mclapply(r, function(c1) { # dla każdego transkryptu
1442610355010:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442610355010:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442610355011:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442610355011:oo = NULL
1442610355011:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442610355012:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442610355012:if (ct[1,1] >= min.count) {
1442610355012:fet = fisher.test(ct)
1442610355013:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442610355013:#oo = as.numeric(fet$estimate)
1442610355013:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442610355118:}
1442610355119:}
1442610355131:oo
1442610355132:})
1442610355132:unlist(o)
1442610355132:}, mc.cores=NCPU)
1442610355133:}
1442610355134:### Get Go terms associated with each tx
1442610355134:assign.terms <-function(predictions) {
1442610355135:}
1442610388194:predictions<- predict.annotations.knn(Xp, GO, 9606)
1442610479191:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("221150"), ) {
1442610479192:taxon.id = as.character(taxon.id)
1442610479192:At = A$annotation[[taxon.id]]
1442610479193:background = intersect(unique(unlist(At)), rownames(X))
1442610479258:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442610479325:#r = top.correlated(X, subset=background, k=k)
1442610479325:mclapply(r, function(c1) { # dla każdego transkryptu
1442610479326:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442610479326:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442610479326:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442610479326:oo = NULL
1442610479326:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442610479327:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442610479327:if (ct[1,1] >= min.count) {
1442610479327:fet = fisher.test(ct)
1442610479327:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442610479328:#oo = as.numeric(fet$estimate)
1442610479328:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442610479328:}
1442610479328:}
1442610479328:oo
1442610479329:})
1442610479329:unlist(o)
1442610479329:}, mc.cores=NCPU)
1442610481866:}
1442610481867:### Get Go terms associated with each tx
1442610481867:assign.terms <-function(predictions) {
1442610481868:}
1442610502730:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("221150")) {
1442610502730:taxon.id = as.character(taxon.id)
1442610502730:At = A$annotation[[taxon.id]]
1442610502731:background = intersect(unique(unlist(At)), rownames(X))
1442610502731:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442610502731:#r = top.correlated(X, subset=background, k=k)
1442610502732:mclapply(r, function(c1) { # dla każdego transkryptu
1442610502732:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442610502732:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442610502732:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442610502733:oo = NULL
1442610502733:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442610502733:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442610502734:if (ct[1,1] >= min.count) {
1442610502734:fet = fisher.test(ct)
1442610502734:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442610502735:#oo = as.numeric(fet$estimate)
1442610502735:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442610502735:}
1442610502736:}
1442610502736:oo
1442610502736:})
1442610502737:unlist(o)
1442610502737:}, mc.cores=NCPU)
1442610502737:}
1442610502738:### Get Go terms associated with each tx
1442610502738:assign.terms <-function(predictions) {
1442610502739:}
1442610507642:predictions<- predict.annotations.knn(Xp, GO, 9606)
1442610585992:z <- X[rownames(X) %in% subset,]
1442610594271:"221150" %in% z
1442610602648:sum(z=="221150")
1442610620892:sum(rownames(z)=="221150")
1442610624367:rownames(Z)
1442610626192:rownames(z)
1442610641767:subset<- baskground
1442610645692:subset<- background
1442610653442:z <- X[rownames(X) %in% subset,]
1442610654692:z
1442610670953:length(rownames(z))
1442610682471:sum(rownames(z)=="221150")
1442610720141:sum(rownames(z)=="1")
1442610758782:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442610758783:#TODO check if tx_input in subset
1442610758783:tx_input_list <- as.character(tx_input_list)
1442610758783:if (!is.null(subset)) {
1442610758783:X = X[rownames(X) %in% subset,]
1442610758784:}
1442610758784:X <- t(X)
1442610758784:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442610758784:out <- mclapply(1:ncol(Xi),
1442610758785:function(i) {
1442610758785:new <- cor(X, Xi[,i])
1442610758785:names <- rownames(new)
1442610758785:oo <- as.vector(new)
1442610758786:names(oo) <- names
1442610758786:oo
1442610758786:},
1442610758787:mc.cores=NCPU )
1442610758787:names(out) <- colnames(Xi)
1442610758787:out
1442610758787:}
1442610775717:dim(z)
1442610796352:rownames(z)[1]
1442610817254:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442610817254:taxon.id = as.character(taxon.id)
1442610817254:At = A$annotation[[taxon.id]]
1442610817254:background = intersect(unique(unlist(At)), rownames(X))
1442610817254:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442610817255:#r = top.correlated(X, subset=background, k=k)
1442610817255:mclapply(r, function(c1) { # dla każdego transkryptu
1442610817255:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442610817256:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442610817256:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442610817256:oo = NULL
1442610817256:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442610817257:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442610817257:if (ct[1,1] >= min.count) {
1442610817257:fet = fisher.test(ct)
1442610817258:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442610817258:#oo = as.numeric(fet$estimate)
1442610817258:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442610817258:}
1442610817259:}
1442610817259:oo
1442610817259:})
1442610817260:unlist(o)
1442610817260:}, mc.cores=NCPU)
1442610817260:}
1442610817261:### Get Go terms associated with each tx
1442610817261:assign.terms <-function(predictions) {
1442610817262:}
1442610836521:predictions<- predict.annotations.knn(Xp, GO, 9606)
1442610917999:predictions$`221150`
1442611044464:predictions$`221150`<0.05
1442611050229:z <- names(predictions$`221150`)[predictions$`221150`<0.05]
1442611056442:z
1442611069517:length(predictions$`221150`)
1442611309322:z <- GO$table$Term.Name[GO$table$Term.ID %in% z]
1442611311942:z
1442612000334:top.correlated = function(X, subset=NULL, k=50) {
1442612000334:k = min(k, nrow(X) - 1)
1442612000334:X = as.matrix(X)
1442612000335:stopifnot(sum(is.na(X)) == 0)
1442612000335:Xs = t(apply(X,1,scale))
1442612000335:o = mclapply(1:nrow(Xs), function(i) {
1442612000335:if ((i > 0) && (i %% 100 == 0)) {
1442612000336:sprintf("Calculating correlations for row: %d", i)
1442612000336:}
1442612000336:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442612000336:oo = names(r)[order(r, decreasing=T)]
1442612000337:if (!is.null(subset)) {
1442612000337:oo = oo[oo %in% subset]
1442612000337:}
1442612000337:oo[1:min(k, length(oo))]
1442612000338:}, mc.cores=NCPU)
1442612000338:names(o) = rownames(Xs)
1442612000338:o
1442612000339:}
1442612000339:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442612000340:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442612000340:#TODO check if tx_input in subset
1442612000340:tx_input_list <- as.character(tx_input_list)
1442612000340:if (!is.null(subset)) {
1442612000340:X = X[rownames(X) %in% subset,]
1442612000341:}
1442612000341:X <- t(X)
1442612000341:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442612000341:out <- mclapply(1:ncol(Xi),
1442612000342:function(i) {
1442612000342:new <- cor(X, Xi[,i])
1442612000342:names <- rownames(new)
1442612000342:oo <- as.vector(new)
1442612000343:names(oo) <- names
1442612000343:oo
1442612000343:},
1442612000343:mc.cores=NCPU )
1442612000344:names(out) <- colnames(Xi)
1442612000344:out
1442612000344:}
1442612000345:get.most.correlated <- function(X, subset=NULL, tx_input_list, how.many=50) {
1442612000345:# X - output of correlation.selected()
1442612000346:out <- correlation.selected(X, subset, tx_input_list)
1442612000346:out <- mclapply(out,
1442612000346:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442612000346:mc.cores=NCPU
1442612000346:)
1442612000347:#out <- matrix(unlist(out), ncol=ncol(X))
1442612000347:#rownames(out) <- NULL
1442612000347:#names(out) <- tx_input_list
1442612000347:out
1442612000348:}
1442612007294:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442612007294:taxon.id = as.character(taxon.id)
1442612007294:At = A$annotation[[taxon.id]]
1442612007294:background = intersect(unique(unlist(At)), rownames(X))
1442612007295:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442612007295:#r = top.correlated(X, subset=background, k=k)
1442612007295:mclapply(r, function(c1) { # dla każdego transkryptu
1442612007296:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442612007296:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442612007296:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442612007296:oo = NULL
1442612007297:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442612007297:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442612007297:if (ct[1,1] >= min.count) {
1442612007297:fet = fisher.test(ct)
1442612007298:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442612007298:#oo = as.numeric(fet$estimate)
1442612007298:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442612007299:}
1442612007300:}
1442612007300:oo
1442612007300:})
1442612007301:unlist(o)
1442612007301:}, mc.cores=NCPU)
1442612007301:}
1442612091914:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442612121624:predictions <- predict.annotations.knn(Xp, GO, 9606)
1442612128432:library(parallel)
1442612128573:library(limma)
1442612129495:NCPU = detectCores()
1442612135636:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442612141169:predictions <- predict.annotations.knn(Xp, GO, 9606)
1442612215608:z <- as.character(names(predictions$`221150`)[predictions$`221150`<0.05])
1442612217443:z
1442612220804:class(z)
1442612224677:z <- GO$table$Term.Name[GO$table$Term.ID %in% z]
1442612227944:z
1442612369900:top.correlated = function(X, subset=NULL, k=50) {
1442612369900:k = min(k, nrow(X) - 1)
1442612369900:X = as.matrix(X)
1442612369900:stopifnot(sum(is.na(X)) == 0)
1442612369901:Xs = t(apply(X,1,scale))
1442612369901:o = mclapply(1:nrow(Xs), function(i) {
1442612369901:if ((i > 0) && (i %% 100 == 0)) {
1442612369901:sprintf("Calculating correlations for row: %d", i)
1442612369902:}
1442612369902:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442612369902:oo = names(r)[order(r, decreasing=T)]
1442612369902:if (!is.null(subset)) {
1442612369903:oo = oo[oo %in% subset]
1442612369903:}
1442612369903:oo[1:min(k, length(oo))]
1442612369903:}, mc.cores=NCPU)
1442612369904:names(o) = rownames(Xs)
1442612369904:o
1442612369904:}
1442612369905:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442612369905:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442612369905:#TODO check if tx_input in subset
1442612369906:tx_input_list <- as.character(tx_input_list)
1442612369906:if (!is.null(subset)) {
1442612369906:X = X[rownames(X) %in% subset,]
1442612369906:}
1442612369906:X <- t(X)
1442612369907:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442612369907:out <- mclapply(1:ncol(Xi),
1442612369907:function(i) {
1442612369908:new <- cor(X, Xi[,i])
1442612369908:names <- rownames(new)
1442612369908:oo <- as.vector(new)
1442612369908:names(oo) <- names
1442612369909:oo
1442612369909:},
1442612369909:mc.cores=NCPU )
1442612369909:names(out) <- colnames(Xi)
1442612369910:out
1442612369910:}
1442612369911:get.most.correlated <- function(X, subset=NULL, tx_input_list, how.many=50) {
1442612369911:# X - output of correlation.selected()
1442612369911:out <- correlation.selected(X, subset, tx_input_list)
1442612369911:out <- mclapply(out,
1442612369912:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442612369912:mc.cores=NCPU
1442612369912:)
1442612369912:#out <- matrix(unlist(out), ncol=ncol(X))
1442612369913:#rownames(out) <- NULL
1442612369913:#names(out) <- tx_input_list
1442612369913:out
1442612369913:}
1442612378979:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442612378979:taxon.id = as.character(taxon.id)
1442612378979:At = A$annotation[[taxon.id]]
1442612378980:background = intersect(unique(unlist(At)), rownames(X))
1442612378980:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442612378980:#r = top.correlated(X, subset=background, k=k)
1442612378980:mclapply(r, function(c1) { # dla każdego transkryptu
1442612378981:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442612378981:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442612378981:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442612378982:oo = NULL
1442612378982:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442612378982:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442612378982:if (ct[1,1] >= min.count) {
1442612378983:fet = fisher.test(ct)
1442612378983:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442612378983:#oo = as.numeric(fet$estimate)
1442612378984:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442612378984:}
1442612378984:}
1442612378985:oo
1442612378985:})
1442612378985:unlist(o)
1442612378986:}, mc.cores=NCPU)
1442612378986:}
1442612378987:### Get Go terms associated with each tx
1442612378987:assign.terms <-function(predictions) {
1442612378987:}
1442612382759:library(parallel)
1442612382926:library(limma)
1442612383753:NCPU = detectCores()
1442612424661:z <- "GO:0000001"
1442612431754:GO$table$Term.ID %in% z
1442612436400:GO$table$Term.Name[GO$table$Term.ID %in% z]
1442612481650:z <- as.character(GO$table$Term.Name)[GO$table$Term.ID %in% z]
1442612484121:z
1442612489142:z <- "GO:0000001"
1442612497442:sum(GO$table$Term.ID %in% z)
1442612569924:library(parallel)
1442612570092:library(limma)
1442612570317:# Globals
1442612570667:NCPU = detectCores()
1442612577389:### Get y and y_hat; output=(y or y_hat)
1442612577390:#TODO change to output only those that have predictions! Also, output y_hat as probability scores
1442612577390:y.labels <- function(output, A=GO, taxon.id = 9606) {
1442612577390:terms <- A$table$Term.ID[A$table$Taxon.ID == taxon.id]
1442612577390:txs <- A$table$Gene.ID[A$table$Taxon.ID == taxon.id]
1442612577391:o <- matrix(c(0), nrow=length(unique(txs)), ncol=length(unique(terms)))
1442612577391:dimnames(o) <- list(unique(txs), unique(terms))
1442612577391:if(output=="y") {
1442612577392:o <- mclapply(rownames(o), function(tx) {
1442612577392:hits <- unique(terms[txs == tx])
1442612577392:oo <- as.numeric(colnames(o) %in% hits)
1442612577393:}, mc.cores=NCPU)
1442612577393:} else if(output=="y_hat") {
1442612577393:o <- mclapply(rownames(o), function(tx) {
1442612577393:hits <- names(predictions)[names(predictions)==tx]
1442612577394:oo <- as.numeric(colnames(o) %in% hits)
1442612577394:}, mc.cores=NCPU)
1442612577394:} else {
1442612577395:print('"output should be either "y" or "y_hat"')
1442612577395:}
1442612577395:o
1442612577396:}
1442612583388:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
1442612583389:taxon.id = as.character(taxon.id)
1442612583389:At = A$annotation[[taxon.id]]
1442612583389:background = intersect(unique(unlist(At)), rownames(X))
1442612583390:r = get.most.correlated(X, subset=background, tx_input_list, how.many=50)
1442612583390:#r = top.correlated(X, subset=background, k=k)
1442612583390:mclapply(r, function(c1) { # dla każdego transkryptu
1442612583390:c1 = as.integer(background %in% c1) # ogarnij które z przestrzeni(annotacjach&rownames) są w skorelowanych dla danego tx
1442612583391:o = sapply(At, function(c2) { # dla każdej annotacji (do każdej annotacji są transkrypty należące do niej)
1442612583391:c2 = as.integer(background %in% c2) # ogarnij które z przestzeni są w annotacajch dla danego GO term
1442612583391:oo = NULL
1442612583392:if (sum(c2) > 0) { #jeśli którekolwiek są, to
1442612583392:ct = as.matrix(table(c1,c2))[c("1","0"),c("1","0")] # zrób klasyczną contingency table, gdzie 1,1 to freq należących do obu -> powiązanie tx z GO term
1442612583392:if (ct[1,1] >= min.count) {
1442612583392:fet = fisher.test(ct)
1442612583393:#oo = list(p=fet$p.value, OR=fet$estimate, log.OR=log(fet$estimate))
1442612583393:#oo = as.numeric(fet$estimate)
1442612583393:oo = fet$p.value # sign(log10(as.numeric(fet$estimate)))
1442612583394:}
1442612583394:}
1442612583394:oo
1442612583395:})
1442612583395:unlist(o)
1442612583395:}, mc.cores=NCPU)
1442612583396:}
1442612583396:### Get Go terms associated with each tx
1442612583397:assign.terms <-function(predictions) {
1442612583397:}
1442612591101:top.correlated = function(X, subset=NULL, k=50) {
1442612591101:k = min(k, nrow(X) - 1)
1442612591101:X = as.matrix(X)
1442612591101:stopifnot(sum(is.na(X)) == 0)
1442612591102:Xs = t(apply(X,1,scale))
1442612591102:o = mclapply(1:nrow(Xs), function(i) {
1442612591102:if ((i > 0) && (i %% 100 == 0)) {
1442612591102:sprintf("Calculating correlations for row: %d", i)
1442612591102:}
1442612591103:r = ((Xs %*% Xs[i,]) / ncol(X))[,1][-i]
1442612591103:oo = names(r)[order(r, decreasing=T)]
1442612591103:if (!is.null(subset)) {
1442612591104:oo = oo[oo %in% subset]
1442612591104:}
1442612591104:oo[1:min(k, length(oo))]
1442612591104:}, mc.cores=NCPU)
1442612591105:names(o) = rownames(Xs)
1442612591105:o
1442612591105:}
1442612591106:## GET COR FOR SPECIFIED GENES; X is an expression matrix
1442612591106:correlation.selected <- function(X, subset=NULL, tx_input_list) {
1442612591106:#TODO check if tx_input in subset
1442612591107:tx_input_list <- as.character(tx_input_list)
1442612591107:if (!is.null(subset)) {
1442612591107:X = X[rownames(X) %in% subset,]
1442612591107:}
1442612591107:X <- t(X)
1442612591108:Xi <- X[,(colnames(X) %in% tx_input_list)]
1442612591108:out <- mclapply(1:ncol(Xi),
1442612591108:function(i) {
1442612591109:new <- cor(X, Xi[,i])
1442612591109:names <- rownames(new)
1442612591109:oo <- as.vector(new)
1442612591109:names(oo) <- names
1442612591110:oo
1442612591110:},
1442612591110:mc.cores=NCPU )
1442612591110:names(out) <- colnames(Xi)
1442612591111:out
1442612591111:}
1442612591112:get.most.correlated <- function(X, subset=NULL, tx_input_list, how.many=50) {
1442612591112:# X - output of correlation.selected()
1442612591112:out <- correlation.selected(X, subset, tx_input_list)
1442612591113:out <- mclapply(out,
1442612591113:function(tx) { names(tx)[order(tx, decreasing = T)][2:(how.many+1)] },
1442612591113:mc.cores=NCPU
1442612591113:)
1442612591113:#out <- matrix(unlist(out), ncol=ncol(X))
1442612591114:#rownames(out) <- NULL
1442612591114:#names(out) <- tx_input_list
1442612591114:out
1442612591114:}
1442612617928:predictions <- predict.annotations.knn(Xp, GO, 9606)
1442612679943:X = read.table("expression.gene.v2.tsv")
1442612686213:sum(!(Xp == preprocess(precip
1442612696142:sum(!(Xp == preprocess(X)))
1442612726722:save.image("/mnt/DATAPART1/rnaseq/.RData")
1442613002300:# could improve to output p-value, odds ratio ("estimate") + log(OR), and N for each term-gene pair
1442613002300:predict.annotations.knn = function(X, A, taxon.id, k=50, min.count=1, tx_input_list=c("55", "221150")) {
